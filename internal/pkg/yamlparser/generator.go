package yamlparser

import (
	"bytes"
	"reflect"

	"github.com/dave/jennifer/jen"
)

func GenerateType(p reflect.Type, typeName string, packagePath string, packageName string) ([]byte, error) {
	singularName, _ := NameForType(typeName)
	buffer := new(bytes.Buffer)
	pkg := jen.NewFilePathName(packagePath, packageName)
	pkg.HeaderComment("// Code generated by YAML2GO. DO NOT EDIT.")
	main, extra := jenGenerator(p, typeName, 0)
	switch p.Kind() {
	case reflect.Slice:
		pkg.Add(jen.Type().Id(singularName + "List").Add(main))
	case reflect.Map:
		pkg.Add(jen.Type().Id(singularName + "Map").Add(main))
	default:
		//pkg.Add(jen.Comment("//easyjson:json"))
		pkg.Add(jen.Type().Id(singularName).Add(main))
	}
	for xType, stmt := range extra {
		//pkg.Add(jen.Comment("//easyjson:json"))
		pkg.Add(jen.Type().Id(xType).Add(stmt))
	}
	if err := pkg.Render(buffer); err != nil {
		return nil, err
	}
	return buffer.Bytes(), nil
}
