/*
 *    Copyright 2021 FerociousBite and Contributors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// Code generated by github.com/ferocious-space/eveapi/scripts/generator.go ; DO NOT EDIT.
package notification

import (
	"errors"
	"fmt"
	"github.com/davecgh/go-spew/spew"
	"gopkg.in/yaml.v2"
	"time"

	"github.com/ferocious-space/eveapi/esi/character"
)

func ParseNotification(n *character.GetCharactersCharacterIDNotificationsOKBodyItems0) (interface{}, error) {
	switch *n.Type {

	case "AcceptedAlly", "AcceptedAlly ":
		value := new(AcceptedAlly)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AcceptedSurrender", "AcceptedSurrender ":
		value := new(AcceptedSurrender)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllMaintenanceBillMsg", "AllMaintenanceBillMsg ":
		value := new(AllMaintenanceBillMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarCorpJoinedAllianceMsg", "AllWarCorpJoinedAllianceMsg ":
		value := new(AllWarCorpJoinedAllianceMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarDeclaredMsg", "AllWarDeclaredMsg ":
		value := new(AllWarDeclaredMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarInvalidatedMsg", "AllWarInvalidatedMsg ":
		value := new(AllWarInvalidatedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarRetractedMsg", "AllWarRetractedMsg ":
		value := new(AllWarRetractedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarSurrenderMsg", "AllWarSurrenderMsg ":
		value := new(AllWarSurrenderMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllianceCapitalChanged", "AllianceCapitalChanged ":
		value := new(AllianceCapitalChanged)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllyContractCancelled", "AllyContractCancelled ":
		value := new(AllyContractCancelled)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllyJoinedWarAggressorMsg", "AllyJoinedWarAggressorMsg ":
		value := new(AllyJoinedWarAggressorMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllyJoinedWarAllyMsg", "AllyJoinedWarAllyMsg ":
		value := new(AllyJoinedWarAllyMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllyJoinedWarDefenderMsg", "AllyJoinedWarDefenderMsg ":
		value := new(AllyJoinedWarDefenderMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BillOutOfMoneyMsg", "BillOutOfMoneyMsg ":
		value := new(BillOutOfMoneyMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BillPaidCorpAllMsg", "BillPaidCorpAllMsg ":
		value := new(BillPaidCorpAllMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyClaimMsg", "BountyClaimMsg ":
		value := new(BountyClaimMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyESSShared", "BountyESSShared ":
		value := new(BountyESSShared)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyESSTaken", "BountyESSTaken ":
		value := new(BountyESSTaken)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyPlacedAlliance", "BountyPlacedAlliance ":
		value := new(BountyPlacedAlliance)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyPlacedChar", "BountyPlacedChar ":
		value := new(BountyPlacedChar)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyPlacedCorp", "BountyPlacedCorp ":
		value := new(BountyPlacedCorp)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyYourBountyClaimed", "BountyYourBountyClaimed ":
		value := new(BountyYourBountyClaimed)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BuddyConnectContactAdd", "BuddyConnectContactAdd ":
		value := new(BuddyConnectContactAdd)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharAppAcceptMsg", "CharAppAcceptMsg ":
		value := new(CharAppAcceptMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharAppRejectMsg", "CharAppRejectMsg ":
		value := new(CharAppRejectMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharAppWithdrawMsg", "CharAppWithdrawMsg ":
		value := new(CharAppWithdrawMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharLeftCorpMsg", "CharLeftCorpMsg ":
		value := new(CharLeftCorpMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharMedalMsg", "CharMedalMsg ":
		value := new(CharMedalMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharTerminationMsg", "CharTerminationMsg ":
		value := new(CharTerminationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneActivationMsg", "CloneActivationMsg ":
		value := new(CloneActivationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneActivationMsg2", "CloneActivationMsg2 ":
		value := new(CloneActivationMsg2)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneMovedMsg", "CloneMovedMsg ":
		value := new(CloneMovedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneRevokedMsg2", "CloneRevokedMsg2 ":
		value := new(CloneRevokedMsg2)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ContactAdd", "ContactAdd ":
		value := new(ContactAdd)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ContactEdit", "ContactEdit ":
		value := new(ContactEdit)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ContainerPasswordMsg", "ContainerPasswordMsg ":
		value := new(ContainerPasswordMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAllBillMsg", "CorpAllBillMsg ":
		value := new(CorpAllBillMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppAcceptMsg", "CorpAppAcceptMsg ":
		value := new(CorpAppAcceptMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppInvitedMsg", "CorpAppInvitedMsg ":
		value := new(CorpAppInvitedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppNewMsg", "CorpAppNewMsg ":
		value := new(CorpAppNewMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppRejectCustomMsg", "CorpAppRejectCustomMsg ":
		value := new(CorpAppRejectCustomMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppRejectMsg", "CorpAppRejectMsg ":
		value := new(CorpAppRejectMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpDividendMsg", "CorpDividendMsg ":
		value := new(CorpDividendMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpFriendlyFireDisableTimerCompleted", "CorpFriendlyFireDisableTimerCompleted ":
		value := new(CorpFriendlyFireDisableTimerCompleted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpFriendlyFireDisableTimerStarted", "CorpFriendlyFireDisableTimerStarted ":
		value := new(CorpFriendlyFireDisableTimerStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpFriendlyFireEnableTimerCompleted", "CorpFriendlyFireEnableTimerCompleted ":
		value := new(CorpFriendlyFireEnableTimerCompleted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpFriendlyFireEnableTimerStarted", "CorpFriendlyFireEnableTimerStarted ":
		value := new(CorpFriendlyFireEnableTimerStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpKicked", "CorpKicked ":
		value := new(CorpKicked)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpLiquidationMsg", "CorpLiquidationMsg ":
		value := new(CorpLiquidationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpNewCEOMsg", "CorpNewCEOMsg ":
		value := new(CorpNewCEOMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpNewsMsg", "CorpNewsMsg ":
		value := new(CorpNewsMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpTaxChangeMsg", "CorpTaxChangeMsg ":
		value := new(CorpTaxChangeMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpVoteMsg", "CorpVoteMsg ":
		value := new(CorpVoteMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarDeclaredMsg", "CorpWarDeclaredMsg ":
		value := new(CorpWarDeclaredMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarFightingLegalMsg", "CorpWarFightingLegalMsg ":
		value := new(CorpWarFightingLegalMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarInvalidatedMsg", "CorpWarInvalidatedMsg ":
		value := new(CorpWarInvalidatedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarRetractedMsg", "CorpWarRetractedMsg ":
		value := new(CorpWarRetractedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarSurrenderMsg", "CorpWarSurrenderMsg ":
		value := new(CorpWarSurrenderMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CustomsMsg", "CustomsMsg ":
		value := new(CustomsMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "DeclareWar", "DeclareWar ":
		value := new(DeclareWar)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "EntosisCaptureStarted", "EntosisCaptureStarted ":
		value := new(EntosisCaptureStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWAllianceWarningMsg", "FWAllianceWarningMsg ":
		value := new(FWAllianceWarningMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCharRankGainMsg", "FWCharRankGainMsg ":
		value := new(FWCharRankGainMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCharRankLossMsg", "FWCharRankLossMsg ":
		value := new(FWCharRankLossMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCorpJoinMsg", "FWCorpJoinMsg ":
		value := new(FWCorpJoinMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCorpKickMsg", "FWCorpKickMsg ":
		value := new(FWCorpKickMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCorpLeaveMsg", "FWCorpLeaveMsg ":
		value := new(FWCorpLeaveMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCorpWarningMsg", "FWCorpWarningMsg ":
		value := new(FWCorpWarningMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarCorpJoinRequestMsg", "FacWarCorpJoinRequestMsg ":
		value := new(FacWarCorpJoinRequestMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarCorpJoinWithdrawMsg", "FacWarCorpJoinWithdrawMsg ":
		value := new(FacWarCorpJoinWithdrawMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarCorpLeaveRequestMsg", "FacWarCorpLeaveRequestMsg ":
		value := new(FacWarCorpLeaveRequestMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarCorpLeaveWithdrawMsg", "FacWarCorpLeaveWithdrawMsg ":
		value := new(FacWarCorpLeaveWithdrawMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarLPDisqualifiedEvent", "FacWarLPDisqualifiedEvent ":
		value := new(FacWarLPDisqualifiedEvent)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarLPDisqualifiedKill", "FacWarLPDisqualifiedKill ":
		value := new(FacWarLPDisqualifiedKill)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarLPPayoutEvent", "FacWarLPPayoutEvent ":
		value := new(FacWarLPPayoutEvent)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarLPPayoutKill", "FacWarLPPayoutKill ":
		value := new(FacWarLPPayoutKill)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "GameTimeAdded", "GameTimeAdded ":
		value := new(GameTimeAdded)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "GameTimeReceived", "GameTimeReceived ":
		value := new(GameTimeReceived)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "GameTimeSent", "GameTimeSent ":
		value := new(GameTimeSent)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "GiftReceived", "GiftReceived ":
		value := new(GiftReceived)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IncursionCompletedMsg", "IncursionCompletedMsg ":
		value := new(IncursionCompletedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IndustryTeamAuctionLost", "IndustryTeamAuctionLost ":
		value := new(IndustryTeamAuctionLost)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsuranceExpirationMsg", "InsuranceExpirationMsg ":
		value := new(InsuranceExpirationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsuranceFirstShipMsg", "InsuranceFirstShipMsg ":
		value := new(InsuranceFirstShipMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsuranceInvalidatedMsg", "InsuranceInvalidatedMsg ":
		value := new(InsuranceInvalidatedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsuranceIssuedMsg", "InsuranceIssuedMsg ":
		value := new(InsuranceIssuedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsurancePayoutMsg", "InsurancePayoutMsg ":
		value := new(InsurancePayoutMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "JumpCloneDeletedMsg1", "JumpCloneDeletedMsg1 ":
		value := new(JumpCloneDeletedMsg1)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "JumpCloneDeletedMsg2", "JumpCloneDeletedMsg2 ":
		value := new(JumpCloneDeletedMsg2)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillReportFinalBlow", "KillReportFinalBlow ":
		value := new(KillReportFinalBlow)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillReportVictim", "KillReportVictim ":
		value := new(KillReportVictim)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightAvailable", "KillRightAvailable ":
		value := new(KillRightAvailable)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightAvailableOpen", "KillRightAvailableOpen ":
		value := new(KillRightAvailableOpen)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightEarned", "KillRightEarned ":
		value := new(KillRightEarned)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightUnavailable", "KillRightUnavailable ":
		value := new(KillRightUnavailable)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightUnavailableOpen", "KillRightUnavailableOpen ":
		value := new(KillRightUnavailableOpen)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightUsed", "KillRightUsed ":
		value := new(KillRightUsed)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "LocateCharMsg", "LocateCharMsg ":
		value := new(LocateCharMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MadeWarMutual", "MadeWarMutual ":
		value := new(MadeWarMutual)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MercOfferedNegotiationMsg", "MercOfferedNegotiationMsg ":
		value := new(MercOfferedNegotiationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MissionOfferExpirationMsg", "MissionOfferExpirationMsg ":
		value := new(MissionOfferExpirationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingAutomaticFracture", "MoonminingAutomaticFracture ":
		value := new(MoonminingAutomaticFracture)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingExtractionCancelled", "MoonminingExtractionCancelled ":
		value := new(MoonminingExtractionCancelled)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingExtractionFinished", "MoonminingExtractionFinished ":
		value := new(MoonminingExtractionFinished)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingExtractionStarted", "MoonminingExtractionStarted ":
		value := new(MoonminingExtractionStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingLaserFired", "MoonminingLaserFired ":
		value := new(MoonminingLaserFired)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "NPCStandingsGained", "NPCStandingsGained ":
		value := new(NPCStandingsGained)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "NPCStandingsLost", "NPCStandingsLost ":
		value := new(NPCStandingsLost)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OfferedSurrender", "OfferedSurrender ":
		value := new(OfferedSurrender)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OfferedToAlly", "OfferedToAlly ":
		value := new(OfferedToAlly)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OldLscMessages", "OldLscMessages ":
		value := new(OldLscMessages)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OperationFinished", "OperationFinished ":
		value := new(OperationFinished)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OrbitalAttacked", "OrbitalAttacked ":
		value := new(OrbitalAttacked)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OrbitalReinforced", "OrbitalReinforced ":
		value := new(OrbitalReinforced)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OwnershipTransferred", "OwnershipTransferred ":
		value := new(OwnershipTransferred)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ReimbursementMsg", "ReimbursementMsg ":
		value := new(ReimbursementMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ResearchMissionAvailableMsg", "ResearchMissionAvailableMsg ":
		value := new(ResearchMissionAvailableMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "RetractsWar", "RetractsWar ":
		value := new(RetractsWar)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SeasonalChallengeCompleted", "SeasonalChallengeCompleted ":
		value := new(SeasonalChallengeCompleted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovAllClaimAquiredMsg", "SovAllClaimAquiredMsg ":
		value := new(SovAllClaimAquiredMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovAllClaimLostMsg", "SovAllClaimLostMsg ":
		value := new(SovAllClaimLostMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovCommandNodeEventStarted", "SovCommandNodeEventStarted ":
		value := new(SovCommandNodeEventStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStationEnteredFreeport", "SovStationEnteredFreeport ":
		value := new(SovStationEnteredFreeport)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureDestroyed", "SovStructureDestroyed ":
		value := new(SovStructureDestroyed)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureReinforced", "SovStructureReinforced ":
		value := new(SovStructureReinforced)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureSelfDestructCancel", "SovStructureSelfDestructCancel ":
		value := new(SovStructureSelfDestructCancel)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureSelfDestructFinished", "SovStructureSelfDestructFinished ":
		value := new(SovStructureSelfDestructFinished)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureSelfDestructRequested", "SovStructureSelfDestructRequested ":
		value := new(SovStructureSelfDestructRequested)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovereigntyIHDamageMsg", "SovereigntyIHDamageMsg ":
		value := new(SovereigntyIHDamageMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovereigntySBUDamageMsg", "SovereigntySBUDamageMsg ":
		value := new(SovereigntySBUDamageMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovereigntyTCUDamageMsg", "SovereigntyTCUDamageMsg ":
		value := new(SovereigntyTCUDamageMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationServiceDisabled", "StationServiceDisabled ":
		value := new(StationServiceDisabled)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationServiceEnabled", "StationServiceEnabled ":
		value := new(StationServiceEnabled)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureImpendingAbandonmentAssetsAtRisk", "StructureImpendingAbandonmentAssetsAtRisk ":
		value := new(StructureImpendingAbandonmentAssetsAtRisk)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureAnchoring", "StructureAnchoring ":
		value := new(StructureAnchoring)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureDestroyed", "StructureDestroyed ":
		value := new(StructureDestroyed)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureFuelAlert", "StructureFuelAlert ":
		value := new(StructureFuelAlert)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureItemsDelivered", "StructureItemsDelivered ":
		value := new(StructureItemsDelivered)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureLostArmor", "StructureLostArmor ":
		value := new(StructureLostArmor)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureLostShields", "StructureLostShields ":
		value := new(StructureLostShields)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureOnline", "StructureOnline ":
		value := new(StructureOnline)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureServicesOffline", "StructureServicesOffline ":
		value := new(StructureServicesOffline)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureUnanchoring", "StructureUnanchoring ":
		value := new(StructureUnanchoring)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureUnderAttack", "StructureUnderAttack ":
		value := new(StructureUnderAttack)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureWentHighPower", "StructureWentHighPower ":
		value := new(StructureWentHighPower)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureWentLowPower", "StructureWentLowPower ":
		value := new(StructureWentLowPower)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructuresReinforcementChanged", "StructuresReinforcementChanged ":
		value := new(StructuresReinforcementChanged)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "TowerAlertMsg", "TowerAlertMsg ":
		value := new(TowerAlertMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "TowerResourceAlertMsg", "TowerResourceAlertMsg ":
		value := new(TowerResourceAlertMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarAllyOfferDeclinedMsg", "WarAllyOfferDeclinedMsg ":
		value := new(WarAllyOfferDeclinedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarSurrenderDeclinedMsg", "WarSurrenderDeclinedMsg ":
		value := new(WarSurrenderDeclinedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarSurrenderOfferMsg", "WarSurrenderOfferMsg ":
		value := new(WarSurrenderOfferMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarInvalid", "WarInvalid ":
		value := new(WarInvalid)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarRetractedByConcord", "WarRetractedByConcord ":
		value := new(WarRetractedByConcord)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarHQRemovedFromSpace", "WarHQRemovedFromSpace ":
		value := new(WarHQRemovedFromSpace)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MercOfferRetractedMsg", "MercOfferRetractedMsg ":
		value := new(MercOfferRetractedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarDeclared", "WarDeclared ":
		value := new(WarDeclared)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarAdopted", "WarAdopted ":
		value := new(WarAdopted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarInherited", "WarInherited ":
		value := new(WarInherited)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	// Missing implementations

	case "AgentRetiredTrigravian", "AgentRetiredTrigravian ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(AgentRetiredTrigravian)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllAnchoringMsg", "AllAnchoringMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(AllAnchoringMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllStrucInvulnerableMsg", "AllStrucInvulnerableMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(AllStrucInvulnerableMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllStructVulnerableMsg", "AllStructVulnerableMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(AllStructVulnerableMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllianceWarDeclaredV2", "AllianceWarDeclaredV2 ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(AllianceWarDeclaredV2)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BattlePunishFriendlyFire", "BattlePunishFriendlyFire ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(BattlePunishFriendlyFire)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneRevokedMsg1", "CloneRevokedMsg1 ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(CloneRevokedMsg1)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CombatOperationFinished", "CombatOperationFinished ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(CombatOperationFinished)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ContractRegionChangedToPochven", "ContractRegionChangedToPochven ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(ContractRegionChangedToPochven)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpBecameWarEligible", "CorpBecameWarEligible ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(CorpBecameWarEligible)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpNoLongerWarEligible", "CorpNoLongerWarEligible ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(CorpNoLongerWarEligible)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpOfficeExpirationMsg", "CorpOfficeExpirationMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(CorpOfficeExpirationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpStructLostMsg", "CorpStructLostMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(CorpStructLostMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpVoteCEORevokedMsg", "CorpVoteCEORevokedMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(CorpVoteCEORevokedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarDeclaredV2", "CorpWarDeclaredV2 ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(CorpWarDeclaredV2)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "DistrictAttacked", "DistrictAttacked ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(DistrictAttacked)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "DustAppAcceptedMsg", "DustAppAcceptedMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(DustAppAcceptedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ESSMainBankLink", "ESSMainBankLink ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(ESSMainBankLink)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWAllianceKickMsg", "FWAllianceKickMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(FWAllianceKickMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCharKickMsg", "FWCharKickMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(FWCharKickMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCharWarningMsg", "FWCharWarningMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(FWCharWarningMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IHubDestroyedByBillFailure", "IHubDestroyedByBillFailure ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(IHubDestroyedByBillFailure)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IndustryOperationFinished", "IndustryOperationFinished ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(IndustryOperationFinished)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IndustryTeamAuctionWon", "IndustryTeamAuctionWon ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(IndustryTeamAuctionWon)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InfrastructureHubBillAboutToExpire", "InfrastructureHubBillAboutToExpire ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(InfrastructureHubBillAboutToExpire)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InvasionCompletedMsg", "InvasionCompletedMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(InvasionCompletedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InvasionSystemLogin", "InvasionSystemLogin ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(InvasionSystemLogin)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InvasionSystemStart", "InvasionSystemStart ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(InvasionSystemStart)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MissionCanceledTriglavian", "MissionCanceledTriglavian ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(MissionCanceledTriglavian)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MissionTimeoutMsg", "MissionTimeoutMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(MissionTimeoutMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MutualWarExpired", "MutualWarExpired ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(MutualWarExpired)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MutualWarInviteAccepted", "MutualWarInviteAccepted ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(MutualWarInviteAccepted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MutualWarInviteRejected", "MutualWarInviteRejected ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(MutualWarInviteRejected)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MutualWarInviteSent", "MutualWarInviteSent ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(MutualWarInviteSent)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OfferToAllyRetracted", "OfferToAllyRetracted ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(OfferToAllyRetracted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OfficeLeaseCanceledInsufficientStandings", "OfficeLeaseCanceledInsufficientStandings ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(OfficeLeaseCanceledInsufficientStandings)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "RaffleCreated", "RaffleCreated ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(RaffleCreated)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "RaffleExpired", "RaffleExpired ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(RaffleExpired)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "RaffleFinished", "RaffleFinished ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(RaffleFinished)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovCorpBillLateMsg", "SovCorpBillLateMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(SovCorpBillLateMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovCorpClaimFailMsg", "SovCorpClaimFailMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(SovCorpClaimFailMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovDisruptorMsg", "SovDisruptorMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(SovDisruptorMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationAggressionMsg1", "StationAggressionMsg1 ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(StationAggressionMsg1)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationAggressionMsg2", "StationAggressionMsg2 ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(StationAggressionMsg2)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationConquerMsg", "StationConquerMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(StationConquerMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationStateChangeMsg", "StationStateChangeMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(StationStateChangeMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StoryLineMissionAvailableMsg", "StoryLineMissionAvailableMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(StoryLineMissionAvailableMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureCourierContractChanged", "StructureCourierContractChanged ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(StructureCourierContractChanged)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureItemsMovedToSafety", "StructureItemsMovedToSafety ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(StructureItemsMovedToSafety)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructuresJobsCancelled", "StructuresJobsCancelled ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(StructuresJobsCancelled)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructuresJobsPaused", "StructuresJobsPaused ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(StructuresJobsPaused)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "TransactionReversalMsg", "TransactionReversalMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(TransactionReversalMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "TutorialMsg", "TutorialMsg ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(TutorialMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarAllyInherited", "WarAllyInherited ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(WarAllyInherited)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarConcordInvalidates", "WarConcordInvalidates ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(WarConcordInvalidates)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarEndedHqSecurityDrop", "WarEndedHqSecurityDrop ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(WarEndedHqSecurityDrop)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarRetracted", "WarRetracted ":
		spew.Dump(n)
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		value := new(WarRetracted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	}
	return nil, errors.New("not implemented")
}

type AgentRetiredTrigravian interface{}

type AllAnchoringMsg interface{}

type AllStrucInvulnerableMsg interface{}

type AllStructVulnerableMsg interface{}

type AllianceWarDeclaredV2 interface{}

type BattlePunishFriendlyFire interface{}

type CloneRevokedMsg1 interface{}

type CombatOperationFinished interface{}

type ContractRegionChangedToPochven interface{}

type CorpBecameWarEligible interface{}

type CorpNoLongerWarEligible interface{}

type CorpOfficeExpirationMsg interface{}

type CorpStructLostMsg interface{}

type CorpVoteCEORevokedMsg interface{}

type CorpWarDeclaredV2 interface{}

type DistrictAttacked interface{}

type DustAppAcceptedMsg interface{}

type ESSMainBankLink interface{}

type FWAllianceKickMsg interface{}

type FWCharKickMsg interface{}

type FWCharWarningMsg interface{}

type IHubDestroyedByBillFailure interface{}

type IndustryOperationFinished interface{}

type IndustryTeamAuctionWon interface{}

type InfrastructureHubBillAboutToExpire interface{}

type InvasionCompletedMsg interface{}

type InvasionSystemLogin interface{}

type InvasionSystemStart interface{}

type MissionCanceledTriglavian interface{}

type MissionTimeoutMsg interface{}

type MutualWarExpired interface{}

type MutualWarInviteAccepted interface{}

type MutualWarInviteRejected interface{}

type MutualWarInviteSent interface{}

type OfferToAllyRetracted interface{}

type OfficeLeaseCanceledInsufficientStandings interface{}

type RaffleCreated interface{}

type RaffleExpired interface{}

type RaffleFinished interface{}

type SovCorpBillLateMsg interface{}

type SovCorpClaimFailMsg interface{}

type SovDisruptorMsg interface{}

type StationAggressionMsg1 interface{}

type StationAggressionMsg2 interface{}

type StationConquerMsg interface{}

type StationStateChangeMsg interface{}

type StoryLineMissionAvailableMsg interface{}

type StructureCourierContractChanged interface{}

type StructureItemsMovedToSafety interface{}

type StructuresJobsCancelled interface{}

type StructuresJobsPaused interface{}

type TransactionReversalMsg interface{}

type TutorialMsg interface{}

type WarAllyInherited interface{}

type WarConcordInvalidates interface{}

type WarEndedHqSecurityDrop interface{}

type WarRetracted interface{}

func (s *AcceptedAlly) GetTime() time.Time {
	return TimeFromCCPTimestamp(s.Time)
}

func (s *AllyContractCancelled) GetTimeFinished() time.Time {
	return TimeFromCCPTimestamp(s.TimeFinished)
}

func (s *AllyJoinedWarAggressorMsg) GetStartTime() time.Time {
	return TimeFromCCPTimestamp(s.StartTime)
}

func (s *AllyJoinedWarAllyMsg) GetStartTime() time.Time {
	return TimeFromCCPTimestamp(s.StartTime)
}

func (s *AllyJoinedWarDefenderMsg) GetStartTime() time.Time {
	return TimeFromCCPTimestamp(s.StartTime)
}

func (s *CorpFriendlyFireDisableTimerStarted) GetTimeFinished() time.Time {
	return TimeFromCCPTimestamp(s.TimeFinished)
}

func (s *CorpFriendlyFireEnableTimerStarted) GetTimeFinished() time.Time {
	return TimeFromCCPTimestamp(s.TimeFinished)
}

func (s *MoonminingExtractionFinished) GetAutoTime() time.Time {
	return TimeFromCCPTimestamp(s.AutoTime)
}

func (s *MoonminingExtractionStarted) GetAutoTime() time.Time {
	return TimeFromCCPTimestamp(s.AutoTime)
}

func (s *MoonminingExtractionStarted) GetReadyTime() time.Time {
	return TimeFromCCPTimestamp(s.ReadyTime)
}

func (s *OrbitalReinforced) GetReinforceExitTime() time.Time {
	return TimeFromCCPTimestamp(s.ReinforceExitTime)
}

func (s *SovStructureReinforced) GetDecloakTime() time.Time {
	return TimeFromCCPTimestamp(s.DecloakTime)
}

func (s *SovStructureSelfDestructRequested) GetDestructTime() time.Time {
	return TimeFromCCPTimestamp(s.DestructTime)
}

func (s *StructureAnchoring) GetTimeLeft() time.Time {
	return TimeFromCCPTimestamp(s.TimeLeft)
}

func (s *StructureAnchoring) GetVulnerableTime() time.Time {
	return TimeFromCCPTimestamp(s.VulnerableTime)
}

func (s *StructureLostArmor) GetTimeLeft() time.Time {
	return TimeFromCCPTimestamp(s.TimeLeft)
}

func (s *StructureLostArmor) GetTimestamp() time.Time {
	return TimeFromCCPTimestamp(s.Timestamp)
}

func (s *StructureLostArmor) GetVulnerableTime() time.Time {
	return TimeFromCCPTimestamp(s.VulnerableTime)
}

func (s *StructureLostShields) GetTimeLeft() time.Time {
	return TimeFromCCPTimestamp(s.TimeLeft)
}

func (s *StructureLostShields) GetTimestamp() time.Time {
	return TimeFromCCPTimestamp(s.Timestamp)
}

func (s *StructureLostShields) GetVulnerableTime() time.Time {
	return TimeFromCCPTimestamp(s.VulnerableTime)
}

func (s *StructureUnanchoring) GetTimeLeft() time.Time {
	return TimeFromCCPTimestamp(s.TimeLeft)
}

func (s *StructuresReinforcementChanged) GetTimestamp() time.Time {
	return TimeFromCCPTimestamp(s.Timestamp)
}

func (s *WarHQRemovedFromSpace) GetTimeDeclared() time.Time {
	return TimeFromCCPTimestamp(s.TimeDeclared)
}

func (s *WarDeclared) GetTimeStarted() time.Time {
	return TimeFromCCPTimestamp(s.TimeStarted)
}
