// Code generated by github.com/ferocious-space/eveapi/scripts/generator.go ; DO NOT EDIT.
package notification

import (
	"errors"
	"fmt"
	"github.com/davecgh/go-spew/spew"
	"github.com/go-openapi/swag"
	"gopkg.in/yaml.v3"
	"strings"
	"time"

	"github.com/ferocious-space/eveapi/esi/character"
)

func ParseNotification(n *character.GetCharactersCharacterIDNotificationsOKBodyItems0) (interface{}, error) {
	switch strings.TrimSpace(swag.StringValue(n.Type)) {

	case "AcceptedAlly":
		value := new(AcceptedAlly)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AcceptedSurrender":
		value := new(AcceptedSurrender)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllMaintenanceBillMsg":
		value := new(AllMaintenanceBillMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarCorpJoinedAllianceMsg":
		value := new(AllWarCorpJoinedAllianceMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarDeclaredMsg":
		value := new(AllWarDeclaredMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarInvalidatedMsg":
		value := new(AllWarInvalidatedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarRetractedMsg":
		value := new(AllWarRetractedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllWarSurrenderMsg":
		value := new(AllWarSurrenderMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllianceCapitalChanged":
		value := new(AllianceCapitalChanged)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllyContractCancelled":
		value := new(AllyContractCancelled)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllyJoinedWarAggressorMsg":
		value := new(AllyJoinedWarAggressorMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllyJoinedWarAllyMsg":
		value := new(AllyJoinedWarAllyMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllyJoinedWarDefenderMsg":
		value := new(AllyJoinedWarDefenderMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BillOutOfMoneyMsg":
		value := new(BillOutOfMoneyMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BillPaidCorpAllMsg":
		value := new(BillPaidCorpAllMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyClaimMsg":
		value := new(BountyClaimMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyESSShared":
		value := new(BountyESSShared)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyESSTaken":
		value := new(BountyESSTaken)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyPlacedAlliance":
		value := new(BountyPlacedAlliance)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyPlacedChar":
		value := new(BountyPlacedChar)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyPlacedCorp":
		value := new(BountyPlacedCorp)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BountyYourBountyClaimed":
		value := new(BountyYourBountyClaimed)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BuddyConnectContactAdd":
		value := new(BuddyConnectContactAdd)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharAppAcceptMsg":
		value := new(CharAppAcceptMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharAppRejectMsg":
		value := new(CharAppRejectMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharAppWithdrawMsg":
		value := new(CharAppWithdrawMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharLeftCorpMsg":
		value := new(CharLeftCorpMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharMedalMsg":
		value := new(CharMedalMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CharTerminationMsg":
		value := new(CharTerminationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneActivationMsg":
		value := new(CloneActivationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneActivationMsg2":
		value := new(CloneActivationMsg2)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneMovedMsg":
		value := new(CloneMovedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneRevokedMsg2":
		value := new(CloneRevokedMsg2)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ContactAdd":
		value := new(ContactAdd)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ContactEdit":
		value := new(ContactEdit)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ContainerPasswordMsg":
		value := new(ContainerPasswordMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAllBillMsg":
		value := new(CorpAllBillMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppAcceptMsg":
		value := new(CorpAppAcceptMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppInvitedMsg":
		value := new(CorpAppInvitedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppNewMsg":
		value := new(CorpAppNewMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppRejectCustomMsg":
		value := new(CorpAppRejectCustomMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpAppRejectMsg":
		value := new(CorpAppRejectMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpDividendMsg":
		value := new(CorpDividendMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpFriendlyFireDisableTimerCompleted":
		value := new(CorpFriendlyFireDisableTimerCompleted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpFriendlyFireDisableTimerStarted":
		value := new(CorpFriendlyFireDisableTimerStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpFriendlyFireEnableTimerCompleted":
		value := new(CorpFriendlyFireEnableTimerCompleted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpFriendlyFireEnableTimerStarted":
		value := new(CorpFriendlyFireEnableTimerStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpKicked":
		value := new(CorpKicked)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpLiquidationMsg":
		value := new(CorpLiquidationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpNewCEOMsg":
		value := new(CorpNewCEOMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpNewsMsg":
		value := new(CorpNewsMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpTaxChangeMsg":
		value := new(CorpTaxChangeMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpVoteMsg":
		value := new(CorpVoteMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarDeclaredMsg":
		value := new(CorpWarDeclaredMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarFightingLegalMsg":
		value := new(CorpWarFightingLegalMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarInvalidatedMsg":
		value := new(CorpWarInvalidatedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarRetractedMsg":
		value := new(CorpWarRetractedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarSurrenderMsg":
		value := new(CorpWarSurrenderMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CustomsMsg":
		value := new(CustomsMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "DeclareWar":
		value := new(DeclareWar)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "EntosisCaptureStarted":
		value := new(EntosisCaptureStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWAllianceWarningMsg":
		value := new(FWAllianceWarningMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCharRankGainMsg":
		value := new(FWCharRankGainMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCharRankLossMsg":
		value := new(FWCharRankLossMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCorpJoinMsg":
		value := new(FWCorpJoinMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCorpKickMsg":
		value := new(FWCorpKickMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCorpLeaveMsg":
		value := new(FWCorpLeaveMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCorpWarningMsg":
		value := new(FWCorpWarningMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarCorpJoinRequestMsg":
		value := new(FacWarCorpJoinRequestMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarCorpJoinWithdrawMsg":
		value := new(FacWarCorpJoinWithdrawMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarCorpLeaveRequestMsg":
		value := new(FacWarCorpLeaveRequestMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarCorpLeaveWithdrawMsg":
		value := new(FacWarCorpLeaveWithdrawMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarLPDisqualifiedEvent":
		value := new(FacWarLPDisqualifiedEvent)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarLPDisqualifiedKill":
		value := new(FacWarLPDisqualifiedKill)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarLPPayoutEvent":
		value := new(FacWarLPPayoutEvent)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FacWarLPPayoutKill":
		value := new(FacWarLPPayoutKill)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "GameTimeAdded":
		value := new(GameTimeAdded)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "GameTimeReceived":
		value := new(GameTimeReceived)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "GameTimeSent":
		value := new(GameTimeSent)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "GiftReceived":
		value := new(GiftReceived)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IncursionCompletedMsg":
		value := new(IncursionCompletedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IndustryTeamAuctionLost":
		value := new(IndustryTeamAuctionLost)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsuranceExpirationMsg":
		value := new(InsuranceExpirationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsuranceFirstShipMsg":
		value := new(InsuranceFirstShipMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsuranceInvalidatedMsg":
		value := new(InsuranceInvalidatedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsuranceIssuedMsg":
		value := new(InsuranceIssuedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InsurancePayoutMsg":
		value := new(InsurancePayoutMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "JumpCloneDeletedMsg1":
		value := new(JumpCloneDeletedMsg1)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "JumpCloneDeletedMsg2":
		value := new(JumpCloneDeletedMsg2)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillReportFinalBlow":
		value := new(KillReportFinalBlow)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillReportVictim":
		value := new(KillReportVictim)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightAvailable":
		value := new(KillRightAvailable)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightAvailableOpen":
		value := new(KillRightAvailableOpen)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightEarned":
		value := new(KillRightEarned)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightUnavailable":
		value := new(KillRightUnavailable)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightUnavailableOpen":
		value := new(KillRightUnavailableOpen)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "KillRightUsed":
		value := new(KillRightUsed)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "LocateCharMsg":
		value := new(LocateCharMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MadeWarMutual":
		value := new(MadeWarMutual)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MercOfferedNegotiationMsg":
		value := new(MercOfferedNegotiationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MissionOfferExpirationMsg":
		value := new(MissionOfferExpirationMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingAutomaticFracture":
		value := new(MoonminingAutomaticFracture)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingExtractionCancelled":
		value := new(MoonminingExtractionCancelled)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingExtractionFinished":
		value := new(MoonminingExtractionFinished)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingExtractionStarted":
		value := new(MoonminingExtractionStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MoonminingLaserFired":
		value := new(MoonminingLaserFired)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "NPCStandingsGained":
		value := new(NPCStandingsGained)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "NPCStandingsLost":
		value := new(NPCStandingsLost)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OfferedSurrender":
		value := new(OfferedSurrender)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OfferedToAlly":
		value := new(OfferedToAlly)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OldLscMessages":
		value := new(OldLscMessages)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OperationFinished":
		value := new(OperationFinished)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OrbitalAttacked":
		value := new(OrbitalAttacked)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OrbitalReinforced":
		value := new(OrbitalReinforced)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OwnershipTransferred":
		value := new(OwnershipTransferred)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ReimbursementMsg":
		value := new(ReimbursementMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ResearchMissionAvailableMsg":
		value := new(ResearchMissionAvailableMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "RetractsWar":
		value := new(RetractsWar)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SeasonalChallengeCompleted":
		value := new(SeasonalChallengeCompleted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovAllClaimAquiredMsg":
		value := new(SovAllClaimAquiredMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovAllClaimLostMsg":
		value := new(SovAllClaimLostMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovCommandNodeEventStarted":
		value := new(SovCommandNodeEventStarted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStationEnteredFreeport":
		value := new(SovStationEnteredFreeport)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureDestroyed":
		value := new(SovStructureDestroyed)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureReinforced":
		value := new(SovStructureReinforced)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureSelfDestructCancel":
		value := new(SovStructureSelfDestructCancel)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureSelfDestructFinished":
		value := new(SovStructureSelfDestructFinished)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovStructureSelfDestructRequested":
		value := new(SovStructureSelfDestructRequested)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovereigntyIHDamageMsg":
		value := new(SovereigntyIHDamageMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovereigntySBUDamageMsg":
		value := new(SovereigntySBUDamageMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovereigntyTCUDamageMsg":
		value := new(SovereigntyTCUDamageMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationServiceDisabled":
		value := new(StationServiceDisabled)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationServiceEnabled":
		value := new(StationServiceEnabled)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureImpendingAbandonmentAssetsAtRisk":
		value := new(StructureImpendingAbandonmentAssetsAtRisk)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureAnchoring":
		value := new(StructureAnchoring)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureDestroyed":
		value := new(StructureDestroyed)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureFuelAlert":
		value := new(StructureFuelAlert)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureItemsDelivered":
		value := new(StructureItemsDelivered)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureLostArmor":
		value := new(StructureLostArmor)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureLostShields":
		value := new(StructureLostShields)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureOnline":
		value := new(StructureOnline)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureServicesOffline":
		value := new(StructureServicesOffline)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureUnanchoring":
		value := new(StructureUnanchoring)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureUnderAttack":
		value := new(StructureUnderAttack)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureWentHighPower":
		value := new(StructureWentHighPower)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureWentLowPower":
		value := new(StructureWentLowPower)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructuresReinforcementChanged":
		value := new(StructuresReinforcementChanged)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "TowerAlertMsg":
		value := new(TowerAlertMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "TowerResourceAlertMsg":
		value := new(TowerResourceAlertMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarAllyOfferDeclinedMsg":
		value := new(WarAllyOfferDeclinedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarSurrenderDeclinedMsg":
		value := new(WarSurrenderDeclinedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarSurrenderOfferMsg":
		value := new(WarSurrenderOfferMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarInvalid":
		value := new(WarInvalid)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarRetractedByConcord":
		value := new(WarRetractedByConcord)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarHQRemovedFromSpace":
		value := new(WarHQRemovedFromSpace)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MercOfferRetractedMsg":
		value := new(MercOfferRetractedMsg)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarDeclared":
		value := new(WarDeclared)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarAdopted":
		value := new(WarAdopted)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarInherited":
		value := new(WarInherited)
		err := yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	// Missing implementations

	case "AgentRetiredTrigravian":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(AgentRetiredTrigravian)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllAnchoringMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(AllAnchoringMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllStrucInvulnerableMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(AllStrucInvulnerableMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllStructVulnerableMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(AllStructVulnerableMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "AllianceWarDeclaredV2":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(AllianceWarDeclaredV2)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "BattlePunishFriendlyFire":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(BattlePunishFriendlyFire)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CloneRevokedMsg1":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(CloneRevokedMsg1)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CombatOperationFinished":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(CombatOperationFinished)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ContractRegionChangedToPochven":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(ContractRegionChangedToPochven)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpBecameWarEligible":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(CorpBecameWarEligible)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpNoLongerWarEligible":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(CorpNoLongerWarEligible)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpOfficeExpirationMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(CorpOfficeExpirationMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpStructLostMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(CorpStructLostMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpVoteCEORevokedMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(CorpVoteCEORevokedMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "CorpWarDeclaredV2":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(CorpWarDeclaredV2)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "DistrictAttacked":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(DistrictAttacked)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "DustAppAcceptedMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(DustAppAcceptedMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ESSMainBankLink":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(ESSMainBankLink)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ExpertSystemExpired":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(ExpertSystemExpired)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "ExpertSystemExpiryImminent":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(ExpertSystemExpiryImminent)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWAllianceKickMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(FWAllianceKickMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCharKickMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(FWCharKickMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "FWCharWarningMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(FWCharWarningMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IHubDestroyedByBillFailure":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(IHubDestroyedByBillFailure)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IndustryOperationFinished":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(IndustryOperationFinished)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "IndustryTeamAuctionWon":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(IndustryTeamAuctionWon)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InfrastructureHubBillAboutToExpire":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(InfrastructureHubBillAboutToExpire)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InvasionCompletedMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(InvasionCompletedMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InvasionSystemLogin":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(InvasionSystemLogin)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "InvasionSystemStart":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(InvasionSystemStart)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MissionCanceledTriglavian":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(MissionCanceledTriglavian)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MissionTimeoutMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(MissionTimeoutMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MutualWarExpired":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(MutualWarExpired)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MutualWarInviteAccepted":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(MutualWarInviteAccepted)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MutualWarInviteRejected":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(MutualWarInviteRejected)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "MutualWarInviteSent":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(MutualWarInviteSent)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OfferToAllyRetracted":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(OfferToAllyRetracted)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "OfficeLeaseCanceledInsufficientStandings":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(OfficeLeaseCanceledInsufficientStandings)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "RaffleCreated":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(RaffleCreated)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "RaffleExpired":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(RaffleExpired)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "RaffleFinished":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(RaffleFinished)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovCorpBillLateMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(SovCorpBillLateMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovCorpClaimFailMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(SovCorpClaimFailMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "SovDisruptorMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(SovDisruptorMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationAggressionMsg1":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(StationAggressionMsg1)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationAggressionMsg2":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(StationAggressionMsg2)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationConquerMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(StationConquerMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StationStateChangeMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(StationStateChangeMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StoryLineMissionAvailableMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(StoryLineMissionAvailableMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureCourierContractChanged":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(StructureCourierContractChanged)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructureItemsMovedToSafety":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(StructureItemsMovedToSafety)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructuresJobsCancelled":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(StructuresJobsCancelled)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "StructuresJobsPaused":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(StructuresJobsPaused)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "TransactionReversalMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(TransactionReversalMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "TutorialMsg":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(TutorialMsg)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarAllyInherited":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(WarAllyInherited)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarConcordInvalidates":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(WarConcordInvalidates)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarEndedHqSecurityDrop":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(WarEndedHqSecurityDrop)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	case "WarRetracted":
		bytes, _ := yaml.Marshal(n)
		fmt.Println(string(bytes))
		genType, err := NotificationGenerator(*n.Type, n.Text)
		if err != nil {
			return nil, err
		}
		fmt.Println(string(genType))
		value := new(WarRetracted)
		err = yaml.Unmarshal([]byte(n.Text), &value)
		if err != nil {
			spew.Dump(n)
			return nil, err
		}
		return value, nil

	}
	return nil, errors.New("not implemented")
}

type AgentRetiredTrigravian interface{}

type AllAnchoringMsg interface{}

type AllStrucInvulnerableMsg interface{}

type AllStructVulnerableMsg interface{}

type AllianceWarDeclaredV2 interface{}

type BattlePunishFriendlyFire interface{}

type CloneRevokedMsg1 interface{}

type CombatOperationFinished interface{}

type ContractRegionChangedToPochven interface{}

type CorpBecameWarEligible interface{}

type CorpNoLongerWarEligible interface{}

type CorpOfficeExpirationMsg interface{}

type CorpStructLostMsg interface{}

type CorpVoteCEORevokedMsg interface{}

type CorpWarDeclaredV2 interface{}

type DistrictAttacked interface{}

type DustAppAcceptedMsg interface{}

type ESSMainBankLink interface{}

type ExpertSystemExpired interface{}

type ExpertSystemExpiryImminent interface{}

type FWAllianceKickMsg interface{}

type FWCharKickMsg interface{}

type FWCharWarningMsg interface{}

type IHubDestroyedByBillFailure interface{}

type IndustryOperationFinished interface{}

type IndustryTeamAuctionWon interface{}

type InfrastructureHubBillAboutToExpire interface{}

type InvasionCompletedMsg interface{}

type InvasionSystemLogin interface{}

type InvasionSystemStart interface{}

type MissionCanceledTriglavian interface{}

type MissionTimeoutMsg interface{}

type MutualWarExpired interface{}

type MutualWarInviteAccepted interface{}

type MutualWarInviteRejected interface{}

type MutualWarInviteSent interface{}

type OfferToAllyRetracted interface{}

type OfficeLeaseCanceledInsufficientStandings interface{}

type RaffleCreated interface{}

type RaffleExpired interface{}

type RaffleFinished interface{}

type SovCorpBillLateMsg interface{}

type SovCorpClaimFailMsg interface{}

type SovDisruptorMsg interface{}

type StationAggressionMsg1 interface{}

type StationAggressionMsg2 interface{}

type StationConquerMsg interface{}

type StationStateChangeMsg interface{}

type StoryLineMissionAvailableMsg interface{}

type StructureCourierContractChanged interface{}

type StructureItemsMovedToSafety interface{}

type StructuresJobsCancelled interface{}

type StructuresJobsPaused interface{}

type TransactionReversalMsg interface{}

type TutorialMsg interface{}

type WarAllyInherited interface{}

type WarConcordInvalidates interface{}

type WarEndedHqSecurityDrop interface{}

type WarRetracted interface{}

func (s *AcceptedAlly) GetTime() time.Time {
	return TimeFromCCPTimestamp(s.Time)
}

func (s *AllyContractCancelled) GetTimeFinished() time.Time {
	return TimeFromCCPTimestamp(s.TimeFinished)
}

func (s *AllyJoinedWarAggressorMsg) GetStartTime() time.Time {
	return TimeFromCCPTimestamp(s.StartTime)
}

func (s *AllyJoinedWarAllyMsg) GetStartTime() time.Time {
	return TimeFromCCPTimestamp(s.StartTime)
}

func (s *AllyJoinedWarDefenderMsg) GetStartTime() time.Time {
	return TimeFromCCPTimestamp(s.StartTime)
}

func (s *CorpFriendlyFireDisableTimerStarted) GetTimeFinished() time.Time {
	return TimeFromCCPTimestamp(s.TimeFinished)
}

func (s *CorpFriendlyFireEnableTimerStarted) GetTimeFinished() time.Time {
	return TimeFromCCPTimestamp(s.TimeFinished)
}

func (s *MoonminingExtractionFinished) GetAutoTime() time.Time {
	return TimeFromCCPTimestamp(s.AutoTime)
}

func (s *MoonminingExtractionStarted) GetAutoTime() time.Time {
	return TimeFromCCPTimestamp(s.AutoTime)
}

func (s *MoonminingExtractionStarted) GetReadyTime() time.Time {
	return TimeFromCCPTimestamp(s.ReadyTime)
}

func (s *OrbitalReinforced) GetReinforceExitTime() time.Time {
	return TimeFromCCPTimestamp(s.ReinforceExitTime)
}

func (s *SovStructureReinforced) GetDecloakTime() time.Time {
	return TimeFromCCPTimestamp(s.DecloakTime)
}

func (s *SovStructureSelfDestructRequested) GetDestructTime() time.Time {
	return TimeFromCCPTimestamp(s.DestructTime)
}

func (s *StructureAnchoring) GetTimeLeft() time.Time {
	return TimeFromCCPTimestamp(s.TimeLeft)
}

func (s *StructureAnchoring) GetVulnerableTime() time.Time {
	return TimeFromCCPTimestamp(s.VulnerableTime)
}

func (s *StructureLostArmor) GetTimeLeft() time.Time {
	return TimeFromCCPTimestamp(s.TimeLeft)
}

func (s *StructureLostArmor) GetTimestamp() time.Time {
	return TimeFromCCPTimestamp(s.Timestamp)
}

func (s *StructureLostArmor) GetVulnerableTime() time.Time {
	return TimeFromCCPTimestamp(s.VulnerableTime)
}

func (s *StructureLostShields) GetTimeLeft() time.Time {
	return TimeFromCCPTimestamp(s.TimeLeft)
}

func (s *StructureLostShields) GetTimestamp() time.Time {
	return TimeFromCCPTimestamp(s.Timestamp)
}

func (s *StructureLostShields) GetVulnerableTime() time.Time {
	return TimeFromCCPTimestamp(s.VulnerableTime)
}

func (s *StructureUnanchoring) GetTimeLeft() time.Time {
	return TimeFromCCPTimestamp(s.TimeLeft)
}

func (s *StructuresReinforcementChanged) GetTimestamp() time.Time {
	return TimeFromCCPTimestamp(s.Timestamp)
}

func (s *WarHQRemovedFromSpace) GetTimeDeclared() time.Time {
	return TimeFromCCPTimestamp(s.TimeDeclared)
}

func (s *WarDeclared) GetTimeStarted() time.Time {
	return TimeFromCCPTimestamp(s.TimeStarted)
}
