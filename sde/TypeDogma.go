// Code generated by YAML2GO. DO NOT EDIT.

package sde

import (
	yamlv3 "gopkg.in/yaml.v3"
	"os"
)

type TypeDogmaMap map[int32]TypeDogma

func (x *TypeDogmaMap) Load(path string) error {
	f, err := os.Open(path)
	if err != nil {
		return err
	}
	defer f.Close()
	return yamlv3.NewDecoder(f).Decode(x)
}
func (x TypeDogmaMap) Get(ID int32) *TypeDogma {
	if a, ok := x[ID]; ok {
		return &a
	}
	return nil
}

type TypeDogma struct {
	DogmaAttributes []TypeDogmaDogmaAttributes `bson:"dogmaAttributes,omitempty" db:"dogmaAttributes,omitempty" json:"dogmaAttributes,omitempty" yaml:"dogmaAttributes,omitempty"`
	DogmaEffects    []TypeDogmaDogmaEffects    `bson:"dogmaEffects,omitempty" db:"dogmaEffects,omitempty" json:"dogmaEffects,omitempty" yaml:"dogmaEffects,omitempty"`
}
type TypeDogmaDogmaAttributes struct {
	AttributeID *int32   `bson:"attributeID,omitempty" db:"attributeID,omitempty" json:"attributeID,omitempty" yaml:"attributeID,omitempty"`
	Value       *float64 `bson:"value,omitempty" db:"value,omitempty" json:"value,omitempty" yaml:"value,omitempty"`
}
type TypeDogmaDogmaEffects struct {
	EffectID  *int32 `bson:"effectID,omitempty" db:"effectID,omitempty" json:"effectID,omitempty" yaml:"effectID,omitempty"`
	IsDefault *bool  `bson:"isDefault,omitempty" db:"isDefault,omitempty" json:"isDefault,omitempty" yaml:"isDefault,omitempty"`
}
