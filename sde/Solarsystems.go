// Code generated by YAML2GO. DO NOT EDIT.

package sde

type Solarsystem struct {
	Border                     *bool                          `bson:"border,omitempty" json:"border,omitempty" yaml:"border,omitempty"`
	Center                     []float64                      `bson:"center,omitempty" json:"center,omitempty" yaml:"center,omitempty"`
	Corridor                   *bool                          `bson:"corridor,omitempty" json:"corridor,omitempty" yaml:"corridor,omitempty"`
	DisallowedAnchorCategories []int32                        `bson:"disallowedAnchorCategories,omitempty" json:"disallowedAnchorCategories,omitempty" yaml:"disallowedAnchorCategories,omitempty"`
	Fringe                     *bool                          `bson:"fringe,omitempty" json:"fringe,omitempty" yaml:"fringe,omitempty"`
	Hub                        *bool                          `bson:"hub,omitempty" json:"hub,omitempty" yaml:"hub,omitempty"`
	International              *bool                          `bson:"international,omitempty" json:"international,omitempty" yaml:"international,omitempty"`
	Luminosity                 *float64                       `bson:"luminosity,omitempty" json:"luminosity,omitempty" yaml:"luminosity,omitempty"`
	Max                        []float64                      `bson:"max,omitempty" json:"max,omitempty" yaml:"max,omitempty"`
	Min                        []float64                      `bson:"min,omitempty" json:"min,omitempty" yaml:"min,omitempty"`
	Planets                    map[int32]SolarsystemPlanets   `bson:"planets,omitempty" json:"planets,omitempty" yaml:"planets,omitempty"`
	Radius                     *float64                       `bson:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty"`
	Regional                   *bool                          `bson:"regional,omitempty" json:"regional,omitempty" yaml:"regional,omitempty"`
	Security                   *float64                       `bson:"security,omitempty" json:"security,omitempty" yaml:"security,omitempty"`
	SolarSystemID              *int32                         `bson:"solarSystemID,omitempty" json:"solarSystemID,omitempty" storm:"index" yaml:"solarSystemID,omitempty"`
	SolarSystemNameID          *int32                         `bson:"solarSystemNameID,omitempty" json:"solarSystemNameID,omitempty" storm:"index" yaml:"solarSystemNameID,omitempty"`
	Stargates                  map[int32]SolarsystemStargates `bson:"stargates,omitempty" json:"stargates,omitempty" yaml:"stargates,omitempty"`
	Star                       *SolarsystemStar               `bson:"star,omitempty" json:"star,omitempty" yaml:"star,omitempty"`
	SunTypeID                  *int32                         `bson:"sunTypeID,omitempty" json:"sunTypeID,omitempty" storm:"index" yaml:"sunTypeID,omitempty"`
	SecurityClass              *string                        `bson:"securityClass,omitempty" json:"securityClass,omitempty" yaml:"securityClass,omitempty"`
	WormholeClassID            *int32                         `bson:"wormholeClassID,omitempty" json:"wormholeClassID,omitempty" storm:"index" yaml:"wormholeClassID,omitempty"`
	DescriptionID              *int32                         `bson:"descriptionID,omitempty" json:"descriptionID,omitempty" storm:"index" yaml:"descriptionID,omitempty"`
	FactionID                  *int32                         `bson:"factionID,omitempty" json:"factionID,omitempty" storm:"index" yaml:"factionID,omitempty"`
	VisualEffect               *string                        `bson:"visualEffect,omitempty" json:"visualEffect,omitempty" yaml:"visualEffect,omitempty"`
	DisallowedAnchorGroups     []int32                        `bson:"disallowedAnchorGroups,omitempty" json:"disallowedAnchorGroups,omitempty" yaml:"disallowedAnchorGroups,omitempty"`
	SecondarySun               *SolarsystemSecondarySun       `bson:"secondarySun,omitempty" json:"secondarySun,omitempty" yaml:"secondarySun,omitempty"`
}
type SolarsystemPlanets struct {
	CelestialIndex   *int32                                    `bson:"celestialIndex,omitempty" json:"celestialIndex,omitempty" yaml:"celestialIndex,omitempty"`
	PlanetAttributes *SolarsystemPlanetsPlanetAttributes       `bson:"planetAttributes,omitempty" json:"planetAttributes,omitempty" yaml:"planetAttributes,omitempty"`
	Position         []float64                                 `bson:"position,omitempty" json:"position,omitempty" yaml:"position,omitempty"`
	Radius           *int32                                    `bson:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty"`
	Statistics       *SolarsystemPlanetsStatistics             `bson:"statistics,omitempty" json:"statistics,omitempty" yaml:"statistics,omitempty"`
	TypeID           *int32                                    `bson:"typeID,omitempty" json:"typeID,omitempty" storm:"index" yaml:"typeID,omitempty"`
	Moons            map[int32]SolarsystemPlanetsMoons         `bson:"moons,omitempty" json:"moons,omitempty" yaml:"moons,omitempty"`
	NpcStations      map[int32]SolarsystemPlanetsNpcStations   `bson:"npcStations,omitempty" json:"npcStations,omitempty" yaml:"npcStations,omitempty"`
	AsteroidBelts    map[int32]SolarsystemPlanetsAsteroidBelts `bson:"asteroidBelts,omitempty" json:"asteroidBelts,omitempty" yaml:"asteroidBelts,omitempty"`
	PlanetNameID     *int32                                    `bson:"planetNameID,omitempty" json:"planetNameID,omitempty" storm:"index" yaml:"planetNameID,omitempty"`
}
type SolarsystemPlanetsAsteroidBelts struct {
	Position           []float64                                  `bson:"position,omitempty" json:"position,omitempty" yaml:"position,omitempty"`
	Statistics         *SolarsystemPlanetsAsteroidBeltsStatistics `bson:"statistics,omitempty" json:"statistics,omitempty" yaml:"statistics,omitempty"`
	TypeID             *int32                                     `bson:"typeID,omitempty" json:"typeID,omitempty" storm:"index" yaml:"typeID,omitempty"`
	AsteroidBeltNameID *int32                                     `bson:"asteroidBeltNameID,omitempty" json:"asteroidBeltNameID,omitempty" storm:"index" yaml:"asteroidBeltNameID,omitempty"`
}
type SolarsystemPlanetsAsteroidBeltsStatistics struct {
	Density        *float64 `bson:"density,omitempty" json:"density,omitempty" yaml:"density,omitempty"`
	Eccentricity   *float64 `bson:"eccentricity,omitempty" json:"eccentricity,omitempty" yaml:"eccentricity,omitempty"`
	EscapeVelocity *float64 `bson:"escapeVelocity,omitempty" json:"escapeVelocity,omitempty" yaml:"escapeVelocity,omitempty"`
	Fragmented     *bool    `bson:"fragmented,omitempty" json:"fragmented,omitempty" yaml:"fragmented,omitempty"`
	Life           *float64 `bson:"life,omitempty" json:"life,omitempty" yaml:"life,omitempty"`
	Locked         *bool    `bson:"locked,omitempty" json:"locked,omitempty" yaml:"locked,omitempty"`
	MassDust       *float64 `bson:"massDust,omitempty" json:"massDust,omitempty" yaml:"massDust,omitempty"`
	MassGas        *float64 `bson:"massGas,omitempty" json:"massGas,omitempty" yaml:"massGas,omitempty"`
	OrbitPeriod    *float64 `bson:"orbitPeriod,omitempty" json:"orbitPeriod,omitempty" yaml:"orbitPeriod,omitempty"`
	OrbitRadius    *float64 `bson:"orbitRadius,omitempty" json:"orbitRadius,omitempty" yaml:"orbitRadius,omitempty"`
	Pressure       *float64 `bson:"pressure,omitempty" json:"pressure,omitempty" yaml:"pressure,omitempty"`
	Radius         *float64 `bson:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty"`
	RotationRate   *float64 `bson:"rotationRate,omitempty" json:"rotationRate,omitempty" yaml:"rotationRate,omitempty"`
	SpectralClass  *string  `bson:"spectralClass,omitempty" json:"spectralClass,omitempty" yaml:"spectralClass,omitempty"`
	SurfaceGravity *float64 `bson:"surfaceGravity,omitempty" json:"surfaceGravity,omitempty" yaml:"surfaceGravity,omitempty"`
	Temperature    *float64 `bson:"temperature,omitempty" json:"temperature,omitempty" yaml:"temperature,omitempty"`
}
type SolarsystemPlanetsMoons struct {
	PlanetAttributes *SolarsystemPlanetsMoonsPlanetAttributes     `bson:"planetAttributes,omitempty" json:"planetAttributes,omitempty" yaml:"planetAttributes,omitempty"`
	Position         []float64                                    `bson:"position,omitempty" json:"position,omitempty" yaml:"position,omitempty"`
	Radius           *int32                                       `bson:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty"`
	Statistics       *SolarsystemPlanetsMoonsStatistics           `bson:"statistics,omitempty" json:"statistics,omitempty" yaml:"statistics,omitempty"`
	TypeID           *int32                                       `bson:"typeID,omitempty" json:"typeID,omitempty" storm:"index" yaml:"typeID,omitempty"`
	NpcStations      map[int32]SolarsystemPlanetsMoonsNpcStations `bson:"npcStations,omitempty" json:"npcStations,omitempty" yaml:"npcStations,omitempty"`
	MoonNameID       *int32                                       `bson:"moonNameID,omitempty" json:"moonNameID,omitempty" storm:"index" yaml:"moonNameID,omitempty"`
}
type SolarsystemPlanetsMoonsNpcStations struct {
	GraphicID                *int32    `bson:"graphicID,omitempty" json:"graphicID,omitempty" storm:"index" yaml:"graphicID,omitempty"`
	IsConquerable            *bool     `bson:"isConquerable,omitempty" json:"isConquerable,omitempty" yaml:"isConquerable,omitempty"`
	OperationID              *int32    `bson:"operationID,omitempty" json:"operationID,omitempty" storm:"index" yaml:"operationID,omitempty"`
	OwnerID                  *int32    `bson:"ownerID,omitempty" json:"ownerID,omitempty" storm:"index" yaml:"ownerID,omitempty"`
	Position                 []float64 `bson:"position,omitempty" json:"position,omitempty" yaml:"position,omitempty"`
	ReprocessingEfficiency   *float64  `bson:"reprocessingEfficiency,omitempty" json:"reprocessingEfficiency,omitempty" yaml:"reprocessingEfficiency,omitempty"`
	ReprocessingHangarFlag   *int32    `bson:"reprocessingHangarFlag,omitempty" json:"reprocessingHangarFlag,omitempty" yaml:"reprocessingHangarFlag,omitempty"`
	ReprocessingStationsTake *float64  `bson:"reprocessingStationsTake,omitempty" json:"reprocessingStationsTake,omitempty" yaml:"reprocessingStationsTake,omitempty"`
	TypeID                   *int32    `bson:"typeID,omitempty" json:"typeID,omitempty" storm:"index" yaml:"typeID,omitempty"`
	UseOperationName         *bool     `bson:"useOperationName,omitempty" json:"useOperationName,omitempty" yaml:"useOperationName,omitempty"`
}
type SolarsystemPlanetsMoonsPlanetAttributes struct {
	HeightMap1   *int32 `bson:"heightMap1,omitempty" json:"heightMap1,omitempty" yaml:"heightMap1,omitempty"`
	HeightMap2   *int32 `bson:"heightMap2,omitempty" json:"heightMap2,omitempty" yaml:"heightMap2,omitempty"`
	Population   *bool  `bson:"population,omitempty" json:"population,omitempty" yaml:"population,omitempty"`
	ShaderPreset *int32 `bson:"shaderPreset,omitempty" json:"shaderPreset,omitempty" yaml:"shaderPreset,omitempty"`
}
type SolarsystemPlanetsMoonsStatistics struct {
	Density        *float64 `bson:"density,omitempty" json:"density,omitempty" yaml:"density,omitempty"`
	Eccentricity   *float64 `bson:"eccentricity,omitempty" json:"eccentricity,omitempty" yaml:"eccentricity,omitempty"`
	EscapeVelocity *float64 `bson:"escapeVelocity,omitempty" json:"escapeVelocity,omitempty" yaml:"escapeVelocity,omitempty"`
	Fragmented     *bool    `bson:"fragmented,omitempty" json:"fragmented,omitempty" yaml:"fragmented,omitempty"`
	Life           *float64 `bson:"life,omitempty" json:"life,omitempty" yaml:"life,omitempty"`
	Locked         *bool    `bson:"locked,omitempty" json:"locked,omitempty" yaml:"locked,omitempty"`
	MassDust       *float64 `bson:"massDust,omitempty" json:"massDust,omitempty" yaml:"massDust,omitempty"`
	MassGas        *float64 `bson:"massGas,omitempty" json:"massGas,omitempty" yaml:"massGas,omitempty"`
	OrbitPeriod    *float64 `bson:"orbitPeriod,omitempty" json:"orbitPeriod,omitempty" yaml:"orbitPeriod,omitempty"`
	OrbitRadius    *float64 `bson:"orbitRadius,omitempty" json:"orbitRadius,omitempty" yaml:"orbitRadius,omitempty"`
	Pressure       *float64 `bson:"pressure,omitempty" json:"pressure,omitempty" yaml:"pressure,omitempty"`
	Radius         *float64 `bson:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty"`
	RotationRate   *float64 `bson:"rotationRate,omitempty" json:"rotationRate,omitempty" yaml:"rotationRate,omitempty"`
	SpectralClass  *string  `bson:"spectralClass,omitempty" json:"spectralClass,omitempty" yaml:"spectralClass,omitempty"`
	SurfaceGravity *float64 `bson:"surfaceGravity,omitempty" json:"surfaceGravity,omitempty" yaml:"surfaceGravity,omitempty"`
	Temperature    *float64 `bson:"temperature,omitempty" json:"temperature,omitempty" yaml:"temperature,omitempty"`
}
type SolarsystemPlanetsNpcStations struct {
	GraphicID                *int32    `bson:"graphicID,omitempty" json:"graphicID,omitempty" storm:"index" yaml:"graphicID,omitempty"`
	IsConquerable            *bool     `bson:"isConquerable,omitempty" json:"isConquerable,omitempty" yaml:"isConquerable,omitempty"`
	OperationID              *int32    `bson:"operationID,omitempty" json:"operationID,omitempty" storm:"index" yaml:"operationID,omitempty"`
	OwnerID                  *int32    `bson:"ownerID,omitempty" json:"ownerID,omitempty" storm:"index" yaml:"ownerID,omitempty"`
	Position                 []float64 `bson:"position,omitempty" json:"position,omitempty" yaml:"position,omitempty"`
	ReprocessingEfficiency   *float64  `bson:"reprocessingEfficiency,omitempty" json:"reprocessingEfficiency,omitempty" yaml:"reprocessingEfficiency,omitempty"`
	ReprocessingHangarFlag   *int32    `bson:"reprocessingHangarFlag,omitempty" json:"reprocessingHangarFlag,omitempty" yaml:"reprocessingHangarFlag,omitempty"`
	ReprocessingStationsTake *float64  `bson:"reprocessingStationsTake,omitempty" json:"reprocessingStationsTake,omitempty" yaml:"reprocessingStationsTake,omitempty"`
	TypeID                   *int32    `bson:"typeID,omitempty" json:"typeID,omitempty" storm:"index" yaml:"typeID,omitempty"`
	UseOperationName         *bool     `bson:"useOperationName,omitempty" json:"useOperationName,omitempty" yaml:"useOperationName,omitempty"`
}
type SolarsystemPlanetsPlanetAttributes struct {
	HeightMap1   *int32 `bson:"heightMap1,omitempty" json:"heightMap1,omitempty" yaml:"heightMap1,omitempty"`
	HeightMap2   *int32 `bson:"heightMap2,omitempty" json:"heightMap2,omitempty" yaml:"heightMap2,omitempty"`
	Population   *bool  `bson:"population,omitempty" json:"population,omitempty" yaml:"population,omitempty"`
	ShaderPreset *int32 `bson:"shaderPreset,omitempty" json:"shaderPreset,omitempty" yaml:"shaderPreset,omitempty"`
}
type SolarsystemPlanetsStatistics struct {
	Density        *float64 `bson:"density,omitempty" json:"density,omitempty" yaml:"density,omitempty"`
	Eccentricity   *float64 `bson:"eccentricity,omitempty" json:"eccentricity,omitempty" yaml:"eccentricity,omitempty"`
	EscapeVelocity *float64 `bson:"escapeVelocity,omitempty" json:"escapeVelocity,omitempty" yaml:"escapeVelocity,omitempty"`
	Fragmented     *bool    `bson:"fragmented,omitempty" json:"fragmented,omitempty" yaml:"fragmented,omitempty"`
	Life           *float64 `bson:"life,omitempty" json:"life,omitempty" yaml:"life,omitempty"`
	Locked         *bool    `bson:"locked,omitempty" json:"locked,omitempty" yaml:"locked,omitempty"`
	MassDust       *float64 `bson:"massDust,omitempty" json:"massDust,omitempty" yaml:"massDust,omitempty"`
	MassGas        *float64 `bson:"massGas,omitempty" json:"massGas,omitempty" yaml:"massGas,omitempty"`
	OrbitPeriod    *float64 `bson:"orbitPeriod,omitempty" json:"orbitPeriod,omitempty" yaml:"orbitPeriod,omitempty"`
	OrbitRadius    *float64 `bson:"orbitRadius,omitempty" json:"orbitRadius,omitempty" yaml:"orbitRadius,omitempty"`
	Pressure       *float64 `bson:"pressure,omitempty" json:"pressure,omitempty" yaml:"pressure,omitempty"`
	Radius         *float64 `bson:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty"`
	RotationRate   *float64 `bson:"rotationRate,omitempty" json:"rotationRate,omitempty" yaml:"rotationRate,omitempty"`
	SpectralClass  *string  `bson:"spectralClass,omitempty" json:"spectralClass,omitempty" yaml:"spectralClass,omitempty"`
	SurfaceGravity *float64 `bson:"surfaceGravity,omitempty" json:"surfaceGravity,omitempty" yaml:"surfaceGravity,omitempty"`
	Temperature    *float64 `bson:"temperature,omitempty" json:"temperature,omitempty" yaml:"temperature,omitempty"`
}
type SolarsystemSecondarySun struct {
	EffectBeaconTypeID *int32    `bson:"effectBeaconTypeID,omitempty" json:"effectBeaconTypeID,omitempty" storm:"index" yaml:"effectBeaconTypeID,omitempty"`
	ItemID             *int64    `bson:"itemID,omitempty" json:"itemID,omitempty" storm:"index" yaml:"itemID,omitempty"`
	Position           []float64 `bson:"position,omitempty" json:"position,omitempty" yaml:"position,omitempty"`
	TypeID             *int32    `bson:"typeID,omitempty" json:"typeID,omitempty" storm:"index" yaml:"typeID,omitempty"`
}
type SolarsystemStar struct {
	Id         *int32                     `bson:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty"`
	Radius     *int32                     `bson:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty"`
	Statistics *SolarsystemStarStatistics `bson:"statistics,omitempty" json:"statistics,omitempty" yaml:"statistics,omitempty"`
	TypeID     *int32                     `bson:"typeID,omitempty" json:"typeID,omitempty" storm:"index" yaml:"typeID,omitempty"`
}
type SolarsystemStarStatistics struct {
	Age           *float64 `bson:"age,omitempty" json:"age,omitempty" yaml:"age,omitempty"`
	Life          *float64 `bson:"life,omitempty" json:"life,omitempty" yaml:"life,omitempty"`
	Locked        *bool    `bson:"locked,omitempty" json:"locked,omitempty" yaml:"locked,omitempty"`
	Luminosity    *float64 `bson:"luminosity,omitempty" json:"luminosity,omitempty" yaml:"luminosity,omitempty"`
	Radius        *float64 `bson:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty"`
	SpectralClass *string  `bson:"spectralClass,omitempty" json:"spectralClass,omitempty" yaml:"spectralClass,omitempty"`
	Temperature   *float64 `bson:"temperature,omitempty" json:"temperature,omitempty" yaml:"temperature,omitempty"`
}
type SolarsystemStargates struct {
	Destination *int32    `bson:"destination,omitempty" json:"destination,omitempty" yaml:"destination,omitempty"`
	Position    []float64 `bson:"position,omitempty" json:"position,omitempty" yaml:"position,omitempty"`
	TypeID      *int32    `bson:"typeID,omitempty" json:"typeID,omitempty" storm:"index" yaml:"typeID,omitempty"`
}
