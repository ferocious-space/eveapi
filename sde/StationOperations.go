// Code generated by YAML2GO. DO NOT EDIT.

package sde

import (
	yamlv3 "gopkg.in/yaml.v3"
	"os"
)

type StationOperationMap map[int32]StationOperation

func (x *StationOperationMap) Load(path string) error {
	f, err := os.Open(path)
	if err != nil {
		return err
	}
	defer f.Close()
	return yamlv3.NewDecoder(f).Decode(x)
}
func (x StationOperationMap) Get(ID int32) *StationOperation {
	if a, ok := x[ID]; ok {
		return &a
	}
	return nil
}

type StationOperation struct {
	ActivityID          *int32                           `bson:"activityID,omitempty" json:"activityID,omitempty" storm:"index" yaml:"activityID,omitempty"`
	Border              *float64                         `bson:"border,omitempty" json:"border,omitempty" yaml:"border,omitempty"`
	Corridor            *float64                         `bson:"corridor,omitempty" json:"corridor,omitempty" yaml:"corridor,omitempty"`
	DescriptionID       *StationOperationDescriptionID   `bson:"descriptionID,omitempty" json:"descriptionID,omitempty" storm:"index" yaml:"descriptionID,omitempty"`
	Fringe              *float64                         `bson:"fringe,omitempty" json:"fringe,omitempty" yaml:"fringe,omitempty"`
	Hub                 *float64                         `bson:"hub,omitempty" json:"hub,omitempty" yaml:"hub,omitempty"`
	ManufacturingFactor *float64                         `bson:"manufacturingFactor,omitempty" json:"manufacturingFactor,omitempty" yaml:"manufacturingFactor,omitempty"`
	OperationNameID     *StationOperationOperationNameID `bson:"operationNameID,omitempty" json:"operationNameID,omitempty" storm:"index" yaml:"operationNameID,omitempty"`
	Ratio               *float64                         `bson:"ratio,omitempty" json:"ratio,omitempty" yaml:"ratio,omitempty"`
	ResearchFactor      *float64                         `bson:"researchFactor,omitempty" json:"researchFactor,omitempty" yaml:"researchFactor,omitempty"`
	Services            []int32                          `bson:"services,omitempty" json:"services,omitempty" yaml:"services,omitempty"`
	StationTypes        map[int32]int32                  `bson:"stationTypes,omitempty" json:"stationTypes,omitempty" yaml:"stationTypes,omitempty"`
}
type StationOperationDescriptionID struct {
	De *string `bson:"de,omitempty" json:"de,omitempty" yaml:"de,omitempty"`
	En *string `bson:"en,omitempty" json:"en,omitempty" yaml:"en,omitempty"`
	Fr *string `bson:"fr,omitempty" json:"fr,omitempty" yaml:"fr,omitempty"`
	Ja *string `bson:"ja,omitempty" json:"ja,omitempty" yaml:"ja,omitempty"`
	Ko *string `bson:"ko,omitempty" json:"ko,omitempty" yaml:"ko,omitempty"`
	Ru *string `bson:"ru,omitempty" json:"ru,omitempty" yaml:"ru,omitempty"`
	Zh *string `bson:"zh,omitempty" json:"zh,omitempty" yaml:"zh,omitempty"`
}
type StationOperationOperationNameID struct {
	De *string `bson:"de,omitempty" json:"de,omitempty" yaml:"de,omitempty"`
	En *string `bson:"en,omitempty" json:"en,omitempty" yaml:"en,omitempty"`
	Fr *string `bson:"fr,omitempty" json:"fr,omitempty" yaml:"fr,omitempty"`
	Ja *string `bson:"ja,omitempty" json:"ja,omitempty" yaml:"ja,omitempty"`
	Ko *string `bson:"ko,omitempty" json:"ko,omitempty" yaml:"ko,omitempty"`
	Ru *string `bson:"ru,omitempty" json:"ru,omitempty" yaml:"ru,omitempty"`
	Zh *string `bson:"zh,omitempty" json:"zh,omitempty" yaml:"zh,omitempty"`
}
