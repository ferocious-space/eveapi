// Code generated by YAML2GO. DO NOT EDIT.

package sde

import (
	yamlv3 "gopkg.in/yaml.v3"
	"os"
)

type PlanetSchematicMap map[int32]PlanetSchematic

func (x *PlanetSchematicMap) Load(path string) error {
	f, err := os.Open(path)
	if err != nil {
		return err
	}
	defer f.Close()
	return yamlv3.NewDecoder(f).Decode(x)
}
func (x PlanetSchematicMap) Get(ID int32) *PlanetSchematic {
	if a, ok := x[ID]; ok {
		return &a
	}
	return nil
}

type PlanetSchematic struct {
	CycleTime *int64                         `bson:"cycleTime,omitempty" json:"cycleTime,omitempty" yaml:"cycleTime,omitempty"`
	NameID    *PlanetSchematicNameID         `bson:"nameID,omitempty" json:"nameID,omitempty" storm:"index" yaml:"nameID,omitempty"`
	Pins      []int32                        `bson:"pins,omitempty" json:"pins,omitempty" yaml:"pins,omitempty"`
	Types     map[int32]PlanetSchematicTypes `bson:"types,omitempty" json:"types,omitempty" yaml:"types,omitempty"`
}
type PlanetSchematicNameID struct {
	De *string `bson:"de,omitempty" json:"de,omitempty" yaml:"de,omitempty"`
	En *string `bson:"en,omitempty" json:"en,omitempty" yaml:"en,omitempty"`
	Fr *string `bson:"fr,omitempty" json:"fr,omitempty" yaml:"fr,omitempty"`
	Ja *string `bson:"ja,omitempty" json:"ja,omitempty" yaml:"ja,omitempty"`
	Ko *string `bson:"ko,omitempty" json:"ko,omitempty" yaml:"ko,omitempty"`
	Ru *string `bson:"ru,omitempty" json:"ru,omitempty" yaml:"ru,omitempty"`
	Zh *string `bson:"zh,omitempty" json:"zh,omitempty" yaml:"zh,omitempty"`
}
type PlanetSchematicTypes struct {
	IsInput  *bool  `bson:"isInput,omitempty" json:"isInput,omitempty" yaml:"isInput,omitempty"`
	Quantity *int32 `bson:"quantity,omitempty" json:"quantity,omitempty" yaml:"quantity,omitempty"`
}
