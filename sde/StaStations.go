// Code generated by YAML2GO. DO NOT EDIT.

package sde

import (
	yamlv3 "gopkg.in/yaml.v3"
	"os"
)

type StaStationList []StaStation

func (x *StaStationList) Load(path string) error {
	f, err := os.Open(path)
	if err != nil {
		return err
	}
	defer f.Close()
	return yamlv3.NewDecoder(f).Decode(x)
}

type StaStation struct {
	ConstellationID          *int32   `bson:"constellationID,omitempty" db:"constellationID,omitempty" json:"constellationID,omitempty" yaml:"constellationID,omitempty"`
	CorporationID            *int32   `bson:"corporationID,omitempty" db:"corporationID,omitempty" json:"corporationID,omitempty" yaml:"corporationID,omitempty"`
	DockingCostPerVolume     *int32   `bson:"dockingCostPerVolume,omitempty" db:"dockingCostPerVolume,omitempty" json:"dockingCostPerVolume,omitempty" yaml:"dockingCostPerVolume,omitempty"`
	MaxShipVolumeDockable    *int32   `bson:"maxShipVolumeDockable,omitempty" db:"maxShipVolumeDockable,omitempty" json:"maxShipVolumeDockable,omitempty" yaml:"maxShipVolumeDockable,omitempty"`
	OfficeRentalCost         *int32   `bson:"officeRentalCost,omitempty" db:"officeRentalCost,omitempty" json:"officeRentalCost,omitempty" yaml:"officeRentalCost,omitempty"`
	OperationID              *int32   `bson:"operationID,omitempty" db:"operationID,omitempty" json:"operationID,omitempty" yaml:"operationID,omitempty"`
	RegionID                 *int32   `bson:"regionID,omitempty" db:"regionID,omitempty" json:"regionID,omitempty" yaml:"regionID,omitempty"`
	ReprocessingEfficiency   *float64 `bson:"reprocessingEfficiency,omitempty" db:"reprocessingEfficiency,omitempty" json:"reprocessingEfficiency,omitempty" yaml:"reprocessingEfficiency,omitempty"`
	ReprocessingHangarFlag   *int32   `bson:"reprocessingHangarFlag,omitempty" db:"reprocessingHangarFlag,omitempty" json:"reprocessingHangarFlag,omitempty" yaml:"reprocessingHangarFlag,omitempty"`
	ReprocessingStationsTake *float64 `bson:"reprocessingStationsTake,omitempty" db:"reprocessingStationsTake,omitempty" json:"reprocessingStationsTake,omitempty" yaml:"reprocessingStationsTake,omitempty"`
	Security                 *float64 `bson:"security,omitempty" db:"security,omitempty" json:"security,omitempty" yaml:"security,omitempty"`
	SolarSystemID            *int32   `bson:"solarSystemID,omitempty" db:"solarSystemID,omitempty" json:"solarSystemID,omitempty" yaml:"solarSystemID,omitempty"`
	StationID                *int32   `bson:"stationID,omitempty" db:"stationID,omitempty" json:"stationID,omitempty" yaml:"stationID,omitempty"`
	StationName              *string  `bson:"stationName,omitempty" db:"stationName,omitempty" json:"stationName,omitempty" yaml:"stationName,omitempty"`
	StationTypeID            *int32   `bson:"stationTypeID,omitempty" db:"stationTypeID,omitempty" json:"stationTypeID,omitempty" yaml:"stationTypeID,omitempty"`
	X                        *float64 `bson:"x,omitempty" db:"x,omitempty" json:"x,omitempty" yaml:"x,omitempty"`
	Y                        *float64 `bson:"y,omitempty" db:"y,omitempty" json:"y,omitempty" yaml:"y,omitempty"`
	Z                        *float64 `bson:"z,omitempty" db:"z,omitempty" json:"z,omitempty" yaml:"z,omitempty"`
}
