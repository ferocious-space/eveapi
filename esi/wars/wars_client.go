// Code generated by go-swagger; DO NOT EDIT.

package wars

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wars API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wars API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetWars(params *GetWarsParams, opts ...ClientOption) (*GetWarsOK, error)

	GetWarsWarID(params *GetWarsWarIDParams, opts ...ClientOption) (*GetWarsWarIDOK, error)

	GetWarsWarIDKillmails(params *GetWarsWarIDKillmailsParams, opts ...ClientOption) (*GetWarsWarIDKillmailsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetWars lists wars

  Return a list of wars

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetWars(params *GetWarsParams, opts ...ClientOption) (*GetWarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWarsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_wars",
		Method:             "GET",
		PathPattern:        "/v1/wars/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWarsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWarsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_wars: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWarsWarID gets war information

  Return details about a war

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetWarsWarID(params *GetWarsWarIDParams, opts ...ClientOption) (*GetWarsWarIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWarsWarIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_wars_war_id",
		Method:             "GET",
		PathPattern:        "/v1/wars/{war_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWarsWarIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWarsWarIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_wars_war_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWarsWarIDKillmails lists kills for a war

  Return a list of kills related to a war

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetWarsWarIDKillmails(params *GetWarsWarIDKillmailsParams, opts ...ClientOption) (*GetWarsWarIDKillmailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWarsWarIDKillmailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_wars_war_id_killmails",
		Method:             "GET",
		PathPattern:        "/v1/wars/{war_id}/killmails/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWarsWarIDKillmailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWarsWarIDKillmailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_wars_war_id_killmails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
