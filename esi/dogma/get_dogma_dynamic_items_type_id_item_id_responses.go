// Code generated by go-swagger; DO NOT EDIT.

package dogma

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// GetDogmaDynamicItemsTypeIDItemIDReader is a Reader for the GetDogmaDynamicItemsTypeIDItemID structure.
type GetDogmaDynamicItemsTypeIDItemIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDogmaDynamicItemsTypeIDItemIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDogmaDynamicItemsTypeIDItemIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetDogmaDynamicItemsTypeIDItemIDNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetDogmaDynamicItemsTypeIDItemIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDogmaDynamicItemsTypeIDItemIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewGetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDogmaDynamicItemsTypeIDItemIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetDogmaDynamicItemsTypeIDItemIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetDogmaDynamicItemsTypeIDItemIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/] get_dogma_dynamic_items_type_id_item_id", response, response.Code())
	}
}

// NewGetDogmaDynamicItemsTypeIDItemIDOK creates a GetDogmaDynamicItemsTypeIDItemIDOK with default headers values
func NewGetDogmaDynamicItemsTypeIDItemIDOK() *GetDogmaDynamicItemsTypeIDItemIDOK {
	return &GetDogmaDynamicItemsTypeIDItemIDOK{}
}

/*
GetDogmaDynamicItemsTypeIDItemIDOK describes a response with status code 200, with default header values.

Details about a dynamic item
*/
type GetDogmaDynamicItemsTypeIDItemIDOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	Payload *GetDogmaDynamicItemsTypeIDItemIDOKBody
}

// IsSuccess returns true when this get dogma dynamic items type Id item Id o k response has a 2xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get dogma dynamic items type Id item Id o k response has a 3xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dogma dynamic items type Id item Id o k response has a 4xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get dogma dynamic items type Id item Id o k response has a 5xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get dogma dynamic items type Id item Id o k response a status code equal to that given
func (o *GetDogmaDynamicItemsTypeIDItemIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get dogma dynamic items type Id item Id o k response
func (o *GetDogmaDynamicItemsTypeIDItemIDOK) Code() int {
	return 200
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOK) Error() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdOK  %+v", 200, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOK) String() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdOK  %+v", 200, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOK) GetPayload() *GetDogmaDynamicItemsTypeIDItemIDOKBody {
	return o.Payload
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	o.Payload = new(GetDogmaDynamicItemsTypeIDItemIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDogmaDynamicItemsTypeIDItemIDNotModified creates a GetDogmaDynamicItemsTypeIDItemIDNotModified with default headers values
func NewGetDogmaDynamicItemsTypeIDItemIDNotModified() *GetDogmaDynamicItemsTypeIDItemIDNotModified {
	return &GetDogmaDynamicItemsTypeIDItemIDNotModified{}
}

/*
GetDogmaDynamicItemsTypeIDItemIDNotModified describes a response with status code 304, with default header values.

Not modified
*/
type GetDogmaDynamicItemsTypeIDItemIDNotModified struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string
}

// IsSuccess returns true when this get dogma dynamic items type Id item Id not modified response has a 2xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDNotModified) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dogma dynamic items type Id item Id not modified response has a 3xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDNotModified) IsRedirect() bool {
	return true
}

// IsClientError returns true when this get dogma dynamic items type Id item Id not modified response has a 4xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDNotModified) IsClientError() bool {
	return false
}

// IsServerError returns true when this get dogma dynamic items type Id item Id not modified response has a 5xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDNotModified) IsServerError() bool {
	return false
}

// IsCode returns true when this get dogma dynamic items type Id item Id not modified response a status code equal to that given
func (o *GetDogmaDynamicItemsTypeIDItemIDNotModified) IsCode(code int) bool {
	return code == 304
}

// Code gets the status code for the get dogma dynamic items type Id item Id not modified response
func (o *GetDogmaDynamicItemsTypeIDItemIDNotModified) Code() int {
	return 304
}

func (o *GetDogmaDynamicItemsTypeIDItemIDNotModified) Error() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdNotModified ", 304)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDNotModified) String() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdNotModified ", 304)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	return nil
}

// NewGetDogmaDynamicItemsTypeIDItemIDBadRequest creates a GetDogmaDynamicItemsTypeIDItemIDBadRequest with default headers values
func NewGetDogmaDynamicItemsTypeIDItemIDBadRequest() *GetDogmaDynamicItemsTypeIDItemIDBadRequest {
	return &GetDogmaDynamicItemsTypeIDItemIDBadRequest{}
}

/*
GetDogmaDynamicItemsTypeIDItemIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetDogmaDynamicItemsTypeIDItemIDBadRequest struct {
	Payload *models.BadRequest
}

// IsSuccess returns true when this get dogma dynamic items type Id item Id bad request response has a 2xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dogma dynamic items type Id item Id bad request response has a 3xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dogma dynamic items type Id item Id bad request response has a 4xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get dogma dynamic items type Id item Id bad request response has a 5xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get dogma dynamic items type Id item Id bad request response a status code equal to that given
func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get dogma dynamic items type Id item Id bad request response
func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) Code() int {
	return 400
}

func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *GetDogmaDynamicItemsTypeIDItemIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDogmaDynamicItemsTypeIDItemIDNotFound creates a GetDogmaDynamicItemsTypeIDItemIDNotFound with default headers values
func NewGetDogmaDynamicItemsTypeIDItemIDNotFound() *GetDogmaDynamicItemsTypeIDItemIDNotFound {
	return &GetDogmaDynamicItemsTypeIDItemIDNotFound{}
}

/*
GetDogmaDynamicItemsTypeIDItemIDNotFound describes a response with status code 404, with default header values.

Item not found
*/
type GetDogmaDynamicItemsTypeIDItemIDNotFound struct {
	Payload *GetDogmaDynamicItemsTypeIDItemIDNotFoundBody
}

// IsSuccess returns true when this get dogma dynamic items type Id item Id not found response has a 2xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dogma dynamic items type Id item Id not found response has a 3xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dogma dynamic items type Id item Id not found response has a 4xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get dogma dynamic items type Id item Id not found response has a 5xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get dogma dynamic items type Id item Id not found response a status code equal to that given
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get dogma dynamic items type Id item Id not found response
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) Code() int {
	return 404
}

func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdNotFound  %+v", 404, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) String() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdNotFound  %+v", 404, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) GetPayload() *GetDogmaDynamicItemsTypeIDItemIDNotFoundBody {
	return o.Payload
}

func (o *GetDogmaDynamicItemsTypeIDItemIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDogmaDynamicItemsTypeIDItemIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm creates a GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm with default headers values
func NewGetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm() *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm {
	return &GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm{}
}

/*
GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

// IsSuccess returns true when this get dogma dynamic items type Id item Id enhance your calm response has a 2xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dogma dynamic items type Id item Id enhance your calm response has a 3xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dogma dynamic items type Id item Id enhance your calm response has a 4xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) IsClientError() bool {
	return true
}

// IsServerError returns true when this get dogma dynamic items type Id item Id enhance your calm response has a 5xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) IsServerError() bool {
	return false
}

// IsCode returns true when this get dogma dynamic items type Id item Id enhance your calm response a status code equal to that given
func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) IsCode(code int) bool {
	return code == 420
}

// Code gets the status code for the get dogma dynamic items type Id item Id enhance your calm response
func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) Code() int {
	return 420
}

func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) String() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *GetDogmaDynamicItemsTypeIDItemIDEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDogmaDynamicItemsTypeIDItemIDInternalServerError creates a GetDogmaDynamicItemsTypeIDItemIDInternalServerError with default headers values
func NewGetDogmaDynamicItemsTypeIDItemIDInternalServerError() *GetDogmaDynamicItemsTypeIDItemIDInternalServerError {
	return &GetDogmaDynamicItemsTypeIDItemIDInternalServerError{}
}

/*
GetDogmaDynamicItemsTypeIDItemIDInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetDogmaDynamicItemsTypeIDItemIDInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get dogma dynamic items type Id item Id internal server error response has a 2xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dogma dynamic items type Id item Id internal server error response has a 3xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dogma dynamic items type Id item Id internal server error response has a 4xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get dogma dynamic items type Id item Id internal server error response has a 5xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get dogma dynamic items type Id item Id internal server error response a status code equal to that given
func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get dogma dynamic items type Id item Id internal server error response
func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) Code() int {
	return 500
}

func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetDogmaDynamicItemsTypeIDItemIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDogmaDynamicItemsTypeIDItemIDServiceUnavailable creates a GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable with default headers values
func NewGetDogmaDynamicItemsTypeIDItemIDServiceUnavailable() *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable {
	return &GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable{}
}

/*
GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

// IsSuccess returns true when this get dogma dynamic items type Id item Id service unavailable response has a 2xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dogma dynamic items type Id item Id service unavailable response has a 3xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dogma dynamic items type Id item Id service unavailable response has a 4xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get dogma dynamic items type Id item Id service unavailable response has a 5xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get dogma dynamic items type Id item Id service unavailable response a status code equal to that given
func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the get dogma dynamic items type Id item Id service unavailable response
func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) Code() int {
	return 503
}

func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *GetDogmaDynamicItemsTypeIDItemIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDogmaDynamicItemsTypeIDItemIDGatewayTimeout creates a GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout with default headers values
func NewGetDogmaDynamicItemsTypeIDItemIDGatewayTimeout() *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout {
	return &GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout{}
}

/*
GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

// IsSuccess returns true when this get dogma dynamic items type Id item Id gateway timeout response has a 2xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dogma dynamic items type Id item Id gateway timeout response has a 3xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dogma dynamic items type Id item Id gateway timeout response has a 4xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get dogma dynamic items type Id item Id gateway timeout response has a 5xx status code
func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get dogma dynamic items type Id item Id gateway timeout response a status code equal to that given
func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the get dogma dynamic items type Id item Id gateway timeout response
func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) Code() int {
	return 504
}

func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /v1/dogma/dynamic/items/{type_id}/{item_id}/][%d] getDogmaDynamicItemsTypeIdItemIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *GetDogmaDynamicItemsTypeIDItemIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDogmaDynamicItemsTypeIDItemIDNotFoundBody get_dogma_dynamic_items_type_id_item_id_not_found
//
// Not found
swagger:model GetDogmaDynamicItemsTypeIDItemIDNotFoundBody
*/
type GetDogmaDynamicItemsTypeIDItemIDNotFoundBody struct {

	// get_dogma_dynamic_items_type_id_item_id_404_not_found
	//
	// Not found message
	Error string `json:"error,omitempty"`
}

// Validate validates this get dogma dynamic items type ID item ID not found body
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get dogma dynamic items type ID item ID not found body based on context it is used
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDogmaDynamicItemsTypeIDItemIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetDogmaDynamicItemsTypeIDItemIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDogmaDynamicItemsTypeIDItemIDOKBody get_dogma_dynamic_items_type_id_item_id_ok
//
// 200 ok object
swagger:model GetDogmaDynamicItemsTypeIDItemIDOKBody
*/
type GetDogmaDynamicItemsTypeIDItemIDOKBody struct {

	// get_dogma_dynamic_items_type_id_item_id_created_by
	//
	// The ID of the character who created the item
	// Required: true
	CreatedBy *int32 `json:"created_by"`

	// get_dogma_dynamic_items_type_id_item_id_dogma_attributes
	//
	// dogma_attributes array
	// Required: true
	// Max Items: 1000
	DogmaAttributes []*GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0 `json:"dogma_attributes"`

	// get_dogma_dynamic_items_type_id_item_id_dogma_effects
	//
	// dogma_effects array
	// Required: true
	// Max Items: 1000
	DogmaEffects []*GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0 `json:"dogma_effects"`

	// get_dogma_dynamic_items_type_id_item_id_mutator_type_id
	//
	// The type ID of the mutator used to generate the dynamic item.
	// Required: true
	MutatorTypeID *int32 `json:"mutator_type_id"`

	// get_dogma_dynamic_items_type_id_item_id_source_type_id
	//
	// The type ID of the source item the mutator was applied to create the dynamic item.
	// Required: true
	SourceTypeID *int32 `json:"source_type_id"`
}

// Validate validates this get dogma dynamic items type ID item ID o k body
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDogmaAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDogmaEffects(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMutatorTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("getDogmaDynamicItemsTypeIdItemIdOK"+"."+"created_by", "body", o.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateDogmaAttributes(formats strfmt.Registry) error {

	if err := validate.Required("getDogmaDynamicItemsTypeIdItemIdOK"+"."+"dogma_attributes", "body", o.DogmaAttributes); err != nil {
		return err
	}

	iDogmaAttributesSize := int64(len(o.DogmaAttributes))

	if err := validate.MaxItems("getDogmaDynamicItemsTypeIdItemIdOK"+"."+"dogma_attributes", "body", iDogmaAttributesSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(o.DogmaAttributes); i++ {
		if swag.IsZero(o.DogmaAttributes[i]) { // not required
			continue
		}

		if o.DogmaAttributes[i] != nil {
			if err := o.DogmaAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDogmaDynamicItemsTypeIdItemIdOK" + "." + "dogma_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDogmaDynamicItemsTypeIdItemIdOK" + "." + "dogma_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateDogmaEffects(formats strfmt.Registry) error {

	if err := validate.Required("getDogmaDynamicItemsTypeIdItemIdOK"+"."+"dogma_effects", "body", o.DogmaEffects); err != nil {
		return err
	}

	iDogmaEffectsSize := int64(len(o.DogmaEffects))

	if err := validate.MaxItems("getDogmaDynamicItemsTypeIdItemIdOK"+"."+"dogma_effects", "body", iDogmaEffectsSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(o.DogmaEffects); i++ {
		if swag.IsZero(o.DogmaEffects[i]) { // not required
			continue
		}

		if o.DogmaEffects[i] != nil {
			if err := o.DogmaEffects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDogmaDynamicItemsTypeIdItemIdOK" + "." + "dogma_effects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDogmaDynamicItemsTypeIdItemIdOK" + "." + "dogma_effects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateMutatorTypeID(formats strfmt.Registry) error {

	if err := validate.Required("getDogmaDynamicItemsTypeIdItemIdOK"+"."+"mutator_type_id", "body", o.MutatorTypeID); err != nil {
		return err
	}

	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateSourceTypeID(formats strfmt.Registry) error {

	if err := validate.Required("getDogmaDynamicItemsTypeIdItemIdOK"+"."+"source_type_id", "body", o.SourceTypeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get dogma dynamic items type ID item ID o k body based on the context it is used
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDogmaAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDogmaEffects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) contextValidateDogmaAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DogmaAttributes); i++ {

		if o.DogmaAttributes[i] != nil {

			if swag.IsZero(o.DogmaAttributes[i]) { // not required
				return nil
			}

			if err := o.DogmaAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDogmaDynamicItemsTypeIdItemIdOK" + "." + "dogma_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDogmaDynamicItemsTypeIdItemIdOK" + "." + "dogma_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) contextValidateDogmaEffects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DogmaEffects); i++ {

		if o.DogmaEffects[i] != nil {

			if swag.IsZero(o.DogmaEffects[i]) { // not required
				return nil
			}

			if err := o.DogmaEffects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDogmaDynamicItemsTypeIdItemIdOK" + "." + "dogma_effects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDogmaDynamicItemsTypeIdItemIdOK" + "." + "dogma_effects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetDogmaDynamicItemsTypeIDItemIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0 get_dogma_dynamic_items_type_id_item_id_dogma_attribute
//
// dogma_attribute object
swagger:model GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0
*/
type GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0 struct {

	// get_dogma_dynamic_items_type_id_item_id_attribute_id
	//
	// attribute_id integer
	// Required: true
	AttributeID *int32 `json:"attribute_id"`

	// get_dogma_dynamic_items_type_id_item_id_value
	//
	// value number
	// Required: true
	Value *float32 `json:"value"`
}

// Validate validates this get dogma dynamic items type ID item ID o k body dogma attributes items0
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributeID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0) validateAttributeID(formats strfmt.Registry) error {

	if err := validate.Required("attribute_id", "body", o.AttributeID); err != nil {
		return err
	}

	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get dogma dynamic items type ID item ID o k body dogma attributes items0 based on context it is used
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0) UnmarshalBinary(b []byte) error {
	var res GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0 get_dogma_dynamic_items_type_id_item_id_dogma_effect
//
// dogma_effect object
swagger:model GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0
*/
type GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0 struct {

	// get_dogma_dynamic_items_type_id_item_id_effect_id
	//
	// effect_id integer
	// Required: true
	EffectID *int32 `json:"effect_id"`

	// get_dogma_dynamic_items_type_id_item_id_is_default
	//
	// is_default boolean
	// Required: true
	IsDefault *bool `json:"is_default"`
}

// Validate validates this get dogma dynamic items type ID item ID o k body dogma effects items0
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEffectID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIsDefault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0) validateEffectID(formats strfmt.Registry) error {

	if err := validate.Required("effect_id", "body", o.EffectID); err != nil {
		return err
	}

	return nil
}

func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0) validateIsDefault(formats strfmt.Registry) error {

	if err := validate.Required("is_default", "body", o.IsDefault); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get dogma dynamic items type ID item ID o k body dogma effects items0 based on context it is used
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0) UnmarshalBinary(b []byte) error {
	var res GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
