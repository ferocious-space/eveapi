// Code generated by go-swagger; DO NOT EDIT.

package meta

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new meta API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for meta API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetHeaders(params *GetHeadersParams, opts ...ClientOption) (*GetHeadersOK, error)

	GetPing(params *GetPingParams, opts ...ClientOption) (*GetPingOK, error)

	GetStatusMixin0(params *GetStatusMixin0Params, opts ...ClientOption) (*GetStatusMixin0OK, error)

	GetVerify(params *GetVerifyParams, opts ...ClientOption) (*GetVerifyOK, error)

	GetVersions(params *GetVersionsParams, opts ...ClientOption) (*GetVersionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetHeaders debugs request headers

  Echo the request headers for debugging purposes. Note that the 'Connection' header and any 'X-' headers are not included
*/
func (a *Client) GetHeaders(params *GetHeadersParams, opts ...ClientOption) (*GetHeadersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHeadersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_headers",
		Method:             "GET",
		PathPattern:        "/headers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHeadersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHeadersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_headers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPing pings route

  Ping the ESI routers
*/
func (a *Client) GetPing(params *GetPingParams, opts ...ClientOption) (*GetPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_ping",
		Method:             "GET",
		PathPattern:        "/ping",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_ping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStatusMixin0 es s i health status

  Provides a general health indicator per route and method
*/
func (a *Client) GetStatusMixin0(params *GetStatusMixin0Params, opts ...ClientOption) (*GetStatusMixin0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusMixin0Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_statusMixin0",
		Method:             "GET",
		PathPattern:        "/status.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatusMixin0Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatusMixin0OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_statusMixin0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVerify verifies access token

  Verify authorization tokens in ESI's auth cache
*/
func (a *Client) GetVerify(params *GetVerifyParams, opts ...ClientOption) (*GetVerifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVerifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_verify",
		Method:             "GET",
		PathPattern:        "/verify/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVerifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVerifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_verify: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVersions lists versions

  List all endpoint versions
*/
func (a *Client) GetVersions(params *GetVersionsParams, opts ...ClientOption) (*GetVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_versions",
		Method:             "GET",
		PathPattern:        "/versions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
