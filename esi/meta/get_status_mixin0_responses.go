// Code generated by go-swagger; DO NOT EDIT.

package meta

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetStatusMixin0Reader is a Reader for the GetStatusMixin0 structure.
type GetStatusMixin0Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStatusMixin0Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStatusMixin0OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetStatusMixin0NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetStatusMixin0OK creates a GetStatusMixin0OK with default headers values
func NewGetStatusMixin0OK() *GetStatusMixin0OK {
	return &GetStatusMixin0OK{}
}

/* GetStatusMixin0OK describes a response with status code 200, with default header values.

ESI Status
*/
type GetStatusMixin0OK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	Payload []*GetStatusMixin0OKBodyItems0
}

func (o *GetStatusMixin0OK) Error() string {
	return fmt.Sprintf("[GET /status.json][%d] getStatusMixin0OK  %+v", 200, o.Payload)
}
func (o *GetStatusMixin0OK) GetPayload() []*GetStatusMixin0OKBodyItems0 {
	return o.Payload
}

func (o *GetStatusMixin0OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStatusMixin0NotFound creates a GetStatusMixin0NotFound with default headers values
func NewGetStatusMixin0NotFound() *GetStatusMixin0NotFound {
	return &GetStatusMixin0NotFound{}
}

/* GetStatusMixin0NotFound describes a response with status code 404, with default header values.

Unsupported version
*/
type GetStatusMixin0NotFound struct {
	Payload *GetStatusMixin0NotFoundBody
}

func (o *GetStatusMixin0NotFound) Error() string {
	return fmt.Sprintf("[GET /status.json][%d] getStatusMixin0NotFound  %+v", 404, o.Payload)
}
func (o *GetStatusMixin0NotFound) GetPayload() *GetStatusMixin0NotFoundBody {
	return o.Payload
}

func (o *GetStatusMixin0NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetStatusMixin0NotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetStatusMixin0NotFoundBody get_status_not_found
//
// Unsupported version
swagger:model GetStatusMixin0NotFoundBody
*/
type GetStatusMixin0NotFoundBody struct {

	// get_status_not_found_error
	//
	// Unsupported version
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this get status mixin0 not found body
func (o *GetStatusMixin0NotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStatusMixin0NotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getStatusMixin0NotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get status mixin0 not found body based on context it is used
func (o *GetStatusMixin0NotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetStatusMixin0NotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStatusMixin0NotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetStatusMixin0NotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetStatusMixin0OKBodyItems0 get_status_item
//
// Per route status
swagger:model GetStatusMixin0OKBodyItems0
*/
type GetStatusMixin0OKBodyItems0 struct {

	// get_status_endpoint
	//
	// ESI Endpoint cluster advertising this route
	// Required: true
	Endpoint *string `json:"endpoint"`

	// get_status_method
	//
	// Swagger defined method
	// Required: true
	Method *string `json:"method"`

	// get_status_route
	//
	// Swagger defined route, not including version prefix
	// Required: true
	Route *string `json:"route"`

	// get_status_status
	//
	// Vague route status. Green is good, yellow is degraded, meaning slow or potentially dropping requests. Red means most requests are not succeeding and/or are very slow (5s+) on average.
	// Required: true
	// Enum: [green yellow red]
	Status *string `json:"status"`

	// get_status_tags
	//
	// Swagger tags applicable to this route
	// Required: true
	Tags []string `json:"tags"`
}

// Validate validates this get status mixin0 o k body items0
func (o *GetStatusMixin0OKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoute(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStatusMixin0OKBodyItems0) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", o.Endpoint); err != nil {
		return err
	}

	return nil
}

func (o *GetStatusMixin0OKBodyItems0) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", o.Method); err != nil {
		return err
	}

	return nil
}

func (o *GetStatusMixin0OKBodyItems0) validateRoute(formats strfmt.Registry) error {

	if err := validate.Required("route", "body", o.Route); err != nil {
		return err
	}

	return nil
}

var getStatusMixin0OKBodyItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["green","yellow","red"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getStatusMixin0OKBodyItems0TypeStatusPropEnum = append(getStatusMixin0OKBodyItems0TypeStatusPropEnum, v)
	}
}

const (

	// GetStatusMixin0OKBodyItems0StatusGreen captures enum value "green"
	GetStatusMixin0OKBodyItems0StatusGreen string = "green"

	// GetStatusMixin0OKBodyItems0StatusYellow captures enum value "yellow"
	GetStatusMixin0OKBodyItems0StatusYellow string = "yellow"

	// GetStatusMixin0OKBodyItems0StatusRed captures enum value "red"
	GetStatusMixin0OKBodyItems0StatusRed string = "red"
)

// prop value enum
func (o *GetStatusMixin0OKBodyItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getStatusMixin0OKBodyItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetStatusMixin0OKBodyItems0) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *GetStatusMixin0OKBodyItems0) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", o.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get status mixin0 o k body items0 based on context it is used
func (o *GetStatusMixin0OKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetStatusMixin0OKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStatusMixin0OKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetStatusMixin0OKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
