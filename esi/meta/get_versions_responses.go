// Code generated by go-swagger; DO NOT EDIT.

package meta

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetVersionsReader is a Reader for the GetVersions structure.
type GetVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /versions/] get_versions", response, response.Code())
	}
}

// NewGetVersionsOK creates a GetVersionsOK with default headers values
func NewGetVersionsOK() *GetVersionsOK {
	return &GetVersionsOK{}
}

/*
GetVersionsOK describes a response with status code 200, with default header values.

Version list
*/
type GetVersionsOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	Payload []string
}

// IsSuccess returns true when this get versions o k response has a 2xx status code
func (o *GetVersionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get versions o k response has a 3xx status code
func (o *GetVersionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions o k response has a 4xx status code
func (o *GetVersionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get versions o k response has a 5xx status code
func (o *GetVersionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions o k response a status code equal to that given
func (o *GetVersionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get versions o k response
func (o *GetVersionsOK) Code() int {
	return 200
}

func (o *GetVersionsOK) Error() string {
	return fmt.Sprintf("[GET /versions/][%d] getVersionsOK  %+v", 200, o.Payload)
}

func (o *GetVersionsOK) String() string {
	return fmt.Sprintf("[GET /versions/][%d] getVersionsOK  %+v", 200, o.Payload)
}

func (o *GetVersionsOK) GetPayload() []string {
	return o.Payload
}

func (o *GetVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
