// Code generated by go-swagger; DO NOT EDIT.

package meta

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetVerifyParams creates a new GetVerifyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVerifyParams() *GetVerifyParams {
	return &GetVerifyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVerifyParamsWithTimeout creates a new GetVerifyParams object
// with the ability to set a timeout on a request.
func NewGetVerifyParamsWithTimeout(timeout time.Duration) *GetVerifyParams {
	return &GetVerifyParams{
		timeout: timeout,
	}
}

// NewGetVerifyParamsWithContext creates a new GetVerifyParams object
// with the ability to set a context for a request.
func NewGetVerifyParamsWithContext(ctx context.Context) *GetVerifyParams {
	return &GetVerifyParams{
		Context: ctx,
	}
}

// NewGetVerifyParamsWithHTTPClient creates a new GetVerifyParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVerifyParamsWithHTTPClient(client *http.Client) *GetVerifyParams {
	return &GetVerifyParams{
		HTTPClient: client,
	}
}

/*
GetVerifyParams contains all the parameters to send to the API endpoint

	for the get verify operation.

	Typically these are written to a http.Request.
*/
type GetVerifyParams struct {

	/* Authorization.

	   Access token, in the format of "Bearer <access token>"
	*/
	Authorization *string

	/* XUserAgent.

	   Client identifier, takes precedence over User-Agent
	*/
	XUserAgent *string

	/* Datasource.

	   The server name you would like data from

	   Default: "tranquility"
	*/
	Datasource *string

	/* Token.

	   Access token to use if unable to set a header
	*/
	Token *string

	/* UserAgent.

	   Client identifier, takes precedence over headers
	*/
	UserAgent *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get verify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVerifyParams) WithDefaults() *GetVerifyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get verify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVerifyParams) SetDefaults() {
	var (
		datasourceDefault = string("tranquility")
	)

	val := GetVerifyParams{
		Datasource: &datasourceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get verify params
func (o *GetVerifyParams) WithTimeout(timeout time.Duration) *GetVerifyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get verify params
func (o *GetVerifyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get verify params
func (o *GetVerifyParams) WithContext(ctx context.Context) *GetVerifyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get verify params
func (o *GetVerifyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get verify params
func (o *GetVerifyParams) WithHTTPClient(client *http.Client) *GetVerifyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get verify params
func (o *GetVerifyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get verify params
func (o *GetVerifyParams) WithAuthorization(authorization *string) *GetVerifyParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get verify params
func (o *GetVerifyParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithXUserAgent adds the xUserAgent to the get verify params
func (o *GetVerifyParams) WithXUserAgent(xUserAgent *string) *GetVerifyParams {
	o.SetXUserAgent(xUserAgent)
	return o
}

// SetXUserAgent adds the xUserAgent to the get verify params
func (o *GetVerifyParams) SetXUserAgent(xUserAgent *string) {
	o.XUserAgent = xUserAgent
}

// WithDatasource adds the datasource to the get verify params
func (o *GetVerifyParams) WithDatasource(datasource *string) *GetVerifyParams {
	o.SetDatasource(datasource)
	return o
}

// SetDatasource adds the datasource to the get verify params
func (o *GetVerifyParams) SetDatasource(datasource *string) {
	o.Datasource = datasource
}

// WithToken adds the token to the get verify params
func (o *GetVerifyParams) WithToken(token *string) *GetVerifyParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get verify params
func (o *GetVerifyParams) SetToken(token *string) {
	o.Token = token
}

// WithUserAgent adds the userAgent to the get verify params
func (o *GetVerifyParams) WithUserAgent(userAgent *string) *GetVerifyParams {
	o.SetUserAgent(userAgent)
	return o
}

// SetUserAgent adds the userAgent to the get verify params
func (o *GetVerifyParams) SetUserAgent(userAgent *string) {
	o.UserAgent = userAgent
}

// WriteToRequest writes these params to a swagger request
func (o *GetVerifyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}
	}

	if o.XUserAgent != nil {

		// header param X-User-Agent
		if err := r.SetHeaderParam("X-User-Agent", *o.XUserAgent); err != nil {
			return err
		}
	}

	if o.Datasource != nil {

		// query param datasource
		var qrDatasource string

		if o.Datasource != nil {
			qrDatasource = *o.Datasource
		}
		qDatasource := qrDatasource
		if qDatasource != "" {

			if err := r.SetQueryParam("datasource", qDatasource); err != nil {
				return err
			}
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if o.UserAgent != nil {

		// query param user_agent
		var qrUserAgent string

		if o.UserAgent != nil {
			qrUserAgent = *o.UserAgent
		}
		qUserAgent := qrUserAgent
		if qUserAgent != "" {

			if err := r.SetQueryParam("user_agent", qUserAgent); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
