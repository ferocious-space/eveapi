/*
 *    Copyright 2021 FerociousBite and Contributors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// Code generated by go-swagger; DO NOT EDIT.

package mail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mail API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mail API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCharactersCharacterIDMailLabelsLabelID(params *DeleteCharactersCharacterIDMailLabelsLabelIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCharactersCharacterIDMailLabelsLabelIDNoContent, error)

	DeleteCharactersCharacterIDMailMailID(params *DeleteCharactersCharacterIDMailMailIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCharactersCharacterIDMailMailIDNoContent, error)

	GetCharactersCharacterIDMail(params *GetCharactersCharacterIDMailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDMailOK, error)

	GetCharactersCharacterIDMailLabels(params *GetCharactersCharacterIDMailLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDMailLabelsOK, error)

	GetCharactersCharacterIDMailLists(params *GetCharactersCharacterIDMailListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDMailListsOK, error)

	GetCharactersCharacterIDMailMailID(params *GetCharactersCharacterIDMailMailIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDMailMailIDOK, error)

	PostCharactersCharacterIDMail(params *PostCharactersCharacterIDMailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCharactersCharacterIDMailCreated, error)

	PostCharactersCharacterIDMailLabels(params *PostCharactersCharacterIDMailLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCharactersCharacterIDMailLabelsCreated, error)

	PutCharactersCharacterIDMailMailID(params *PutCharactersCharacterIDMailMailIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutCharactersCharacterIDMailMailIDNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteCharactersCharacterIDMailLabelsLabelID deletes a mail label

  Delete a mail label

---

*/
func (a *Client) DeleteCharactersCharacterIDMailLabelsLabelID(params *DeleteCharactersCharacterIDMailLabelsLabelIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCharactersCharacterIDMailLabelsLabelIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCharactersCharacterIDMailLabelsLabelIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_characters_character_id_mail_labels_label_id",
		Method:             "DELETE",
		PathPattern:        "/v1/characters/{character_id}/mail/labels/{label_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCharactersCharacterIDMailLabelsLabelIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCharactersCharacterIDMailLabelsLabelIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_characters_character_id_mail_labels_label_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCharactersCharacterIDMailMailID deletes a mail

  Delete a mail

---

*/
func (a *Client) DeleteCharactersCharacterIDMailMailID(params *DeleteCharactersCharacterIDMailMailIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCharactersCharacterIDMailMailIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCharactersCharacterIDMailMailIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_characters_character_id_mail_mail_id",
		Method:             "DELETE",
		PathPattern:        "/v1/characters/{character_id}/mail/{mail_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCharactersCharacterIDMailMailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCharactersCharacterIDMailMailIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_characters_character_id_mail_mail_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCharactersCharacterIDMail returns mail headers

  Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards

---

This route is cached for up to 30 seconds
*/
func (a *Client) GetCharactersCharacterIDMail(params *GetCharactersCharacterIDMailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDMailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDMailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_mail",
		Method:             "GET",
		PathPattern:        "/v1/characters/{character_id}/mail/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDMailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDMailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_mail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCharactersCharacterIDMailLabels gets mail labels and unread counts

  Return a list of the users mail labels, unread counts for each label and a total unread count.

---

This route is cached for up to 30 seconds
*/
func (a *Client) GetCharactersCharacterIDMailLabels(params *GetCharactersCharacterIDMailLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDMailLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDMailLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_mail_labels",
		Method:             "GET",
		PathPattern:        "/v3/characters/{character_id}/mail/labels/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDMailLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDMailLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_mail_labels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCharactersCharacterIDMailLists returns mailing list subscriptions

  Return all mailing lists that the character is subscribed to

---

This route is cached for up to 120 seconds
*/
func (a *Client) GetCharactersCharacterIDMailLists(params *GetCharactersCharacterIDMailListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDMailListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDMailListsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_mail_lists",
		Method:             "GET",
		PathPattern:        "/v1/characters/{character_id}/mail/lists/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDMailListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDMailListsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_mail_lists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCharactersCharacterIDMailMailID returns a mail

  Return the contents of an EVE mail

---

This route is cached for up to 30 seconds
*/
func (a *Client) GetCharactersCharacterIDMailMailID(params *GetCharactersCharacterIDMailMailIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDMailMailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDMailMailIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_mail_mail_id",
		Method:             "GET",
		PathPattern:        "/v1/characters/{character_id}/mail/{mail_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDMailMailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDMailMailIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_mail_mail_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostCharactersCharacterIDMail sends a new mail

  Create and send a new mail

---

*/
func (a *Client) PostCharactersCharacterIDMail(params *PostCharactersCharacterIDMailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCharactersCharacterIDMailCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCharactersCharacterIDMailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_characters_character_id_mail",
		Method:             "POST",
		PathPattern:        "/v1/characters/{character_id}/mail/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCharactersCharacterIDMailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCharactersCharacterIDMailCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_characters_character_id_mail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostCharactersCharacterIDMailLabels creates a mail label

  Create a mail label

---

*/
func (a *Client) PostCharactersCharacterIDMailLabels(params *PostCharactersCharacterIDMailLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCharactersCharacterIDMailLabelsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCharactersCharacterIDMailLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_characters_character_id_mail_labels",
		Method:             "POST",
		PathPattern:        "/v2/characters/{character_id}/mail/labels/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCharactersCharacterIDMailLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCharactersCharacterIDMailLabelsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_characters_character_id_mail_labels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutCharactersCharacterIDMailMailID updates metadata about a mail

  Update metadata about a mail

---

*/
func (a *Client) PutCharactersCharacterIDMailMailID(params *PutCharactersCharacterIDMailMailIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutCharactersCharacterIDMailMailIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCharactersCharacterIDMailMailIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put_characters_character_id_mail_mail_id",
		Method:             "PUT",
		PathPattern:        "/v1/characters/{character_id}/mail/{mail_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCharactersCharacterIDMailMailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCharactersCharacterIDMailMailIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put_characters_character_id_mail_mail_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
