// Code generated by go-swagger; DO NOT EDIT.

package mail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// PostCharactersCharacterIDMailLabelsReader is a Reader for the PostCharactersCharacterIDMailLabels structure.
type PostCharactersCharacterIDMailLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostCharactersCharacterIDMailLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostCharactersCharacterIDMailLabelsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostCharactersCharacterIDMailLabelsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostCharactersCharacterIDMailLabelsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostCharactersCharacterIDMailLabelsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewPostCharactersCharacterIDMailLabelsEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostCharactersCharacterIDMailLabelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostCharactersCharacterIDMailLabelsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostCharactersCharacterIDMailLabelsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v2/characters/{character_id}/mail/labels/] post_characters_character_id_mail_labels", response, response.Code())
	}
}

// NewPostCharactersCharacterIDMailLabelsCreated creates a PostCharactersCharacterIDMailLabelsCreated with default headers values
func NewPostCharactersCharacterIDMailLabelsCreated() *PostCharactersCharacterIDMailLabelsCreated {
	return &PostCharactersCharacterIDMailLabelsCreated{}
}

/*
PostCharactersCharacterIDMailLabelsCreated describes a response with status code 201, with default header values.

Label created
*/
type PostCharactersCharacterIDMailLabelsCreated struct {
	Payload int32
}

// IsSuccess returns true when this post characters character Id mail labels created response has a 2xx status code
func (o *PostCharactersCharacterIDMailLabelsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post characters character Id mail labels created response has a 3xx status code
func (o *PostCharactersCharacterIDMailLabelsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail labels created response has a 4xx status code
func (o *PostCharactersCharacterIDMailLabelsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post characters character Id mail labels created response has a 5xx status code
func (o *PostCharactersCharacterIDMailLabelsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail labels created response a status code equal to that given
func (o *PostCharactersCharacterIDMailLabelsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post characters character Id mail labels created response
func (o *PostCharactersCharacterIDMailLabelsCreated) Code() int {
	return 201
}

func (o *PostCharactersCharacterIDMailLabelsCreated) Error() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsCreated  %+v", 201, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsCreated) String() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsCreated  %+v", 201, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsCreated) GetPayload() int32 {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailLabelsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailLabelsBadRequest creates a PostCharactersCharacterIDMailLabelsBadRequest with default headers values
func NewPostCharactersCharacterIDMailLabelsBadRequest() *PostCharactersCharacterIDMailLabelsBadRequest {
	return &PostCharactersCharacterIDMailLabelsBadRequest{}
}

/*
PostCharactersCharacterIDMailLabelsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostCharactersCharacterIDMailLabelsBadRequest struct {
	Payload *models.BadRequest
}

// IsSuccess returns true when this post characters character Id mail labels bad request response has a 2xx status code
func (o *PostCharactersCharacterIDMailLabelsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail labels bad request response has a 3xx status code
func (o *PostCharactersCharacterIDMailLabelsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail labels bad request response has a 4xx status code
func (o *PostCharactersCharacterIDMailLabelsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post characters character Id mail labels bad request response has a 5xx status code
func (o *PostCharactersCharacterIDMailLabelsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail labels bad request response a status code equal to that given
func (o *PostCharactersCharacterIDMailLabelsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post characters character Id mail labels bad request response
func (o *PostCharactersCharacterIDMailLabelsBadRequest) Code() int {
	return 400
}

func (o *PostCharactersCharacterIDMailLabelsBadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsBadRequest  %+v", 400, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsBadRequest) String() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsBadRequest  %+v", 400, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailLabelsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailLabelsUnauthorized creates a PostCharactersCharacterIDMailLabelsUnauthorized with default headers values
func NewPostCharactersCharacterIDMailLabelsUnauthorized() *PostCharactersCharacterIDMailLabelsUnauthorized {
	return &PostCharactersCharacterIDMailLabelsUnauthorized{}
}

/*
PostCharactersCharacterIDMailLabelsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostCharactersCharacterIDMailLabelsUnauthorized struct {
	Payload *models.Unauthorized
}

// IsSuccess returns true when this post characters character Id mail labels unauthorized response has a 2xx status code
func (o *PostCharactersCharacterIDMailLabelsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail labels unauthorized response has a 3xx status code
func (o *PostCharactersCharacterIDMailLabelsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail labels unauthorized response has a 4xx status code
func (o *PostCharactersCharacterIDMailLabelsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post characters character Id mail labels unauthorized response has a 5xx status code
func (o *PostCharactersCharacterIDMailLabelsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail labels unauthorized response a status code equal to that given
func (o *PostCharactersCharacterIDMailLabelsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post characters character Id mail labels unauthorized response
func (o *PostCharactersCharacterIDMailLabelsUnauthorized) Code() int {
	return 401
}

func (o *PostCharactersCharacterIDMailLabelsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsUnauthorized) String() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsUnauthorized) GetPayload() *models.Unauthorized {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailLabelsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailLabelsForbidden creates a PostCharactersCharacterIDMailLabelsForbidden with default headers values
func NewPostCharactersCharacterIDMailLabelsForbidden() *PostCharactersCharacterIDMailLabelsForbidden {
	return &PostCharactersCharacterIDMailLabelsForbidden{}
}

/*
PostCharactersCharacterIDMailLabelsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostCharactersCharacterIDMailLabelsForbidden struct {
	Payload *models.Forbidden
}

// IsSuccess returns true when this post characters character Id mail labels forbidden response has a 2xx status code
func (o *PostCharactersCharacterIDMailLabelsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail labels forbidden response has a 3xx status code
func (o *PostCharactersCharacterIDMailLabelsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail labels forbidden response has a 4xx status code
func (o *PostCharactersCharacterIDMailLabelsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post characters character Id mail labels forbidden response has a 5xx status code
func (o *PostCharactersCharacterIDMailLabelsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail labels forbidden response a status code equal to that given
func (o *PostCharactersCharacterIDMailLabelsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post characters character Id mail labels forbidden response
func (o *PostCharactersCharacterIDMailLabelsForbidden) Code() int {
	return 403
}

func (o *PostCharactersCharacterIDMailLabelsForbidden) Error() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsForbidden  %+v", 403, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsForbidden) String() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsForbidden  %+v", 403, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsForbidden) GetPayload() *models.Forbidden {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailLabelsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailLabelsEnhanceYourCalm creates a PostCharactersCharacterIDMailLabelsEnhanceYourCalm with default headers values
func NewPostCharactersCharacterIDMailLabelsEnhanceYourCalm() *PostCharactersCharacterIDMailLabelsEnhanceYourCalm {
	return &PostCharactersCharacterIDMailLabelsEnhanceYourCalm{}
}

/*
PostCharactersCharacterIDMailLabelsEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type PostCharactersCharacterIDMailLabelsEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

// IsSuccess returns true when this post characters character Id mail labels enhance your calm response has a 2xx status code
func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail labels enhance your calm response has a 3xx status code
func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail labels enhance your calm response has a 4xx status code
func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) IsClientError() bool {
	return true
}

// IsServerError returns true when this post characters character Id mail labels enhance your calm response has a 5xx status code
func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail labels enhance your calm response a status code equal to that given
func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) IsCode(code int) bool {
	return code == 420
}

// Code gets the status code for the post characters character Id mail labels enhance your calm response
func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) Code() int {
	return 420
}

func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) String() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailLabelsEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailLabelsInternalServerError creates a PostCharactersCharacterIDMailLabelsInternalServerError with default headers values
func NewPostCharactersCharacterIDMailLabelsInternalServerError() *PostCharactersCharacterIDMailLabelsInternalServerError {
	return &PostCharactersCharacterIDMailLabelsInternalServerError{}
}

/*
PostCharactersCharacterIDMailLabelsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PostCharactersCharacterIDMailLabelsInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this post characters character Id mail labels internal server error response has a 2xx status code
func (o *PostCharactersCharacterIDMailLabelsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail labels internal server error response has a 3xx status code
func (o *PostCharactersCharacterIDMailLabelsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail labels internal server error response has a 4xx status code
func (o *PostCharactersCharacterIDMailLabelsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post characters character Id mail labels internal server error response has a 5xx status code
func (o *PostCharactersCharacterIDMailLabelsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post characters character Id mail labels internal server error response a status code equal to that given
func (o *PostCharactersCharacterIDMailLabelsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post characters character Id mail labels internal server error response
func (o *PostCharactersCharacterIDMailLabelsInternalServerError) Code() int {
	return 500
}

func (o *PostCharactersCharacterIDMailLabelsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsInternalServerError) String() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailLabelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailLabelsServiceUnavailable creates a PostCharactersCharacterIDMailLabelsServiceUnavailable with default headers values
func NewPostCharactersCharacterIDMailLabelsServiceUnavailable() *PostCharactersCharacterIDMailLabelsServiceUnavailable {
	return &PostCharactersCharacterIDMailLabelsServiceUnavailable{}
}

/*
PostCharactersCharacterIDMailLabelsServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type PostCharactersCharacterIDMailLabelsServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

// IsSuccess returns true when this post characters character Id mail labels service unavailable response has a 2xx status code
func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail labels service unavailable response has a 3xx status code
func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail labels service unavailable response has a 4xx status code
func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post characters character Id mail labels service unavailable response has a 5xx status code
func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post characters character Id mail labels service unavailable response a status code equal to that given
func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the post characters character Id mail labels service unavailable response
func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) Code() int {
	return 503
}

func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailLabelsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailLabelsGatewayTimeout creates a PostCharactersCharacterIDMailLabelsGatewayTimeout with default headers values
func NewPostCharactersCharacterIDMailLabelsGatewayTimeout() *PostCharactersCharacterIDMailLabelsGatewayTimeout {
	return &PostCharactersCharacterIDMailLabelsGatewayTimeout{}
}

/*
PostCharactersCharacterIDMailLabelsGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type PostCharactersCharacterIDMailLabelsGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

// IsSuccess returns true when this post characters character Id mail labels gateway timeout response has a 2xx status code
func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail labels gateway timeout response has a 3xx status code
func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail labels gateway timeout response has a 4xx status code
func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post characters character Id mail labels gateway timeout response has a 5xx status code
func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post characters character Id mail labels gateway timeout response a status code equal to that given
func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the post characters character Id mail labels gateway timeout response
func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) Code() int {
	return 504
}

func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /v2/characters/{character_id}/mail/labels/][%d] postCharactersCharacterIdMailLabelsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailLabelsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostCharactersCharacterIDMailLabelsBody post_characters_character_id_mail_labels_label
//
// label object
swagger:model PostCharactersCharacterIDMailLabelsBody
*/
type PostCharactersCharacterIDMailLabelsBody struct {

	// post_characters_character_id_mail_labels_color
	//
	// Hexadecimal string representing label color, in RGB format
	// Enum: [#0000fe #006634 #0099ff #00ff33 #01ffff #349800 #660066 #666666 #999999 #99ffff #9a0000 #ccff9a #e6e6e6 #fe0000 #ff6600 #ffff01 #ffffcd #ffffff]
	Color *string `json:"color,omitempty"`

	// post_characters_character_id_mail_labels_name
	//
	// name string
	// Required: true
	// Max Length: 40
	// Min Length: 1
	Name *string `json:"name"`
}

// Validate validates this post characters character ID mail labels body
func (o *PostCharactersCharacterIDMailLabelsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postCharactersCharacterIdMailLabelsBodyTypeColorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["#0000fe","#006634","#0099ff","#00ff33","#01ffff","#349800","#660066","#666666","#999999","#99ffff","#9a0000","#ccff9a","#e6e6e6","#fe0000","#ff6600","#ffff01","#ffffcd","#ffffff"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postCharactersCharacterIdMailLabelsBodyTypeColorPropEnum = append(postCharactersCharacterIdMailLabelsBodyTypeColorPropEnum, v)
	}
}

const (

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag0000fe captures enum value "#0000fe"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag0000fe string = "#0000fe"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag006634 captures enum value "#006634"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag006634 string = "#006634"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag0099ff captures enum value "#0099ff"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag0099ff string = "#0099ff"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag00ff33 captures enum value "#00ff33"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag00ff33 string = "#00ff33"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag01ffff captures enum value "#01ffff"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag01ffff string = "#01ffff"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag349800 captures enum value "#349800"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag349800 string = "#349800"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag660066 captures enum value "#660066"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag660066 string = "#660066"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag666666 captures enum value "#666666"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag666666 string = "#666666"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag999999 captures enum value "#999999"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag999999 string = "#999999"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag99ffff captures enum value "#99ffff"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag99ffff string = "#99ffff"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtag9a0000 captures enum value "#9a0000"
	PostCharactersCharacterIDMailLabelsBodyColorHashtag9a0000 string = "#9a0000"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtagCcff9a captures enum value "#ccff9a"
	PostCharactersCharacterIDMailLabelsBodyColorHashtagCcff9a string = "#ccff9a"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtagE6e6e6 captures enum value "#e6e6e6"
	PostCharactersCharacterIDMailLabelsBodyColorHashtagE6e6e6 string = "#e6e6e6"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtagFe0000 captures enum value "#fe0000"
	PostCharactersCharacterIDMailLabelsBodyColorHashtagFe0000 string = "#fe0000"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtagFf6600 captures enum value "#ff6600"
	PostCharactersCharacterIDMailLabelsBodyColorHashtagFf6600 string = "#ff6600"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtagFfff01 captures enum value "#ffff01"
	PostCharactersCharacterIDMailLabelsBodyColorHashtagFfff01 string = "#ffff01"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtagFfffcd captures enum value "#ffffcd"
	PostCharactersCharacterIDMailLabelsBodyColorHashtagFfffcd string = "#ffffcd"

	// PostCharactersCharacterIDMailLabelsBodyColorHashtagFfffff captures enum value "#ffffff"
	PostCharactersCharacterIDMailLabelsBodyColorHashtagFfffff string = "#ffffff"
)

// prop value enum
func (o *PostCharactersCharacterIDMailLabelsBody) validateColorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postCharactersCharacterIdMailLabelsBodyTypeColorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostCharactersCharacterIDMailLabelsBody) validateColor(formats strfmt.Registry) error {
	if swag.IsZero(o.Color) { // not required
		return nil
	}

	// value enum
	if err := o.validateColorEnum("label"+"."+"color", "body", *o.Color); err != nil {
		return err
	}

	return nil
}

func (o *PostCharactersCharacterIDMailLabelsBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("label"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("label"+"."+"name", "body", *o.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("label"+"."+"name", "body", *o.Name, 40); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post characters character ID mail labels body based on context it is used
func (o *PostCharactersCharacterIDMailLabelsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCharactersCharacterIDMailLabelsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCharactersCharacterIDMailLabelsBody) UnmarshalBinary(b []byte) error {
	var res PostCharactersCharacterIDMailLabelsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
