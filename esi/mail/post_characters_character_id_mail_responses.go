// Code generated by go-swagger; DO NOT EDIT.

package mail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// PostCharactersCharacterIDMailReader is a Reader for the PostCharactersCharacterIDMail structure.
type PostCharactersCharacterIDMailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostCharactersCharacterIDMailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostCharactersCharacterIDMailCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostCharactersCharacterIDMailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostCharactersCharacterIDMailUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostCharactersCharacterIDMailForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewPostCharactersCharacterIDMailEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostCharactersCharacterIDMailInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostCharactersCharacterIDMailServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostCharactersCharacterIDMailGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 520:
		result := NewPostCharactersCharacterIDMailStatus520()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostCharactersCharacterIDMailCreated creates a PostCharactersCharacterIDMailCreated with default headers values
func NewPostCharactersCharacterIDMailCreated() *PostCharactersCharacterIDMailCreated {
	return &PostCharactersCharacterIDMailCreated{}
}

/*
PostCharactersCharacterIDMailCreated describes a response with status code 201, with default header values.

Mail created
*/
type PostCharactersCharacterIDMailCreated struct {
	Payload int32
}

// IsSuccess returns true when this post characters character Id mail created response has a 2xx status code
func (o *PostCharactersCharacterIDMailCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post characters character Id mail created response has a 3xx status code
func (o *PostCharactersCharacterIDMailCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail created response has a 4xx status code
func (o *PostCharactersCharacterIDMailCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post characters character Id mail created response has a 5xx status code
func (o *PostCharactersCharacterIDMailCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail created response a status code equal to that given
func (o *PostCharactersCharacterIDMailCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post characters character Id mail created response
func (o *PostCharactersCharacterIDMailCreated) Code() int {
	return 201
}

func (o *PostCharactersCharacterIDMailCreated) Error() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailCreated  %+v", 201, o.Payload)
}

func (o *PostCharactersCharacterIDMailCreated) String() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailCreated  %+v", 201, o.Payload)
}

func (o *PostCharactersCharacterIDMailCreated) GetPayload() int32 {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailBadRequest creates a PostCharactersCharacterIDMailBadRequest with default headers values
func NewPostCharactersCharacterIDMailBadRequest() *PostCharactersCharacterIDMailBadRequest {
	return &PostCharactersCharacterIDMailBadRequest{}
}

/*
PostCharactersCharacterIDMailBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostCharactersCharacterIDMailBadRequest struct {
	Payload *models.BadRequest
}

// IsSuccess returns true when this post characters character Id mail bad request response has a 2xx status code
func (o *PostCharactersCharacterIDMailBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail bad request response has a 3xx status code
func (o *PostCharactersCharacterIDMailBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail bad request response has a 4xx status code
func (o *PostCharactersCharacterIDMailBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post characters character Id mail bad request response has a 5xx status code
func (o *PostCharactersCharacterIDMailBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail bad request response a status code equal to that given
func (o *PostCharactersCharacterIDMailBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post characters character Id mail bad request response
func (o *PostCharactersCharacterIDMailBadRequest) Code() int {
	return 400
}

func (o *PostCharactersCharacterIDMailBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailBadRequest  %+v", 400, o.Payload)
}

func (o *PostCharactersCharacterIDMailBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailBadRequest  %+v", 400, o.Payload)
}

func (o *PostCharactersCharacterIDMailBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailUnauthorized creates a PostCharactersCharacterIDMailUnauthorized with default headers values
func NewPostCharactersCharacterIDMailUnauthorized() *PostCharactersCharacterIDMailUnauthorized {
	return &PostCharactersCharacterIDMailUnauthorized{}
}

/*
PostCharactersCharacterIDMailUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostCharactersCharacterIDMailUnauthorized struct {
	Payload *models.Unauthorized
}

// IsSuccess returns true when this post characters character Id mail unauthorized response has a 2xx status code
func (o *PostCharactersCharacterIDMailUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail unauthorized response has a 3xx status code
func (o *PostCharactersCharacterIDMailUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail unauthorized response has a 4xx status code
func (o *PostCharactersCharacterIDMailUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post characters character Id mail unauthorized response has a 5xx status code
func (o *PostCharactersCharacterIDMailUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail unauthorized response a status code equal to that given
func (o *PostCharactersCharacterIDMailUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post characters character Id mail unauthorized response
func (o *PostCharactersCharacterIDMailUnauthorized) Code() int {
	return 401
}

func (o *PostCharactersCharacterIDMailUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCharactersCharacterIDMailUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCharactersCharacterIDMailUnauthorized) GetPayload() *models.Unauthorized {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailForbidden creates a PostCharactersCharacterIDMailForbidden with default headers values
func NewPostCharactersCharacterIDMailForbidden() *PostCharactersCharacterIDMailForbidden {
	return &PostCharactersCharacterIDMailForbidden{}
}

/*
PostCharactersCharacterIDMailForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostCharactersCharacterIDMailForbidden struct {
	Payload *models.Forbidden
}

// IsSuccess returns true when this post characters character Id mail forbidden response has a 2xx status code
func (o *PostCharactersCharacterIDMailForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail forbidden response has a 3xx status code
func (o *PostCharactersCharacterIDMailForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail forbidden response has a 4xx status code
func (o *PostCharactersCharacterIDMailForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post characters character Id mail forbidden response has a 5xx status code
func (o *PostCharactersCharacterIDMailForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail forbidden response a status code equal to that given
func (o *PostCharactersCharacterIDMailForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post characters character Id mail forbidden response
func (o *PostCharactersCharacterIDMailForbidden) Code() int {
	return 403
}

func (o *PostCharactersCharacterIDMailForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailForbidden  %+v", 403, o.Payload)
}

func (o *PostCharactersCharacterIDMailForbidden) String() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailForbidden  %+v", 403, o.Payload)
}

func (o *PostCharactersCharacterIDMailForbidden) GetPayload() *models.Forbidden {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailEnhanceYourCalm creates a PostCharactersCharacterIDMailEnhanceYourCalm with default headers values
func NewPostCharactersCharacterIDMailEnhanceYourCalm() *PostCharactersCharacterIDMailEnhanceYourCalm {
	return &PostCharactersCharacterIDMailEnhanceYourCalm{}
}

/*
PostCharactersCharacterIDMailEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type PostCharactersCharacterIDMailEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

// IsSuccess returns true when this post characters character Id mail enhance your calm response has a 2xx status code
func (o *PostCharactersCharacterIDMailEnhanceYourCalm) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail enhance your calm response has a 3xx status code
func (o *PostCharactersCharacterIDMailEnhanceYourCalm) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail enhance your calm response has a 4xx status code
func (o *PostCharactersCharacterIDMailEnhanceYourCalm) IsClientError() bool {
	return true
}

// IsServerError returns true when this post characters character Id mail enhance your calm response has a 5xx status code
func (o *PostCharactersCharacterIDMailEnhanceYourCalm) IsServerError() bool {
	return false
}

// IsCode returns true when this post characters character Id mail enhance your calm response a status code equal to that given
func (o *PostCharactersCharacterIDMailEnhanceYourCalm) IsCode(code int) bool {
	return code == 420
}

// Code gets the status code for the post characters character Id mail enhance your calm response
func (o *PostCharactersCharacterIDMailEnhanceYourCalm) Code() int {
	return 420
}

func (o *PostCharactersCharacterIDMailEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *PostCharactersCharacterIDMailEnhanceYourCalm) String() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *PostCharactersCharacterIDMailEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailInternalServerError creates a PostCharactersCharacterIDMailInternalServerError with default headers values
func NewPostCharactersCharacterIDMailInternalServerError() *PostCharactersCharacterIDMailInternalServerError {
	return &PostCharactersCharacterIDMailInternalServerError{}
}

/*
PostCharactersCharacterIDMailInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PostCharactersCharacterIDMailInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this post characters character Id mail internal server error response has a 2xx status code
func (o *PostCharactersCharacterIDMailInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail internal server error response has a 3xx status code
func (o *PostCharactersCharacterIDMailInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail internal server error response has a 4xx status code
func (o *PostCharactersCharacterIDMailInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post characters character Id mail internal server error response has a 5xx status code
func (o *PostCharactersCharacterIDMailInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post characters character Id mail internal server error response a status code equal to that given
func (o *PostCharactersCharacterIDMailInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post characters character Id mail internal server error response
func (o *PostCharactersCharacterIDMailInternalServerError) Code() int {
	return 500
}

func (o *PostCharactersCharacterIDMailInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCharactersCharacterIDMailInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCharactersCharacterIDMailInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailServiceUnavailable creates a PostCharactersCharacterIDMailServiceUnavailable with default headers values
func NewPostCharactersCharacterIDMailServiceUnavailable() *PostCharactersCharacterIDMailServiceUnavailable {
	return &PostCharactersCharacterIDMailServiceUnavailable{}
}

/*
PostCharactersCharacterIDMailServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type PostCharactersCharacterIDMailServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

// IsSuccess returns true when this post characters character Id mail service unavailable response has a 2xx status code
func (o *PostCharactersCharacterIDMailServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail service unavailable response has a 3xx status code
func (o *PostCharactersCharacterIDMailServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail service unavailable response has a 4xx status code
func (o *PostCharactersCharacterIDMailServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post characters character Id mail service unavailable response has a 5xx status code
func (o *PostCharactersCharacterIDMailServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post characters character Id mail service unavailable response a status code equal to that given
func (o *PostCharactersCharacterIDMailServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the post characters character Id mail service unavailable response
func (o *PostCharactersCharacterIDMailServiceUnavailable) Code() int {
	return 503
}

func (o *PostCharactersCharacterIDMailServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostCharactersCharacterIDMailServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostCharactersCharacterIDMailServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailGatewayTimeout creates a PostCharactersCharacterIDMailGatewayTimeout with default headers values
func NewPostCharactersCharacterIDMailGatewayTimeout() *PostCharactersCharacterIDMailGatewayTimeout {
	return &PostCharactersCharacterIDMailGatewayTimeout{}
}

/*
PostCharactersCharacterIDMailGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type PostCharactersCharacterIDMailGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

// IsSuccess returns true when this post characters character Id mail gateway timeout response has a 2xx status code
func (o *PostCharactersCharacterIDMailGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail gateway timeout response has a 3xx status code
func (o *PostCharactersCharacterIDMailGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail gateway timeout response has a 4xx status code
func (o *PostCharactersCharacterIDMailGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post characters character Id mail gateway timeout response has a 5xx status code
func (o *PostCharactersCharacterIDMailGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post characters character Id mail gateway timeout response a status code equal to that given
func (o *PostCharactersCharacterIDMailGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the post characters character Id mail gateway timeout response
func (o *PostCharactersCharacterIDMailGatewayTimeout) Code() int {
	return 504
}

func (o *PostCharactersCharacterIDMailGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostCharactersCharacterIDMailGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostCharactersCharacterIDMailGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCharactersCharacterIDMailStatus520 creates a PostCharactersCharacterIDMailStatus520 with default headers values
func NewPostCharactersCharacterIDMailStatus520() *PostCharactersCharacterIDMailStatus520 {
	return &PostCharactersCharacterIDMailStatus520{}
}

/*
PostCharactersCharacterIDMailStatus520 describes a response with status code 520, with default header values.

Internal error thrown from the EVE server. Most of the time this means you have hit an EVE server rate limit
*/
type PostCharactersCharacterIDMailStatus520 struct {
	Payload *PostCharactersCharacterIDMailStatus520Body
}

// IsSuccess returns true when this post characters character Id mail status520 response has a 2xx status code
func (o *PostCharactersCharacterIDMailStatus520) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post characters character Id mail status520 response has a 3xx status code
func (o *PostCharactersCharacterIDMailStatus520) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post characters character Id mail status520 response has a 4xx status code
func (o *PostCharactersCharacterIDMailStatus520) IsClientError() bool {
	return false
}

// IsServerError returns true when this post characters character Id mail status520 response has a 5xx status code
func (o *PostCharactersCharacterIDMailStatus520) IsServerError() bool {
	return true
}

// IsCode returns true when this post characters character Id mail status520 response a status code equal to that given
func (o *PostCharactersCharacterIDMailStatus520) IsCode(code int) bool {
	return code == 520
}

// Code gets the status code for the post characters character Id mail status520 response
func (o *PostCharactersCharacterIDMailStatus520) Code() int {
	return 520
}

func (o *PostCharactersCharacterIDMailStatus520) Error() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailStatus520  %+v", 520, o.Payload)
}

func (o *PostCharactersCharacterIDMailStatus520) String() string {
	return fmt.Sprintf("[POST /v1/characters/{character_id}/mail/][%d] postCharactersCharacterIdMailStatus520  %+v", 520, o.Payload)
}

func (o *PostCharactersCharacterIDMailStatus520) GetPayload() *PostCharactersCharacterIDMailStatus520Body {
	return o.Payload
}

func (o *PostCharactersCharacterIDMailStatus520) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostCharactersCharacterIDMailStatus520Body)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostCharactersCharacterIDMailBody post_characters_character_id_mail_mail
//
// mail object
swagger:model PostCharactersCharacterIDMailBody
*/
type PostCharactersCharacterIDMailBody struct {

	// post_characters_character_id_mail_approved_cost
	//
	// approved_cost integer
	ApprovedCost int64 `json:"approved_cost,omitempty"`

	// post_characters_character_id_mail_body
	//
	// body string
	// Required: true
	// Max Length: 10000
	Body *string `json:"body"`

	// post_characters_character_id_mail_recipients
	//
	// recipients array
	// Required: true
	// Max Items: 50
	// Min Items: 1
	Recipients []*PostCharactersCharacterIDMailParamsBodyRecipientsItems0 `json:"recipients"`

	// post_characters_character_id_mail_subject
	//
	// subject string
	// Required: true
	// Max Length: 1000
	Subject *string `json:"subject"`
}

// Validate validates this post characters character ID mail body
func (o *PostCharactersCharacterIDMailBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCharactersCharacterIDMailBody) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("mail"+"."+"body", "body", o.Body); err != nil {
		return err
	}

	if err := validate.MaxLength("mail"+"."+"body", "body", *o.Body, 10000); err != nil {
		return err
	}

	return nil
}

func (o *PostCharactersCharacterIDMailBody) validateRecipients(formats strfmt.Registry) error {

	if err := validate.Required("mail"+"."+"recipients", "body", o.Recipients); err != nil {
		return err
	}

	iRecipientsSize := int64(len(o.Recipients))

	if err := validate.MinItems("mail"+"."+"recipients", "body", iRecipientsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("mail"+"."+"recipients", "body", iRecipientsSize, 50); err != nil {
		return err
	}

	for i := 0; i < len(o.Recipients); i++ {
		if swag.IsZero(o.Recipients[i]) { // not required
			continue
		}

		if o.Recipients[i] != nil {
			if err := o.Recipients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mail" + "." + "recipients" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mail" + "." + "recipients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostCharactersCharacterIDMailBody) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("mail"+"."+"subject", "body", o.Subject); err != nil {
		return err
	}

	if err := validate.MaxLength("mail"+"."+"subject", "body", *o.Subject, 1000); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post characters character ID mail body based on the context it is used
func (o *PostCharactersCharacterIDMailBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRecipients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCharactersCharacterIDMailBody) contextValidateRecipients(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Recipients); i++ {

		if o.Recipients[i] != nil {
			if err := o.Recipients[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mail" + "." + "recipients" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mail" + "." + "recipients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCharactersCharacterIDMailBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCharactersCharacterIDMailBody) UnmarshalBinary(b []byte) error {
	var res PostCharactersCharacterIDMailBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostCharactersCharacterIDMailParamsBodyRecipientsItems0 post_characters_character_id_mail_recipient
//
// recipient object
swagger:model PostCharactersCharacterIDMailParamsBodyRecipientsItems0
*/
type PostCharactersCharacterIDMailParamsBodyRecipientsItems0 struct {

	// post_characters_character_id_mail_recipient_id
	//
	// recipient_id integer
	// Required: true
	RecipientID *int32 `json:"recipient_id"`

	// post_characters_character_id_mail_recipient_type
	//
	// recipient_type string
	// Required: true
	// Enum: [alliance character corporation mailing_list]
	RecipientType *string `json:"recipient_type"`
}

// Validate validates this post characters character ID mail params body recipients items0
func (o *PostCharactersCharacterIDMailParamsBodyRecipientsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRecipientID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipientType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCharactersCharacterIDMailParamsBodyRecipientsItems0) validateRecipientID(formats strfmt.Registry) error {

	if err := validate.Required("recipient_id", "body", o.RecipientID); err != nil {
		return err
	}

	return nil
}

var postCharactersCharacterIdMailParamsBodyRecipientsItems0TypeRecipientTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alliance","character","corporation","mailing_list"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postCharactersCharacterIdMailParamsBodyRecipientsItems0TypeRecipientTypePropEnum = append(postCharactersCharacterIdMailParamsBodyRecipientsItems0TypeRecipientTypePropEnum, v)
	}
}

const (

	// PostCharactersCharacterIDMailParamsBodyRecipientsItems0RecipientTypeAlliance captures enum value "alliance"
	PostCharactersCharacterIDMailParamsBodyRecipientsItems0RecipientTypeAlliance string = "alliance"

	// PostCharactersCharacterIDMailParamsBodyRecipientsItems0RecipientTypeCharacter captures enum value "character"
	PostCharactersCharacterIDMailParamsBodyRecipientsItems0RecipientTypeCharacter string = "character"

	// PostCharactersCharacterIDMailParamsBodyRecipientsItems0RecipientTypeCorporation captures enum value "corporation"
	PostCharactersCharacterIDMailParamsBodyRecipientsItems0RecipientTypeCorporation string = "corporation"

	// PostCharactersCharacterIDMailParamsBodyRecipientsItems0RecipientTypeMailingList captures enum value "mailing_list"
	PostCharactersCharacterIDMailParamsBodyRecipientsItems0RecipientTypeMailingList string = "mailing_list"
)

// prop value enum
func (o *PostCharactersCharacterIDMailParamsBodyRecipientsItems0) validateRecipientTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postCharactersCharacterIdMailParamsBodyRecipientsItems0TypeRecipientTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostCharactersCharacterIDMailParamsBodyRecipientsItems0) validateRecipientType(formats strfmt.Registry) error {

	if err := validate.Required("recipient_type", "body", o.RecipientType); err != nil {
		return err
	}

	// value enum
	if err := o.validateRecipientTypeEnum("recipient_type", "body", *o.RecipientType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post characters character ID mail params body recipients items0 based on context it is used
func (o *PostCharactersCharacterIDMailParamsBodyRecipientsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCharactersCharacterIDMailParamsBodyRecipientsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCharactersCharacterIDMailParamsBodyRecipientsItems0) UnmarshalBinary(b []byte) error {
	var res PostCharactersCharacterIDMailParamsBodyRecipientsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostCharactersCharacterIDMailStatus520Body post_characters_character_id_mail_error_520
//
// Error 520
swagger:model PostCharactersCharacterIDMailStatus520Body
*/
type PostCharactersCharacterIDMailStatus520Body struct {

	// post_characters_character_id_mail_520_error_520
	//
	// Error 520 message
	Error string `json:"error,omitempty"`
}

// Validate validates this post characters character ID mail status520 body
func (o *PostCharactersCharacterIDMailStatus520Body) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post characters character ID mail status520 body based on context it is used
func (o *PostCharactersCharacterIDMailStatus520Body) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCharactersCharacterIDMailStatus520Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCharactersCharacterIDMailStatus520Body) UnmarshalBinary(b []byte) error {
	var res PostCharactersCharacterIDMailStatus520Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
