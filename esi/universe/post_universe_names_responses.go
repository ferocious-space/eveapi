// Code generated by go-swagger; DO NOT EDIT.

package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// PostUniverseNamesReader is a Reader for the PostUniverseNames structure.
type PostUniverseNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUniverseNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUniverseNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUniverseNamesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostUniverseNamesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewPostUniverseNamesEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUniverseNamesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostUniverseNamesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostUniverseNamesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUniverseNamesOK creates a PostUniverseNamesOK with default headers values
func NewPostUniverseNamesOK() *PostUniverseNamesOK {
	return &PostUniverseNamesOK{}
}

/*
PostUniverseNamesOK describes a response with status code 200, with default header values.

List of id/name associations for a set of IDs. All IDs must resolve to a name, or nothing will be returned
*/
type PostUniverseNamesOK struct {
	Payload []*PostUniverseNamesOKBodyItems0
}

// IsSuccess returns true when this post universe names o k response has a 2xx status code
func (o *PostUniverseNamesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post universe names o k response has a 3xx status code
func (o *PostUniverseNamesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post universe names o k response has a 4xx status code
func (o *PostUniverseNamesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post universe names o k response has a 5xx status code
func (o *PostUniverseNamesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post universe names o k response a status code equal to that given
func (o *PostUniverseNamesOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostUniverseNamesOK) Error() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesOK  %+v", 200, o.Payload)
}

func (o *PostUniverseNamesOK) String() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesOK  %+v", 200, o.Payload)
}

func (o *PostUniverseNamesOK) GetPayload() []*PostUniverseNamesOKBodyItems0 {
	return o.Payload
}

func (o *PostUniverseNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseNamesBadRequest creates a PostUniverseNamesBadRequest with default headers values
func NewPostUniverseNamesBadRequest() *PostUniverseNamesBadRequest {
	return &PostUniverseNamesBadRequest{}
}

/*
PostUniverseNamesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostUniverseNamesBadRequest struct {
	Payload *models.BadRequest
}

// IsSuccess returns true when this post universe names bad request response has a 2xx status code
func (o *PostUniverseNamesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post universe names bad request response has a 3xx status code
func (o *PostUniverseNamesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post universe names bad request response has a 4xx status code
func (o *PostUniverseNamesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post universe names bad request response has a 5xx status code
func (o *PostUniverseNamesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post universe names bad request response a status code equal to that given
func (o *PostUniverseNamesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostUniverseNamesBadRequest) Error() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesBadRequest  %+v", 400, o.Payload)
}

func (o *PostUniverseNamesBadRequest) String() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesBadRequest  %+v", 400, o.Payload)
}

func (o *PostUniverseNamesBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *PostUniverseNamesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseNamesNotFound creates a PostUniverseNamesNotFound with default headers values
func NewPostUniverseNamesNotFound() *PostUniverseNamesNotFound {
	return &PostUniverseNamesNotFound{}
}

/*
PostUniverseNamesNotFound describes a response with status code 404, with default header values.

Ensure all IDs are valid before resolving
*/
type PostUniverseNamesNotFound struct {
	Payload *PostUniverseNamesNotFoundBody
}

// IsSuccess returns true when this post universe names not found response has a 2xx status code
func (o *PostUniverseNamesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post universe names not found response has a 3xx status code
func (o *PostUniverseNamesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post universe names not found response has a 4xx status code
func (o *PostUniverseNamesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post universe names not found response has a 5xx status code
func (o *PostUniverseNamesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post universe names not found response a status code equal to that given
func (o *PostUniverseNamesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostUniverseNamesNotFound) Error() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesNotFound  %+v", 404, o.Payload)
}

func (o *PostUniverseNamesNotFound) String() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesNotFound  %+v", 404, o.Payload)
}

func (o *PostUniverseNamesNotFound) GetPayload() *PostUniverseNamesNotFoundBody {
	return o.Payload
}

func (o *PostUniverseNamesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostUniverseNamesNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseNamesEnhanceYourCalm creates a PostUniverseNamesEnhanceYourCalm with default headers values
func NewPostUniverseNamesEnhanceYourCalm() *PostUniverseNamesEnhanceYourCalm {
	return &PostUniverseNamesEnhanceYourCalm{}
}

/*
PostUniverseNamesEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type PostUniverseNamesEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

// IsSuccess returns true when this post universe names enhance your calm response has a 2xx status code
func (o *PostUniverseNamesEnhanceYourCalm) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post universe names enhance your calm response has a 3xx status code
func (o *PostUniverseNamesEnhanceYourCalm) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post universe names enhance your calm response has a 4xx status code
func (o *PostUniverseNamesEnhanceYourCalm) IsClientError() bool {
	return true
}

// IsServerError returns true when this post universe names enhance your calm response has a 5xx status code
func (o *PostUniverseNamesEnhanceYourCalm) IsServerError() bool {
	return false
}

// IsCode returns true when this post universe names enhance your calm response a status code equal to that given
func (o *PostUniverseNamesEnhanceYourCalm) IsCode(code int) bool {
	return code == 420
}

func (o *PostUniverseNamesEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *PostUniverseNamesEnhanceYourCalm) String() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *PostUniverseNamesEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *PostUniverseNamesEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseNamesInternalServerError creates a PostUniverseNamesInternalServerError with default headers values
func NewPostUniverseNamesInternalServerError() *PostUniverseNamesInternalServerError {
	return &PostUniverseNamesInternalServerError{}
}

/*
PostUniverseNamesInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PostUniverseNamesInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this post universe names internal server error response has a 2xx status code
func (o *PostUniverseNamesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post universe names internal server error response has a 3xx status code
func (o *PostUniverseNamesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post universe names internal server error response has a 4xx status code
func (o *PostUniverseNamesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post universe names internal server error response has a 5xx status code
func (o *PostUniverseNamesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post universe names internal server error response a status code equal to that given
func (o *PostUniverseNamesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostUniverseNamesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUniverseNamesInternalServerError) String() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUniverseNamesInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *PostUniverseNamesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseNamesServiceUnavailable creates a PostUniverseNamesServiceUnavailable with default headers values
func NewPostUniverseNamesServiceUnavailable() *PostUniverseNamesServiceUnavailable {
	return &PostUniverseNamesServiceUnavailable{}
}

/*
PostUniverseNamesServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type PostUniverseNamesServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

// IsSuccess returns true when this post universe names service unavailable response has a 2xx status code
func (o *PostUniverseNamesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post universe names service unavailable response has a 3xx status code
func (o *PostUniverseNamesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post universe names service unavailable response has a 4xx status code
func (o *PostUniverseNamesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post universe names service unavailable response has a 5xx status code
func (o *PostUniverseNamesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post universe names service unavailable response a status code equal to that given
func (o *PostUniverseNamesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostUniverseNamesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUniverseNamesServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUniverseNamesServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *PostUniverseNamesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseNamesGatewayTimeout creates a PostUniverseNamesGatewayTimeout with default headers values
func NewPostUniverseNamesGatewayTimeout() *PostUniverseNamesGatewayTimeout {
	return &PostUniverseNamesGatewayTimeout{}
}

/*
PostUniverseNamesGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type PostUniverseNamesGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

// IsSuccess returns true when this post universe names gateway timeout response has a 2xx status code
func (o *PostUniverseNamesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post universe names gateway timeout response has a 3xx status code
func (o *PostUniverseNamesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post universe names gateway timeout response has a 4xx status code
func (o *PostUniverseNamesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post universe names gateway timeout response has a 5xx status code
func (o *PostUniverseNamesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post universe names gateway timeout response a status code equal to that given
func (o *PostUniverseNamesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostUniverseNamesGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUniverseNamesGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /v3/universe/names/][%d] postUniverseNamesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUniverseNamesGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *PostUniverseNamesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostUniverseNamesNotFoundBody post_universe_names_not_found
//
// Not found
swagger:model PostUniverseNamesNotFoundBody
*/
type PostUniverseNamesNotFoundBody struct {

	// post_universe_names_404_not_found
	//
	// Not found message
	Error string `json:"error,omitempty"`
}

// Validate validates this post universe names not found body
func (o *PostUniverseNamesNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post universe names not found body based on context it is used
func (o *PostUniverseNamesNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUniverseNamesNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUniverseNamesNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostUniverseNamesNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostUniverseNamesOKBodyItems0 post_universe_names_200_ok
//
// 200 ok object
swagger:model PostUniverseNamesOKBodyItems0
*/
type PostUniverseNamesOKBodyItems0 struct {

	// post_universe_names_category
	//
	// category string
	// Required: true
	// Enum: [alliance character constellation corporation inventory_type region solar_system station faction]
	Category *string `json:"category"`

	// post_universe_names_id
	//
	// id integer
	// Required: true
	ID *int32 `json:"id"`

	// post_universe_names_name
	//
	// name string
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this post universe names o k body items0
func (o *PostUniverseNamesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postUniverseNamesOKBodyItems0TypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alliance","character","constellation","corporation","inventory_type","region","solar_system","station","faction"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postUniverseNamesOKBodyItems0TypeCategoryPropEnum = append(postUniverseNamesOKBodyItems0TypeCategoryPropEnum, v)
	}
}

const (

	// PostUniverseNamesOKBodyItems0CategoryAlliance captures enum value "alliance"
	PostUniverseNamesOKBodyItems0CategoryAlliance string = "alliance"

	// PostUniverseNamesOKBodyItems0CategoryCharacter captures enum value "character"
	PostUniverseNamesOKBodyItems0CategoryCharacter string = "character"

	// PostUniverseNamesOKBodyItems0CategoryConstellation captures enum value "constellation"
	PostUniverseNamesOKBodyItems0CategoryConstellation string = "constellation"

	// PostUniverseNamesOKBodyItems0CategoryCorporation captures enum value "corporation"
	PostUniverseNamesOKBodyItems0CategoryCorporation string = "corporation"

	// PostUniverseNamesOKBodyItems0CategoryInventoryType captures enum value "inventory_type"
	PostUniverseNamesOKBodyItems0CategoryInventoryType string = "inventory_type"

	// PostUniverseNamesOKBodyItems0CategoryRegion captures enum value "region"
	PostUniverseNamesOKBodyItems0CategoryRegion string = "region"

	// PostUniverseNamesOKBodyItems0CategorySolarSystem captures enum value "solar_system"
	PostUniverseNamesOKBodyItems0CategorySolarSystem string = "solar_system"

	// PostUniverseNamesOKBodyItems0CategoryStation captures enum value "station"
	PostUniverseNamesOKBodyItems0CategoryStation string = "station"

	// PostUniverseNamesOKBodyItems0CategoryFaction captures enum value "faction"
	PostUniverseNamesOKBodyItems0CategoryFaction string = "faction"
)

// prop value enum
func (o *PostUniverseNamesOKBodyItems0) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postUniverseNamesOKBodyItems0TypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostUniverseNamesOKBodyItems0) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", o.Category); err != nil {
		return err
	}

	// value enum
	if err := o.validateCategoryEnum("category", "body", *o.Category); err != nil {
		return err
	}

	return nil
}

func (o *PostUniverseNamesOKBodyItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostUniverseNamesOKBodyItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post universe names o k body items0 based on context it is used
func (o *PostUniverseNamesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUniverseNamesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUniverseNamesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res PostUniverseNamesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
