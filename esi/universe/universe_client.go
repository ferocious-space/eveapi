// Code generated by go-swagger; DO NOT EDIT.

package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new universe API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for universe API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetUniverseAncestries(params *GetUniverseAncestriesParams, opts ...ClientOption) (*GetUniverseAncestriesOK, error)

	GetUniverseAsteroidBeltsAsteroidBeltID(params *GetUniverseAsteroidBeltsAsteroidBeltIDParams, opts ...ClientOption) (*GetUniverseAsteroidBeltsAsteroidBeltIDOK, error)

	GetUniverseBloodlines(params *GetUniverseBloodlinesParams, opts ...ClientOption) (*GetUniverseBloodlinesOK, error)

	GetUniverseCategories(params *GetUniverseCategoriesParams, opts ...ClientOption) (*GetUniverseCategoriesOK, error)

	GetUniverseCategoriesCategoryID(params *GetUniverseCategoriesCategoryIDParams, opts ...ClientOption) (*GetUniverseCategoriesCategoryIDOK, error)

	GetUniverseConstellations(params *GetUniverseConstellationsParams, opts ...ClientOption) (*GetUniverseConstellationsOK, error)

	GetUniverseConstellationsConstellationID(params *GetUniverseConstellationsConstellationIDParams, opts ...ClientOption) (*GetUniverseConstellationsConstellationIDOK, error)

	GetUniverseFactions(params *GetUniverseFactionsParams, opts ...ClientOption) (*GetUniverseFactionsOK, error)

	GetUniverseGraphics(params *GetUniverseGraphicsParams, opts ...ClientOption) (*GetUniverseGraphicsOK, error)

	GetUniverseGraphicsGraphicID(params *GetUniverseGraphicsGraphicIDParams, opts ...ClientOption) (*GetUniverseGraphicsGraphicIDOK, error)

	GetUniverseGroups(params *GetUniverseGroupsParams, opts ...ClientOption) (*GetUniverseGroupsOK, error)

	GetUniverseGroupsGroupID(params *GetUniverseGroupsGroupIDParams, opts ...ClientOption) (*GetUniverseGroupsGroupIDOK, error)

	GetUniverseMoonsMoonID(params *GetUniverseMoonsMoonIDParams, opts ...ClientOption) (*GetUniverseMoonsMoonIDOK, error)

	GetUniversePlanetsPlanetID(params *GetUniversePlanetsPlanetIDParams, opts ...ClientOption) (*GetUniversePlanetsPlanetIDOK, error)

	GetUniverseRaces(params *GetUniverseRacesParams, opts ...ClientOption) (*GetUniverseRacesOK, error)

	GetUniverseRegions(params *GetUniverseRegionsParams, opts ...ClientOption) (*GetUniverseRegionsOK, error)

	GetUniverseRegionsRegionID(params *GetUniverseRegionsRegionIDParams, opts ...ClientOption) (*GetUniverseRegionsRegionIDOK, error)

	GetUniverseStargatesStargateID(params *GetUniverseStargatesStargateIDParams, opts ...ClientOption) (*GetUniverseStargatesStargateIDOK, error)

	GetUniverseStarsStarID(params *GetUniverseStarsStarIDParams, opts ...ClientOption) (*GetUniverseStarsStarIDOK, error)

	GetUniverseStationsStationID(params *GetUniverseStationsStationIDParams, opts ...ClientOption) (*GetUniverseStationsStationIDOK, error)

	GetUniverseStructures(params *GetUniverseStructuresParams, opts ...ClientOption) (*GetUniverseStructuresOK, error)

	GetUniverseStructuresStructureID(params *GetUniverseStructuresStructureIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseStructuresStructureIDOK, error)

	GetUniverseSystemJumps(params *GetUniverseSystemJumpsParams, opts ...ClientOption) (*GetUniverseSystemJumpsOK, error)

	GetUniverseSystemKills(params *GetUniverseSystemKillsParams, opts ...ClientOption) (*GetUniverseSystemKillsOK, error)

	GetUniverseSystems(params *GetUniverseSystemsParams, opts ...ClientOption) (*GetUniverseSystemsOK, error)

	GetUniverseSystemsSystemID(params *GetUniverseSystemsSystemIDParams, opts ...ClientOption) (*GetUniverseSystemsSystemIDOK, error)

	GetUniverseTypes(params *GetUniverseTypesParams, opts ...ClientOption) (*GetUniverseTypesOK, error)

	GetUniverseTypesTypeID(params *GetUniverseTypesTypeIDParams, opts ...ClientOption) (*GetUniverseTypesTypeIDOK, error)

	PostUniverseIds(params *PostUniverseIdsParams, opts ...ClientOption) (*PostUniverseIdsOK, error)

	PostUniverseNames(params *PostUniverseNamesParams, opts ...ClientOption) (*PostUniverseNamesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetUniverseAncestries gets ancestries

	Get all character ancestries

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseAncestries(params *GetUniverseAncestriesParams, opts ...ClientOption) (*GetUniverseAncestriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseAncestriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_ancestries",
		Method:             "GET",
		PathPattern:        "/v1/universe/ancestries/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseAncestriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseAncestriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_ancestries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseAsteroidBeltsAsteroidBeltID gets asteroid belt information

	Get information on an asteroid belt

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseAsteroidBeltsAsteroidBeltID(params *GetUniverseAsteroidBeltsAsteroidBeltIDParams, opts ...ClientOption) (*GetUniverseAsteroidBeltsAsteroidBeltIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseAsteroidBeltsAsteroidBeltIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_asteroid_belts_asteroid_belt_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/asteroid_belts/{asteroid_belt_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseAsteroidBeltsAsteroidBeltIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseAsteroidBeltsAsteroidBeltIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_asteroid_belts_asteroid_belt_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseBloodlines gets bloodlines

	Get a list of bloodlines

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseBloodlines(params *GetUniverseBloodlinesParams, opts ...ClientOption) (*GetUniverseBloodlinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseBloodlinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_bloodlines",
		Method:             "GET",
		PathPattern:        "/v1/universe/bloodlines/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseBloodlinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseBloodlinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_bloodlines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseCategories gets item categories

	Get a list of item categories

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseCategories(params *GetUniverseCategoriesParams, opts ...ClientOption) (*GetUniverseCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_categories",
		Method:             "GET",
		PathPattern:        "/v1/universe/categories/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_categories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseCategoriesCategoryID gets item category information

	Get information of an item category

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseCategoriesCategoryID(params *GetUniverseCategoriesCategoryIDParams, opts ...ClientOption) (*GetUniverseCategoriesCategoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseCategoriesCategoryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_categories_category_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/categories/{category_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseCategoriesCategoryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseCategoriesCategoryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_categories_category_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseConstellations gets constellations

	Get a list of constellations

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseConstellations(params *GetUniverseConstellationsParams, opts ...ClientOption) (*GetUniverseConstellationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseConstellationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_constellations",
		Method:             "GET",
		PathPattern:        "/v1/universe/constellations/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseConstellationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseConstellationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_constellations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseConstellationsConstellationID gets constellation information

	Get information on a constellation

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseConstellationsConstellationID(params *GetUniverseConstellationsConstellationIDParams, opts ...ClientOption) (*GetUniverseConstellationsConstellationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseConstellationsConstellationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_constellations_constellation_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/constellations/{constellation_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseConstellationsConstellationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseConstellationsConstellationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_constellations_constellation_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseFactions gets factions

	Get a list of factions

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseFactions(params *GetUniverseFactionsParams, opts ...ClientOption) (*GetUniverseFactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseFactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_factions",
		Method:             "GET",
		PathPattern:        "/v2/universe/factions/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseFactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseFactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_factions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseGraphics gets graphics

	Get a list of graphics

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseGraphics(params *GetUniverseGraphicsParams, opts ...ClientOption) (*GetUniverseGraphicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseGraphicsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_graphics",
		Method:             "GET",
		PathPattern:        "/v1/universe/graphics/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseGraphicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseGraphicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_graphics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseGraphicsGraphicID gets graphic information

	Get information on a graphic

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseGraphicsGraphicID(params *GetUniverseGraphicsGraphicIDParams, opts ...ClientOption) (*GetUniverseGraphicsGraphicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseGraphicsGraphicIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_graphics_graphic_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/graphics/{graphic_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseGraphicsGraphicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseGraphicsGraphicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_graphics_graphic_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseGroups gets item groups

	Get a list of item groups

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseGroups(params *GetUniverseGroupsParams, opts ...ClientOption) (*GetUniverseGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_groups",
		Method:             "GET",
		PathPattern:        "/v1/universe/groups/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseGroupsGroupID gets item group information

	Get information on an item group

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseGroupsGroupID(params *GetUniverseGroupsGroupIDParams, opts ...ClientOption) (*GetUniverseGroupsGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseGroupsGroupIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_groups_group_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/groups/{group_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseGroupsGroupIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseGroupsGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_groups_group_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseMoonsMoonID gets moon information

	Get information on a moon

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseMoonsMoonID(params *GetUniverseMoonsMoonIDParams, opts ...ClientOption) (*GetUniverseMoonsMoonIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseMoonsMoonIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_moons_moon_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/moons/{moon_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseMoonsMoonIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseMoonsMoonIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_moons_moon_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniversePlanetsPlanetID gets planet information

	Get information on a planet

---

This route expires daily at 11:05
*/
func (a *Client) GetUniversePlanetsPlanetID(params *GetUniversePlanetsPlanetIDParams, opts ...ClientOption) (*GetUniversePlanetsPlanetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniversePlanetsPlanetIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_planets_planet_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/planets/{planet_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniversePlanetsPlanetIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniversePlanetsPlanetIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_planets_planet_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseRaces gets character races

	Get a list of character races

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseRaces(params *GetUniverseRacesParams, opts ...ClientOption) (*GetUniverseRacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseRacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_races",
		Method:             "GET",
		PathPattern:        "/v1/universe/races/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseRacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseRacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_races: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseRegions gets regions

	Get a list of regions

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseRegions(params *GetUniverseRegionsParams, opts ...ClientOption) (*GetUniverseRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseRegionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_regions",
		Method:             "GET",
		PathPattern:        "/v1/universe/regions/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_regions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseRegionsRegionID gets region information

	Get information on a region

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseRegionsRegionID(params *GetUniverseRegionsRegionIDParams, opts ...ClientOption) (*GetUniverseRegionsRegionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseRegionsRegionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_regions_region_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/regions/{region_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseRegionsRegionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseRegionsRegionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_regions_region_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseStargatesStargateID gets stargate information

	Get information on a stargate

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseStargatesStargateID(params *GetUniverseStargatesStargateIDParams, opts ...ClientOption) (*GetUniverseStargatesStargateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStargatesStargateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_stargates_stargate_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/stargates/{stargate_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStargatesStargateIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseStargatesStargateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_stargates_stargate_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseStarsStarID gets star information

	Get information on a star

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseStarsStarID(params *GetUniverseStarsStarIDParams, opts ...ClientOption) (*GetUniverseStarsStarIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStarsStarIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_stars_star_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/stars/{star_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStarsStarIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseStarsStarIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_stars_star_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseStationsStationID gets station information

	Get information on a station

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseStationsStationID(params *GetUniverseStationsStationIDParams, opts ...ClientOption) (*GetUniverseStationsStationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStationsStationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_stations_station_id",
		Method:             "GET",
		PathPattern:        "/v2/universe/stations/{station_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStationsStationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseStationsStationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_stations_station_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseStructures lists all public structures

	List all public structures

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseStructures(params *GetUniverseStructuresParams, opts ...ClientOption) (*GetUniverseStructuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStructuresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_structures",
		Method:             "GET",
		PathPattern:        "/v1/universe/structures/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStructuresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseStructuresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_structures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseStructuresStructureID gets structure information

	Returns information on requested structure if you are on the ACL. Otherwise, returns "Forbidden" for all inputs.

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseStructuresStructureID(params *GetUniverseStructuresStructureIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseStructuresStructureIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStructuresStructureIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_structures_structure_id",
		Method:             "GET",
		PathPattern:        "/v2/universe/structures/{structure_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStructuresStructureIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseStructuresStructureIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_structures_structure_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseSystemJumps gets system jumps

	Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseSystemJumps(params *GetUniverseSystemJumpsParams, opts ...ClientOption) (*GetUniverseSystemJumpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSystemJumpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_system_jumps",
		Method:             "GET",
		PathPattern:        "/v1/universe/system_jumps/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSystemJumpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseSystemJumpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_system_jumps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseSystemKills gets system kills

	Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseSystemKills(params *GetUniverseSystemKillsParams, opts ...ClientOption) (*GetUniverseSystemKillsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSystemKillsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_system_kills",
		Method:             "GET",
		PathPattern:        "/v2/universe/system_kills/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSystemKillsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseSystemKillsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_system_kills: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseSystems gets solar systems

	Get a list of solar systems

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseSystems(params *GetUniverseSystemsParams, opts ...ClientOption) (*GetUniverseSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSystemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_systems",
		Method:             "GET",
		PathPattern:        "/v1/universe/systems/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_systems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseSystemsSystemID gets solar system information

	Get information on a solar system.

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseSystemsSystemID(params *GetUniverseSystemsSystemIDParams, opts ...ClientOption) (*GetUniverseSystemsSystemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSystemsSystemIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_systems_system_id",
		Method:             "GET",
		PathPattern:        "/v4/universe/systems/{system_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSystemsSystemIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseSystemsSystemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_systems_system_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseTypes gets types

	Get a list of type ids

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseTypes(params *GetUniverseTypesParams, opts ...ClientOption) (*GetUniverseTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_types",
		Method:             "GET",
		PathPattern:        "/v1/universe/types/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_types: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUniverseTypesTypeID gets type information

	Get information on a type

---

This route expires daily at 11:05
*/
func (a *Client) GetUniverseTypesTypeID(params *GetUniverseTypesTypeIDParams, opts ...ClientOption) (*GetUniverseTypesTypeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseTypesTypeIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_types_type_id",
		Method:             "GET",
		PathPattern:        "/v3/universe/types/{type_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseTypesTypeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseTypesTypeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_types_type_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostUniverseIds bulks names to i ds

	Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours

---
*/
func (a *Client) PostUniverseIds(params *PostUniverseIdsParams, opts ...ClientOption) (*PostUniverseIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUniverseIdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_universe_ids",
		Method:             "POST",
		PathPattern:        "/v1/universe/ids/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUniverseIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUniverseIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_universe_ids: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostUniverseNames gets names and categories for a set of i ds

	Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types, Factions

---
*/
func (a *Client) PostUniverseNames(params *PostUniverseNamesParams, opts ...ClientOption) (*PostUniverseNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUniverseNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_universe_names",
		Method:             "POST",
		PathPattern:        "/v3/universe/names/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUniverseNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUniverseNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_universe_names: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
