// Code generated by go-swagger; DO NOT EDIT.

package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ferocious-space/eveapi/models"
)

// GetUniverseGroupsReader is a Reader for the GetUniverseGroups structure.
type GetUniverseGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUniverseGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUniverseGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetUniverseGroupsNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetUniverseGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewGetUniverseGroupsEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUniverseGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetUniverseGroupsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetUniverseGroupsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUniverseGroupsOK creates a GetUniverseGroupsOK with default headers values
func NewGetUniverseGroupsOK() *GetUniverseGroupsOK {
	var (
		// initialize headers with default values
		xPagesDefault = int32(1)
	)

	return &GetUniverseGroupsOK{

		XPages: xPagesDefault,
	}
}

/* GetUniverseGroupsOK describes a response with status code 200, with default header values.

A list of item group ids
*/
type GetUniverseGroupsOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	/* Maximum page number

	   Format: int32
	   Default: 1
	*/
	XPages int32

	Payload []int32
}

func (o *GetUniverseGroupsOK) Error() string {
	return fmt.Sprintf("[GET /v1/universe/groups/][%d] getUniverseGroupsOK  %+v", 200, o.Payload)
}
func (o *GetUniverseGroupsOK) GetPayload() []int32 {
	return o.Payload
}

func (o *GetUniverseGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	// hydrates response header X-Pages
	hdrXPages := response.GetHeader("X-Pages")

	if hdrXPages != "" {
		valxPages, err := swag.ConvertInt32(hdrXPages)
		if err != nil {
			return errors.InvalidType("X-Pages", "header", "int32", hdrXPages)
		}
		o.XPages = valxPages
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseGroupsNotModified creates a GetUniverseGroupsNotModified with default headers values
func NewGetUniverseGroupsNotModified() *GetUniverseGroupsNotModified {
	return &GetUniverseGroupsNotModified{}
}

/* GetUniverseGroupsNotModified describes a response with status code 304, with default header values.

Not modified
*/
type GetUniverseGroupsNotModified struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetUniverseGroupsNotModified) Error() string {
	return fmt.Sprintf("[GET /v1/universe/groups/][%d] getUniverseGroupsNotModified ", 304)
}

func (o *GetUniverseGroupsNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	return nil
}

// NewGetUniverseGroupsBadRequest creates a GetUniverseGroupsBadRequest with default headers values
func NewGetUniverseGroupsBadRequest() *GetUniverseGroupsBadRequest {
	return &GetUniverseGroupsBadRequest{}
}

/* GetUniverseGroupsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetUniverseGroupsBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetUniverseGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/universe/groups/][%d] getUniverseGroupsBadRequest  %+v", 400, o.Payload)
}
func (o *GetUniverseGroupsBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *GetUniverseGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseGroupsEnhanceYourCalm creates a GetUniverseGroupsEnhanceYourCalm with default headers values
func NewGetUniverseGroupsEnhanceYourCalm() *GetUniverseGroupsEnhanceYourCalm {
	return &GetUniverseGroupsEnhanceYourCalm{}
}

/* GetUniverseGroupsEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type GetUniverseGroupsEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetUniverseGroupsEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /v1/universe/groups/][%d] getUniverseGroupsEnhanceYourCalm  %+v", 420, o.Payload)
}
func (o *GetUniverseGroupsEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *GetUniverseGroupsEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseGroupsInternalServerError creates a GetUniverseGroupsInternalServerError with default headers values
func NewGetUniverseGroupsInternalServerError() *GetUniverseGroupsInternalServerError {
	return &GetUniverseGroupsInternalServerError{}
}

/* GetUniverseGroupsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetUniverseGroupsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetUniverseGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/universe/groups/][%d] getUniverseGroupsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetUniverseGroupsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetUniverseGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseGroupsServiceUnavailable creates a GetUniverseGroupsServiceUnavailable with default headers values
func NewGetUniverseGroupsServiceUnavailable() *GetUniverseGroupsServiceUnavailable {
	return &GetUniverseGroupsServiceUnavailable{}
}

/* GetUniverseGroupsServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type GetUniverseGroupsServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetUniverseGroupsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v1/universe/groups/][%d] getUniverseGroupsServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetUniverseGroupsServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *GetUniverseGroupsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseGroupsGatewayTimeout creates a GetUniverseGroupsGatewayTimeout with default headers values
func NewGetUniverseGroupsGatewayTimeout() *GetUniverseGroupsGatewayTimeout {
	return &GetUniverseGroupsGatewayTimeout{}
}

/* GetUniverseGroupsGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type GetUniverseGroupsGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetUniverseGroupsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/universe/groups/][%d] getUniverseGroupsGatewayTimeout  %+v", 504, o.Payload)
}
func (o *GetUniverseGroupsGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *GetUniverseGroupsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
