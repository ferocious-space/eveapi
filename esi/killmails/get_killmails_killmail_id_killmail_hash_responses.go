// Code generated by go-swagger; DO NOT EDIT.

package killmails

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// GetKillmailsKillmailIDKillmailHashReader is a Reader for the GetKillmailsKillmailIDKillmailHash structure.
type GetKillmailsKillmailIDKillmailHashReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKillmailsKillmailIDKillmailHashReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKillmailsKillmailIDKillmailHashOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetKillmailsKillmailIDKillmailHashNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetKillmailsKillmailIDKillmailHashBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewGetKillmailsKillmailIDKillmailHashEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetKillmailsKillmailIDKillmailHashUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetKillmailsKillmailIDKillmailHashInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetKillmailsKillmailIDKillmailHashServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetKillmailsKillmailIDKillmailHashGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetKillmailsKillmailIDKillmailHashOK creates a GetKillmailsKillmailIDKillmailHashOK with default headers values
func NewGetKillmailsKillmailIDKillmailHashOK() *GetKillmailsKillmailIDKillmailHashOK {
	return &GetKillmailsKillmailIDKillmailHashOK{}
}

/* GetKillmailsKillmailIDKillmailHashOK describes a response with status code 200, with default header values.

A killmail
*/
type GetKillmailsKillmailIDKillmailHashOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	Payload *GetKillmailsKillmailIDKillmailHashOKBody
}

func (o *GetKillmailsKillmailIDKillmailHashOK) Error() string {
	return fmt.Sprintf("[GET /v1/killmails/{killmail_id}/{killmail_hash}/][%d] getKillmailsKillmailIdKillmailHashOK  %+v", 200, o.Payload)
}
func (o *GetKillmailsKillmailIDKillmailHashOK) GetPayload() *GetKillmailsKillmailIDKillmailHashOKBody {
	return o.Payload
}

func (o *GetKillmailsKillmailIDKillmailHashOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	o.Payload = new(GetKillmailsKillmailIDKillmailHashOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKillmailsKillmailIDKillmailHashNotModified creates a GetKillmailsKillmailIDKillmailHashNotModified with default headers values
func NewGetKillmailsKillmailIDKillmailHashNotModified() *GetKillmailsKillmailIDKillmailHashNotModified {
	return &GetKillmailsKillmailIDKillmailHashNotModified{}
}

/* GetKillmailsKillmailIDKillmailHashNotModified describes a response with status code 304, with default header values.

Not modified
*/
type GetKillmailsKillmailIDKillmailHashNotModified struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetKillmailsKillmailIDKillmailHashNotModified) Error() string {
	return fmt.Sprintf("[GET /v1/killmails/{killmail_id}/{killmail_hash}/][%d] getKillmailsKillmailIdKillmailHashNotModified ", 304)
}

func (o *GetKillmailsKillmailIDKillmailHashNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	return nil
}

// NewGetKillmailsKillmailIDKillmailHashBadRequest creates a GetKillmailsKillmailIDKillmailHashBadRequest with default headers values
func NewGetKillmailsKillmailIDKillmailHashBadRequest() *GetKillmailsKillmailIDKillmailHashBadRequest {
	return &GetKillmailsKillmailIDKillmailHashBadRequest{}
}

/* GetKillmailsKillmailIDKillmailHashBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetKillmailsKillmailIDKillmailHashBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetKillmailsKillmailIDKillmailHashBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/killmails/{killmail_id}/{killmail_hash}/][%d] getKillmailsKillmailIdKillmailHashBadRequest  %+v", 400, o.Payload)
}
func (o *GetKillmailsKillmailIDKillmailHashBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *GetKillmailsKillmailIDKillmailHashBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKillmailsKillmailIDKillmailHashEnhanceYourCalm creates a GetKillmailsKillmailIDKillmailHashEnhanceYourCalm with default headers values
func NewGetKillmailsKillmailIDKillmailHashEnhanceYourCalm() *GetKillmailsKillmailIDKillmailHashEnhanceYourCalm {
	return &GetKillmailsKillmailIDKillmailHashEnhanceYourCalm{}
}

/* GetKillmailsKillmailIDKillmailHashEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type GetKillmailsKillmailIDKillmailHashEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetKillmailsKillmailIDKillmailHashEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /v1/killmails/{killmail_id}/{killmail_hash}/][%d] getKillmailsKillmailIdKillmailHashEnhanceYourCalm  %+v", 420, o.Payload)
}
func (o *GetKillmailsKillmailIDKillmailHashEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *GetKillmailsKillmailIDKillmailHashEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKillmailsKillmailIDKillmailHashUnprocessableEntity creates a GetKillmailsKillmailIDKillmailHashUnprocessableEntity with default headers values
func NewGetKillmailsKillmailIDKillmailHashUnprocessableEntity() *GetKillmailsKillmailIDKillmailHashUnprocessableEntity {
	return &GetKillmailsKillmailIDKillmailHashUnprocessableEntity{}
}

/* GetKillmailsKillmailIDKillmailHashUnprocessableEntity describes a response with status code 422, with default header values.

Invalid killmail_id and/or killmail_hash
*/
type GetKillmailsKillmailIDKillmailHashUnprocessableEntity struct {
	Payload *GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody
}

func (o *GetKillmailsKillmailIDKillmailHashUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /v1/killmails/{killmail_id}/{killmail_hash}/][%d] getKillmailsKillmailIdKillmailHashUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *GetKillmailsKillmailIDKillmailHashUnprocessableEntity) GetPayload() *GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody {
	return o.Payload
}

func (o *GetKillmailsKillmailIDKillmailHashUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKillmailsKillmailIDKillmailHashInternalServerError creates a GetKillmailsKillmailIDKillmailHashInternalServerError with default headers values
func NewGetKillmailsKillmailIDKillmailHashInternalServerError() *GetKillmailsKillmailIDKillmailHashInternalServerError {
	return &GetKillmailsKillmailIDKillmailHashInternalServerError{}
}

/* GetKillmailsKillmailIDKillmailHashInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetKillmailsKillmailIDKillmailHashInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetKillmailsKillmailIDKillmailHashInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/killmails/{killmail_id}/{killmail_hash}/][%d] getKillmailsKillmailIdKillmailHashInternalServerError  %+v", 500, o.Payload)
}
func (o *GetKillmailsKillmailIDKillmailHashInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetKillmailsKillmailIDKillmailHashInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKillmailsKillmailIDKillmailHashServiceUnavailable creates a GetKillmailsKillmailIDKillmailHashServiceUnavailable with default headers values
func NewGetKillmailsKillmailIDKillmailHashServiceUnavailable() *GetKillmailsKillmailIDKillmailHashServiceUnavailable {
	return &GetKillmailsKillmailIDKillmailHashServiceUnavailable{}
}

/* GetKillmailsKillmailIDKillmailHashServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type GetKillmailsKillmailIDKillmailHashServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetKillmailsKillmailIDKillmailHashServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v1/killmails/{killmail_id}/{killmail_hash}/][%d] getKillmailsKillmailIdKillmailHashServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetKillmailsKillmailIDKillmailHashServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *GetKillmailsKillmailIDKillmailHashServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKillmailsKillmailIDKillmailHashGatewayTimeout creates a GetKillmailsKillmailIDKillmailHashGatewayTimeout with default headers values
func NewGetKillmailsKillmailIDKillmailHashGatewayTimeout() *GetKillmailsKillmailIDKillmailHashGatewayTimeout {
	return &GetKillmailsKillmailIDKillmailHashGatewayTimeout{}
}

/* GetKillmailsKillmailIDKillmailHashGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type GetKillmailsKillmailIDKillmailHashGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetKillmailsKillmailIDKillmailHashGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/killmails/{killmail_id}/{killmail_hash}/][%d] getKillmailsKillmailIdKillmailHashGatewayTimeout  %+v", 504, o.Payload)
}
func (o *GetKillmailsKillmailIDKillmailHashGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *GetKillmailsKillmailIDKillmailHashGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetKillmailsKillmailIDKillmailHashOKBody get_killmails_killmail_id_killmail_hash_ok
//
// 200 ok object
swagger:model GetKillmailsKillmailIDKillmailHashOKBody
*/
type GetKillmailsKillmailIDKillmailHashOKBody struct {

	// get_killmails_killmail_id_killmail_hash_attackers
	//
	// attackers array
	// Required: true
	// Max Items: 10000
	Attackers []*GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0 `json:"attackers"`

	// get_killmails_killmail_id_killmail_hash_killmail_id
	//
	// ID of the killmail
	// Required: true
	KillmailID *int32 `json:"killmail_id"`

	// get_killmails_killmail_id_killmail_hash_killmail_time
	//
	// Time that the victim was killed and the killmail generated
	//
	// Required: true
	// Format: date-time
	KillmailTime *strfmt.DateTime `json:"killmail_time"`

	// get_killmails_killmail_id_killmail_hash_moon_id
	//
	// Moon if the kill took place at one
	MoonID int32 `json:"moon_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_solar_system_id
	//
	// Solar system that the kill took place in
	//
	// Required: true
	SolarSystemID *int32 `json:"solar_system_id"`

	// victim
	// Required: true
	Victim *GetKillmailsKillmailIDKillmailHashOKBodyVictim `json:"victim"`

	// get_killmails_killmail_id_killmail_hash_war_id
	//
	// War if the killmail is generated in relation to an official war
	//
	WarID int32 `json:"war_id,omitempty"`
}

// Validate validates this get killmails killmail ID killmail hash o k body
func (o *GetKillmailsKillmailIDKillmailHashOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttackers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKillmailID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKillmailTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolarSystemID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVictim(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBody) validateAttackers(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"attackers", "body", o.Attackers); err != nil {
		return err
	}

	iAttackersSize := int64(len(o.Attackers))

	if err := validate.MaxItems("getKillmailsKillmailIdKillmailHashOK"+"."+"attackers", "body", iAttackersSize, 10000); err != nil {
		return err
	}

	for i := 0; i < len(o.Attackers); i++ {
		if swag.IsZero(o.Attackers[i]) { // not required
			continue
		}

		if o.Attackers[i] != nil {
			if err := o.Attackers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "attackers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "attackers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBody) validateKillmailID(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"killmail_id", "body", o.KillmailID); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBody) validateKillmailTime(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"killmail_time", "body", o.KillmailTime); err != nil {
		return err
	}

	if err := validate.FormatOf("getKillmailsKillmailIdKillmailHashOK"+"."+"killmail_time", "body", "date-time", o.KillmailTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBody) validateSolarSystemID(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"solar_system_id", "body", o.SolarSystemID); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBody) validateVictim(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"victim", "body", o.Victim); err != nil {
		return err
	}

	if o.Victim != nil {
		if err := o.Victim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get killmails killmail ID killmail hash o k body based on the context it is used
func (o *GetKillmailsKillmailIDKillmailHashOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttackers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVictim(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBody) contextValidateAttackers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Attackers); i++ {

		if o.Attackers[i] != nil {
			if err := o.Attackers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "attackers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "attackers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBody) contextValidateVictim(ctx context.Context, formats strfmt.Registry) error {

	if o.Victim != nil {
		if err := o.Victim.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBody) UnmarshalBinary(b []byte) error {
	var res GetKillmailsKillmailIDKillmailHashOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0 get_killmails_killmail_id_killmail_hash_attacker
//
// attacker object
swagger:model GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0
*/
type GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0 struct {

	// get_killmails_killmail_id_killmail_hash_alliance_id
	//
	// alliance_id integer
	AllianceID int32 `json:"alliance_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_character_id
	//
	// character_id integer
	CharacterID int32 `json:"character_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_corporation_id
	//
	// corporation_id integer
	CorporationID int32 `json:"corporation_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_damage_done
	//
	// damage_done integer
	// Required: true
	DamageDone *int32 `json:"damage_done"`

	// get_killmails_killmail_id_killmail_hash_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_final_blow
	//
	// Was the attacker the one to achieve the final blow
	//
	// Required: true
	FinalBlow *bool `json:"final_blow"`

	// get_killmails_killmail_id_killmail_hash_security_status
	//
	// Security status for the attacker
	//
	// Required: true
	SecurityStatus *float32 `json:"security_status"`

	// get_killmails_killmail_id_killmail_hash_ship_type_id
	//
	// What ship was the attacker flying
	//
	ShipTypeID int32 `json:"ship_type_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_weapon_type_id
	//
	// What weapon was used by the attacker for the kill
	//
	WeaponTypeID int32 `json:"weapon_type_id,omitempty"`
}

// Validate validates this get killmails killmail ID killmail hash o k body attackers items0
func (o *GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDamageDone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFinalBlow(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0) validateDamageDone(formats strfmt.Registry) error {

	if err := validate.Required("damage_done", "body", o.DamageDone); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0) validateFinalBlow(formats strfmt.Registry) error {

	if err := validate.Required("final_blow", "body", o.FinalBlow); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0) validateSecurityStatus(formats strfmt.Registry) error {

	if err := validate.Required("security_status", "body", o.SecurityStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get killmails killmail ID killmail hash o k body attackers items0 based on context it is used
func (o *GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0) UnmarshalBinary(b []byte) error {
	var res GetKillmailsKillmailIDKillmailHashOKBodyAttackersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetKillmailsKillmailIDKillmailHashOKBodyVictim get_killmails_killmail_id_killmail_hash_victim
//
// victim object
swagger:model GetKillmailsKillmailIDKillmailHashOKBodyVictim
*/
type GetKillmailsKillmailIDKillmailHashOKBodyVictim struct {

	// get_killmails_killmail_id_killmail_hash_victim_alliance_id
	//
	// alliance_id integer
	AllianceID int32 `json:"alliance_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_victim_character_id
	//
	// character_id integer
	CharacterID int32 `json:"character_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_victim_corporation_id
	//
	// corporation_id integer
	CorporationID int32 `json:"corporation_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_damage_taken
	//
	// How much total damage was taken by the victim
	//
	// Required: true
	DamageTaken *int32 `json:"damage_taken"`

	// get_killmails_killmail_id_killmail_hash_victim_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_items
	//
	// items array
	// Max Items: 10000
	Items []*GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0 `json:"items"`

	// position
	Position *GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition `json:"position,omitempty"`

	// get_killmails_killmail_id_killmail_hash_victim_ship_type_id
	//
	// The ship that the victim was piloting and was destroyed
	//
	// Required: true
	ShipTypeID *int32 `json:"ship_type_id"`
}

// Validate validates this get killmails killmail ID killmail hash o k body victim
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDamageTaken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) validateDamageTaken(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"victim"+"."+"damage_taken", "body", o.DamageTaken); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	iItemsSize := int64(len(o.Items))

	if err := validate.MaxItems("getKillmailsKillmailIdKillmailHashOK"+"."+"victim"+"."+"items", "body", iItemsSize, 10000); err != nil {
		return err
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(o.Position) { // not required
		return nil
	}

	if o.Position != nil {
		if err := o.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim" + "." + "position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim" + "." + "position")
			}
			return err
		}
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) validateShipTypeID(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"victim"+"."+"ship_type_id", "body", o.ShipTypeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get killmails killmail ID killmail hash o k body victim based on the context it is used
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if o.Position != nil {
		if err := o.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim" + "." + "position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getKillmailsKillmailIdKillmailHashOK" + "." + "victim" + "." + "position")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictim) UnmarshalBinary(b []byte) error {
	var res GetKillmailsKillmailIDKillmailHashOKBodyVictim
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0 get_killmails_killmail_id_killmail_hash_item
//
// item object
swagger:model GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0
*/
type GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0 struct {

	// get_killmails_killmail_id_killmail_hash_flag
	//
	// Flag for the location of the item
	//
	// Required: true
	Flag *int32 `json:"flag"`

	// get_killmails_killmail_id_killmail_hash_item_type_id
	//
	// item_type_id integer
	// Required: true
	ItemTypeID *int32 `json:"item_type_id"`

	// get_killmails_killmail_id_killmail_hash_item_items
	//
	// items array
	// Max Items: 10000
	Items []*GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0 `json:"items"`

	// get_killmails_killmail_id_killmail_hash_quantity_destroyed
	//
	// How many of the item were destroyed if any
	//
	QuantityDestroyed int64 `json:"quantity_destroyed,omitempty"`

	// get_killmails_killmail_id_killmail_hash_quantity_dropped
	//
	// How many of the item were dropped if any
	//
	QuantityDropped int64 `json:"quantity_dropped,omitempty"`

	// get_killmails_killmail_id_killmail_hash_singleton
	//
	// singleton integer
	// Required: true
	Singleton *int32 `json:"singleton"`
}

// Validate validates this get killmails killmail ID killmail hash o k body victim items items0
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateItemTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSingleton(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0) validateFlag(formats strfmt.Registry) error {

	if err := validate.Required("flag", "body", o.Flag); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0) validateItemTypeID(formats strfmt.Registry) error {

	if err := validate.Required("item_type_id", "body", o.ItemTypeID); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	iItemsSize := int64(len(o.Items))

	if err := validate.MaxItems("items", "body", iItemsSize, 10000); err != nil {
		return err
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0) validateSingleton(formats strfmt.Registry) error {

	if err := validate.Required("singleton", "body", o.Singleton); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get killmails killmail ID killmail hash o k body victim items items0 based on the context it is used
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0) UnmarshalBinary(b []byte) error {
	var res GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0 get_killmails_killmail_id_killmail_hash_items_item
//
// item object
swagger:model GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0
*/
type GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0 struct {

	// get_killmails_killmail_id_killmail_hash_item_flag
	//
	// flag integer
	// Required: true
	Flag *int32 `json:"flag"`

	// get_killmails_killmail_id_killmail_hash_item_item_type_id
	//
	// item_type_id integer
	// Required: true
	ItemTypeID *int32 `json:"item_type_id"`

	// get_killmails_killmail_id_killmail_hash_item_quantity_destroyed
	//
	// quantity_destroyed integer
	QuantityDestroyed int64 `json:"quantity_destroyed,omitempty"`

	// get_killmails_killmail_id_killmail_hash_item_quantity_dropped
	//
	// quantity_dropped integer
	QuantityDropped int64 `json:"quantity_dropped,omitempty"`

	// get_killmails_killmail_id_killmail_hash_item_singleton
	//
	// singleton integer
	// Required: true
	Singleton *int32 `json:"singleton"`
}

// Validate validates this get killmails killmail ID killmail hash o k body victim items items0 items items0
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateItemTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSingleton(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0) validateFlag(formats strfmt.Registry) error {

	if err := validate.Required("flag", "body", o.Flag); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0) validateItemTypeID(formats strfmt.Registry) error {

	if err := validate.Required("item_type_id", "body", o.ItemTypeID); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0) validateSingleton(formats strfmt.Registry) error {

	if err := validate.Required("singleton", "body", o.Singleton); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get killmails killmail ID killmail hash o k body victim items items0 items items0 based on context it is used
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0) UnmarshalBinary(b []byte) error {
	var res GetKillmailsKillmailIDKillmailHashOKBodyVictimItemsItems0ItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition get_killmails_killmail_id_killmail_hash_position
//
// Coordinates of the victim in Cartesian space relative to the Sun
//
swagger:model GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition
*/
type GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition struct {

	// get_killmails_killmail_id_killmail_hash_x
	//
	// x number
	// Required: true
	X *float64 `json:"x"`

	// get_killmails_killmail_id_killmail_hash_y
	//
	// y number
	// Required: true
	Y *float64 `json:"y"`

	// get_killmails_killmail_id_killmail_hash_z
	//
	// z number
	// Required: true
	Z *float64 `json:"z"`
}

// Validate validates this get killmails killmail ID killmail hash o k body victim position
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateX(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateY(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateZ(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition) validateX(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"victim"+"."+"position"+"."+"x", "body", o.X); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition) validateY(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"victim"+"."+"position"+"."+"y", "body", o.Y); err != nil {
		return err
	}

	return nil
}

func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition) validateZ(formats strfmt.Registry) error {

	if err := validate.Required("getKillmailsKillmailIdKillmailHashOK"+"."+"victim"+"."+"position"+"."+"z", "body", o.Z); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get killmails killmail ID killmail hash o k body victim position based on context it is used
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition) UnmarshalBinary(b []byte) error {
	var res GetKillmailsKillmailIDKillmailHashOKBodyVictimPosition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody get_killmails_killmail_id_killmail_hash_unprocessable_entity
//
// Unprocessable entity
swagger:model GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody
*/
type GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody struct {

	// get_killmails_killmail_id_killmail_hash_422_unprocessable_entity
	//
	// Unprocessable entity message
	Error string `json:"error,omitempty"`
}

// Validate validates this get killmails killmail ID killmail hash unprocessable entity body
func (o *GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get killmails killmail ID killmail hash unprocessable entity body based on context it is used
func (o *GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res GetKillmailsKillmailIDKillmailHashUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
