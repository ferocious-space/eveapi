/*
 *    Copyright 2021 FerociousBite and Contributors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// Code generated by go-swagger; DO NOT EDIT.

package killmails

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new killmails API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for killmails API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCharactersCharacterIDKillmailsRecent(params *GetCharactersCharacterIDKillmailsRecentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDKillmailsRecentOK, error)

	GetCorporationsCorporationIDKillmailsRecent(params *GetCorporationsCorporationIDKillmailsRecentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDKillmailsRecentOK, error)

	GetKillmailsKillmailIDKillmailHash(params *GetKillmailsKillmailIDKillmailHashParams, opts ...ClientOption) (*GetKillmailsKillmailIDKillmailHashOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetCharactersCharacterIDKillmailsRecent gets a character s recent kills and losses

  Return a list of a character's kills and losses going back 90 days

---

This route is cached for up to 300 seconds
*/
func (a *Client) GetCharactersCharacterIDKillmailsRecent(params *GetCharactersCharacterIDKillmailsRecentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDKillmailsRecentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDKillmailsRecentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_killmails_recent",
		Method:             "GET",
		PathPattern:        "/v1/characters/{character_id}/killmails/recent/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDKillmailsRecentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDKillmailsRecentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_killmails_recent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCorporationsCorporationIDKillmailsRecent gets a corporation s recent kills and losses

  Get a list of a corporation's kills and losses going back 90 days

---

This route is cached for up to 300 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDKillmailsRecent(params *GetCorporationsCorporationIDKillmailsRecentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDKillmailsRecentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDKillmailsRecentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_killmails_recent",
		Method:             "GET",
		PathPattern:        "/v1/corporations/{corporation_id}/killmails/recent/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDKillmailsRecentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDKillmailsRecentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_killmails_recent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKillmailsKillmailIDKillmailHash gets a single killmail

  Return a single killmail from its ID and hash

---

This route is cached for up to 30758400 seconds
*/
func (a *Client) GetKillmailsKillmailIDKillmailHash(params *GetKillmailsKillmailIDKillmailHashParams, opts ...ClientOption) (*GetKillmailsKillmailIDKillmailHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKillmailsKillmailIDKillmailHashParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_killmails_killmail_id_killmail_hash",
		Method:             "GET",
		PathPattern:        "/v1/killmails/{killmail_id}/{killmail_hash}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKillmailsKillmailIDKillmailHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKillmailsKillmailIDKillmailHashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_killmails_killmail_id_killmail_hash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
