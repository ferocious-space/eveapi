// Code generated by go-swagger; DO NOT EDIT.

package calendar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new calendar API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for calendar API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCharactersCharacterIDCalendar(params *GetCharactersCharacterIDCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDCalendarOK, error)

	GetCharactersCharacterIDCalendarEventID(params *GetCharactersCharacterIDCalendarEventIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDCalendarEventIDOK, error)

	GetCharactersCharacterIDCalendarEventIDAttendees(params *GetCharactersCharacterIDCalendarEventIDAttendeesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDCalendarEventIDAttendeesOK, error)

	PutCharactersCharacterIDCalendarEventID(params *PutCharactersCharacterIDCalendarEventIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutCharactersCharacterIDCalendarEventIDNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetCharactersCharacterIDCalendar lists calendar event summaries

	Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event

---

This route is cached for up to 5 seconds
*/
func (a *Client) GetCharactersCharacterIDCalendar(params *GetCharactersCharacterIDCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDCalendarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDCalendarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_calendar",
		Method:             "GET",
		PathPattern:        "/v1/characters/{character_id}/calendar/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDCalendarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDCalendarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_calendar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCharactersCharacterIDCalendarEventID gets an event

	Get all the information for a specific event

---

This route is cached for up to 5 seconds
*/
func (a *Client) GetCharactersCharacterIDCalendarEventID(params *GetCharactersCharacterIDCalendarEventIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDCalendarEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDCalendarEventIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_calendar_event_id",
		Method:             "GET",
		PathPattern:        "/v3/characters/{character_id}/calendar/{event_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDCalendarEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDCalendarEventIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_calendar_event_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCharactersCharacterIDCalendarEventIDAttendees gets attendees

	Get all invited attendees for a given event

---

This route is cached for up to 600 seconds
*/
func (a *Client) GetCharactersCharacterIDCalendarEventIDAttendees(params *GetCharactersCharacterIDCalendarEventIDAttendeesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDCalendarEventIDAttendeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDCalendarEventIDAttendeesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_calendar_event_id_attendees",
		Method:             "GET",
		PathPattern:        "/v1/characters/{character_id}/calendar/{event_id}/attendees/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDCalendarEventIDAttendeesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDCalendarEventIDAttendeesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_calendar_event_id_attendees: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PutCharactersCharacterIDCalendarEventID responds to an event

	Set your response status to an event

---

This route is cached for up to 5 seconds
*/
func (a *Client) PutCharactersCharacterIDCalendarEventID(params *PutCharactersCharacterIDCalendarEventIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutCharactersCharacterIDCalendarEventIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCharactersCharacterIDCalendarEventIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put_characters_character_id_calendar_event_id",
		Method:             "PUT",
		PathPattern:        "/v3/characters/{character_id}/calendar/{event_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCharactersCharacterIDCalendarEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCharactersCharacterIDCalendarEventIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put_characters_character_id_calendar_event_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
