// Code generated by go-swagger; DO NOT EDIT.

package calendar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// GetCharactersCharacterIDCalendarEventIDReader is a Reader for the GetCharactersCharacterIDCalendarEventID structure.
type GetCharactersCharacterIDCalendarEventIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCharactersCharacterIDCalendarEventIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCharactersCharacterIDCalendarEventIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetCharactersCharacterIDCalendarEventIDNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetCharactersCharacterIDCalendarEventIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCharactersCharacterIDCalendarEventIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCharactersCharacterIDCalendarEventIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCharactersCharacterIDCalendarEventIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewGetCharactersCharacterIDCalendarEventIDEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCharactersCharacterIDCalendarEventIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCharactersCharacterIDCalendarEventIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetCharactersCharacterIDCalendarEventIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCharactersCharacterIDCalendarEventIDOK creates a GetCharactersCharacterIDCalendarEventIDOK with default headers values
func NewGetCharactersCharacterIDCalendarEventIDOK() *GetCharactersCharacterIDCalendarEventIDOK {
	return &GetCharactersCharacterIDCalendarEventIDOK{}
}

/* GetCharactersCharacterIDCalendarEventIDOK describes a response with status code 200, with default header values.

Full details of a specific event
*/
type GetCharactersCharacterIDCalendarEventIDOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	Payload *GetCharactersCharacterIDCalendarEventIDOKBody
}

func (o *GetCharactersCharacterIDCalendarEventIDOK) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdOK  %+v", 200, o.Payload)
}
func (o *GetCharactersCharacterIDCalendarEventIDOK) GetPayload() *GetCharactersCharacterIDCalendarEventIDOKBody {
	return o.Payload
}

func (o *GetCharactersCharacterIDCalendarEventIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	o.Payload = new(GetCharactersCharacterIDCalendarEventIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDCalendarEventIDNotModified creates a GetCharactersCharacterIDCalendarEventIDNotModified with default headers values
func NewGetCharactersCharacterIDCalendarEventIDNotModified() *GetCharactersCharacterIDCalendarEventIDNotModified {
	return &GetCharactersCharacterIDCalendarEventIDNotModified{}
}

/* GetCharactersCharacterIDCalendarEventIDNotModified describes a response with status code 304, with default header values.

Not modified
*/
type GetCharactersCharacterIDCalendarEventIDNotModified struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetCharactersCharacterIDCalendarEventIDNotModified) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdNotModified ", 304)
}

func (o *GetCharactersCharacterIDCalendarEventIDNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	return nil
}

// NewGetCharactersCharacterIDCalendarEventIDBadRequest creates a GetCharactersCharacterIDCalendarEventIDBadRequest with default headers values
func NewGetCharactersCharacterIDCalendarEventIDBadRequest() *GetCharactersCharacterIDCalendarEventIDBadRequest {
	return &GetCharactersCharacterIDCalendarEventIDBadRequest{}
}

/* GetCharactersCharacterIDCalendarEventIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetCharactersCharacterIDCalendarEventIDBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetCharactersCharacterIDCalendarEventIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdBadRequest  %+v", 400, o.Payload)
}
func (o *GetCharactersCharacterIDCalendarEventIDBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *GetCharactersCharacterIDCalendarEventIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDCalendarEventIDUnauthorized creates a GetCharactersCharacterIDCalendarEventIDUnauthorized with default headers values
func NewGetCharactersCharacterIDCalendarEventIDUnauthorized() *GetCharactersCharacterIDCalendarEventIDUnauthorized {
	return &GetCharactersCharacterIDCalendarEventIDUnauthorized{}
}

/* GetCharactersCharacterIDCalendarEventIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCharactersCharacterIDCalendarEventIDUnauthorized struct {
	Payload *models.Unauthorized
}

func (o *GetCharactersCharacterIDCalendarEventIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdUnauthorized  %+v", 401, o.Payload)
}
func (o *GetCharactersCharacterIDCalendarEventIDUnauthorized) GetPayload() *models.Unauthorized {
	return o.Payload
}

func (o *GetCharactersCharacterIDCalendarEventIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDCalendarEventIDForbidden creates a GetCharactersCharacterIDCalendarEventIDForbidden with default headers values
func NewGetCharactersCharacterIDCalendarEventIDForbidden() *GetCharactersCharacterIDCalendarEventIDForbidden {
	return &GetCharactersCharacterIDCalendarEventIDForbidden{}
}

/* GetCharactersCharacterIDCalendarEventIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCharactersCharacterIDCalendarEventIDForbidden struct {
	Payload *models.Forbidden
}

func (o *GetCharactersCharacterIDCalendarEventIDForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdForbidden  %+v", 403, o.Payload)
}
func (o *GetCharactersCharacterIDCalendarEventIDForbidden) GetPayload() *models.Forbidden {
	return o.Payload
}

func (o *GetCharactersCharacterIDCalendarEventIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDCalendarEventIDNotFound creates a GetCharactersCharacterIDCalendarEventIDNotFound with default headers values
func NewGetCharactersCharacterIDCalendarEventIDNotFound() *GetCharactersCharacterIDCalendarEventIDNotFound {
	return &GetCharactersCharacterIDCalendarEventIDNotFound{}
}

/* GetCharactersCharacterIDCalendarEventIDNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetCharactersCharacterIDCalendarEventIDNotFound struct {
	Payload *GetCharactersCharacterIDCalendarEventIDNotFoundBody
}

func (o *GetCharactersCharacterIDCalendarEventIDNotFound) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdNotFound  %+v", 404, o.Payload)
}
func (o *GetCharactersCharacterIDCalendarEventIDNotFound) GetPayload() *GetCharactersCharacterIDCalendarEventIDNotFoundBody {
	return o.Payload
}

func (o *GetCharactersCharacterIDCalendarEventIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCharactersCharacterIDCalendarEventIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDCalendarEventIDEnhanceYourCalm creates a GetCharactersCharacterIDCalendarEventIDEnhanceYourCalm with default headers values
func NewGetCharactersCharacterIDCalendarEventIDEnhanceYourCalm() *GetCharactersCharacterIDCalendarEventIDEnhanceYourCalm {
	return &GetCharactersCharacterIDCalendarEventIDEnhanceYourCalm{}
}

/* GetCharactersCharacterIDCalendarEventIDEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type GetCharactersCharacterIDCalendarEventIDEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetCharactersCharacterIDCalendarEventIDEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdEnhanceYourCalm  %+v", 420, o.Payload)
}
func (o *GetCharactersCharacterIDCalendarEventIDEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *GetCharactersCharacterIDCalendarEventIDEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDCalendarEventIDInternalServerError creates a GetCharactersCharacterIDCalendarEventIDInternalServerError with default headers values
func NewGetCharactersCharacterIDCalendarEventIDInternalServerError() *GetCharactersCharacterIDCalendarEventIDInternalServerError {
	return &GetCharactersCharacterIDCalendarEventIDInternalServerError{}
}

/* GetCharactersCharacterIDCalendarEventIDInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetCharactersCharacterIDCalendarEventIDInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetCharactersCharacterIDCalendarEventIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdInternalServerError  %+v", 500, o.Payload)
}
func (o *GetCharactersCharacterIDCalendarEventIDInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetCharactersCharacterIDCalendarEventIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDCalendarEventIDServiceUnavailable creates a GetCharactersCharacterIDCalendarEventIDServiceUnavailable with default headers values
func NewGetCharactersCharacterIDCalendarEventIDServiceUnavailable() *GetCharactersCharacterIDCalendarEventIDServiceUnavailable {
	return &GetCharactersCharacterIDCalendarEventIDServiceUnavailable{}
}

/* GetCharactersCharacterIDCalendarEventIDServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type GetCharactersCharacterIDCalendarEventIDServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetCharactersCharacterIDCalendarEventIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetCharactersCharacterIDCalendarEventIDServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *GetCharactersCharacterIDCalendarEventIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDCalendarEventIDGatewayTimeout creates a GetCharactersCharacterIDCalendarEventIDGatewayTimeout with default headers values
func NewGetCharactersCharacterIDCalendarEventIDGatewayTimeout() *GetCharactersCharacterIDCalendarEventIDGatewayTimeout {
	return &GetCharactersCharacterIDCalendarEventIDGatewayTimeout{}
}

/* GetCharactersCharacterIDCalendarEventIDGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type GetCharactersCharacterIDCalendarEventIDGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetCharactersCharacterIDCalendarEventIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v3/characters/{character_id}/calendar/{event_id}/][%d] getCharactersCharacterIdCalendarEventIdGatewayTimeout  %+v", 504, o.Payload)
}
func (o *GetCharactersCharacterIDCalendarEventIDGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *GetCharactersCharacterIDCalendarEventIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetCharactersCharacterIDCalendarEventIDNotFoundBody get_characters_character_id_calendar_event_id_not_found
//
// Not found
swagger:model GetCharactersCharacterIDCalendarEventIDNotFoundBody
*/
type GetCharactersCharacterIDCalendarEventIDNotFoundBody struct {

	// get_characters_character_id_calendar_event_id_404_not_found
	//
	// Not found message
	Error string `json:"error,omitempty"`
}

// Validate validates this get characters character ID calendar event ID not found body
func (o *GetCharactersCharacterIDCalendarEventIDNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get characters character ID calendar event ID not found body based on context it is used
func (o *GetCharactersCharacterIDCalendarEventIDNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCharactersCharacterIDCalendarEventIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCharactersCharacterIDCalendarEventIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDCalendarEventIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCharactersCharacterIDCalendarEventIDOKBody get_characters_character_id_calendar_event_id_ok
//
// Full details of a specific event
swagger:model GetCharactersCharacterIDCalendarEventIDOKBody
*/
type GetCharactersCharacterIDCalendarEventIDOKBody struct {

	// get_characters_character_id_calendar_event_id_date
	//
	// date string
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// get_characters_character_id_calendar_event_id_duration
	//
	// Length in minutes
	// Required: true
	Duration *int32 `json:"duration"`

	// get_characters_character_id_calendar_event_id_event_id
	//
	// event_id integer
	// Required: true
	EventID *int32 `json:"event_id"`

	// get_characters_character_id_calendar_event_id_importance
	//
	// importance integer
	// Required: true
	Importance *int32 `json:"importance"`

	// get_characters_character_id_calendar_event_id_owner_id
	//
	// owner_id integer
	// Required: true
	OwnerID *int32 `json:"owner_id"`

	// get_characters_character_id_calendar_event_id_owner_name
	//
	// owner_name string
	// Required: true
	OwnerName *string `json:"owner_name"`

	// get_characters_character_id_calendar_event_id_owner_type
	//
	// owner_type string
	// Required: true
	// Enum: [eve_server corporation faction character alliance]
	OwnerType *string `json:"owner_type"`

	// get_characters_character_id_calendar_event_id_response
	//
	// response string
	// Required: true
	Response *string `json:"response"`

	// get_characters_character_id_calendar_event_id_text
	//
	// text string
	// Required: true
	Text *string `json:"text"`

	// get_characters_character_id_calendar_event_id_title
	//
	// title string
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this get characters character ID calendar event ID o k body
func (o *GetCharactersCharacterIDCalendarEventIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImportance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwnerName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwnerType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateText(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"date", "body", o.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("getCharactersCharacterIdCalendarEventIdOK"+"."+"date", "body", "date-time", o.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"duration", "body", o.Duration); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateImportance(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"importance", "body", o.Importance); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"owner_id", "body", o.OwnerID); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateOwnerName(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"owner_name", "body", o.OwnerName); err != nil {
		return err
	}

	return nil
}

var getCharactersCharacterIdCalendarEventIdOKBodyTypeOwnerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eve_server","corporation","faction","character","alliance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCharactersCharacterIdCalendarEventIdOKBodyTypeOwnerTypePropEnum = append(getCharactersCharacterIdCalendarEventIdOKBodyTypeOwnerTypePropEnum, v)
	}
}

const (

	// GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeEveServer captures enum value "eve_server"
	GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeEveServer string = "eve_server"

	// GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeCorporation captures enum value "corporation"
	GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeCorporation string = "corporation"

	// GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeFaction captures enum value "faction"
	GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeFaction string = "faction"

	// GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeCharacter captures enum value "character"
	GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeCharacter string = "character"

	// GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeAlliance captures enum value "alliance"
	GetCharactersCharacterIDCalendarEventIDOKBodyOwnerTypeAlliance string = "alliance"
)

// prop value enum
func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateOwnerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getCharactersCharacterIdCalendarEventIdOKBodyTypeOwnerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateOwnerType(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"owner_type", "body", o.OwnerType); err != nil {
		return err
	}

	// value enum
	if err := o.validateOwnerTypeEnum("getCharactersCharacterIdCalendarEventIdOK"+"."+"owner_type", "body", *o.OwnerType); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateResponse(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"response", "body", o.Response); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateText(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"text", "body", o.Text); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDCalendarEventIDOKBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdCalendarEventIdOK"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get characters character ID calendar event ID o k body based on context it is used
func (o *GetCharactersCharacterIDCalendarEventIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCharactersCharacterIDCalendarEventIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCharactersCharacterIDCalendarEventIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDCalendarEventIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
