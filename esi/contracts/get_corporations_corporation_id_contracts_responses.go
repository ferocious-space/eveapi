// Code generated by go-swagger; DO NOT EDIT.

package contracts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// GetCorporationsCorporationIDContractsReader is a Reader for the GetCorporationsCorporationIDContracts structure.
type GetCorporationsCorporationIDContractsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCorporationsCorporationIDContractsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCorporationsCorporationIDContractsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetCorporationsCorporationIDContractsNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetCorporationsCorporationIDContractsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCorporationsCorporationIDContractsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCorporationsCorporationIDContractsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewGetCorporationsCorporationIDContractsEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCorporationsCorporationIDContractsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCorporationsCorporationIDContractsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetCorporationsCorporationIDContractsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCorporationsCorporationIDContractsOK creates a GetCorporationsCorporationIDContractsOK with default headers values
func NewGetCorporationsCorporationIDContractsOK() *GetCorporationsCorporationIDContractsOK {
	var (
		// initialize headers with default values
		xPagesDefault = int32(1)
	)

	return &GetCorporationsCorporationIDContractsOK{

		XPages: xPagesDefault,
	}
}

/*
GetCorporationsCorporationIDContractsOK describes a response with status code 200, with default header values.

A list of contracts
*/
type GetCorporationsCorporationIDContractsOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	/* Maximum page number

	   Format: int32
	   Default: 1
	*/
	XPages int32

	Payload []*GetCorporationsCorporationIDContractsOKBodyItems0
}

// IsSuccess returns true when this get corporations corporation Id contracts o k response has a 2xx status code
func (o *GetCorporationsCorporationIDContractsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get corporations corporation Id contracts o k response has a 3xx status code
func (o *GetCorporationsCorporationIDContractsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get corporations corporation Id contracts o k response has a 4xx status code
func (o *GetCorporationsCorporationIDContractsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get corporations corporation Id contracts o k response has a 5xx status code
func (o *GetCorporationsCorporationIDContractsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get corporations corporation Id contracts o k response a status code equal to that given
func (o *GetCorporationsCorporationIDContractsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get corporations corporation Id contracts o k response
func (o *GetCorporationsCorporationIDContractsOK) Code() int {
	return 200
}

func (o *GetCorporationsCorporationIDContractsOK) Error() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsOK  %+v", 200, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsOK) String() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsOK  %+v", 200, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsOK) GetPayload() []*GetCorporationsCorporationIDContractsOKBodyItems0 {
	return o.Payload
}

func (o *GetCorporationsCorporationIDContractsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	// hydrates response header X-Pages
	hdrXPages := response.GetHeader("X-Pages")

	if hdrXPages != "" {
		valxPages, err := swag.ConvertInt32(hdrXPages)
		if err != nil {
			return errors.InvalidType("X-Pages", "header", "int32", hdrXPages)
		}
		o.XPages = valxPages
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContractsNotModified creates a GetCorporationsCorporationIDContractsNotModified with default headers values
func NewGetCorporationsCorporationIDContractsNotModified() *GetCorporationsCorporationIDContractsNotModified {
	return &GetCorporationsCorporationIDContractsNotModified{}
}

/*
GetCorporationsCorporationIDContractsNotModified describes a response with status code 304, with default header values.

Not modified
*/
type GetCorporationsCorporationIDContractsNotModified struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string
}

// IsSuccess returns true when this get corporations corporation Id contracts not modified response has a 2xx status code
func (o *GetCorporationsCorporationIDContractsNotModified) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get corporations corporation Id contracts not modified response has a 3xx status code
func (o *GetCorporationsCorporationIDContractsNotModified) IsRedirect() bool {
	return true
}

// IsClientError returns true when this get corporations corporation Id contracts not modified response has a 4xx status code
func (o *GetCorporationsCorporationIDContractsNotModified) IsClientError() bool {
	return false
}

// IsServerError returns true when this get corporations corporation Id contracts not modified response has a 5xx status code
func (o *GetCorporationsCorporationIDContractsNotModified) IsServerError() bool {
	return false
}

// IsCode returns true when this get corporations corporation Id contracts not modified response a status code equal to that given
func (o *GetCorporationsCorporationIDContractsNotModified) IsCode(code int) bool {
	return code == 304
}

// Code gets the status code for the get corporations corporation Id contracts not modified response
func (o *GetCorporationsCorporationIDContractsNotModified) Code() int {
	return 304
}

func (o *GetCorporationsCorporationIDContractsNotModified) Error() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsNotModified ", 304)
}

func (o *GetCorporationsCorporationIDContractsNotModified) String() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsNotModified ", 304)
}

func (o *GetCorporationsCorporationIDContractsNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	return nil
}

// NewGetCorporationsCorporationIDContractsBadRequest creates a GetCorporationsCorporationIDContractsBadRequest with default headers values
func NewGetCorporationsCorporationIDContractsBadRequest() *GetCorporationsCorporationIDContractsBadRequest {
	return &GetCorporationsCorporationIDContractsBadRequest{}
}

/*
GetCorporationsCorporationIDContractsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetCorporationsCorporationIDContractsBadRequest struct {
	Payload *models.BadRequest
}

// IsSuccess returns true when this get corporations corporation Id contracts bad request response has a 2xx status code
func (o *GetCorporationsCorporationIDContractsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get corporations corporation Id contracts bad request response has a 3xx status code
func (o *GetCorporationsCorporationIDContractsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get corporations corporation Id contracts bad request response has a 4xx status code
func (o *GetCorporationsCorporationIDContractsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get corporations corporation Id contracts bad request response has a 5xx status code
func (o *GetCorporationsCorporationIDContractsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get corporations corporation Id contracts bad request response a status code equal to that given
func (o *GetCorporationsCorporationIDContractsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get corporations corporation Id contracts bad request response
func (o *GetCorporationsCorporationIDContractsBadRequest) Code() int {
	return 400
}

func (o *GetCorporationsCorporationIDContractsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *GetCorporationsCorporationIDContractsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContractsUnauthorized creates a GetCorporationsCorporationIDContractsUnauthorized with default headers values
func NewGetCorporationsCorporationIDContractsUnauthorized() *GetCorporationsCorporationIDContractsUnauthorized {
	return &GetCorporationsCorporationIDContractsUnauthorized{}
}

/*
GetCorporationsCorporationIDContractsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCorporationsCorporationIDContractsUnauthorized struct {
	Payload *models.Unauthorized
}

// IsSuccess returns true when this get corporations corporation Id contracts unauthorized response has a 2xx status code
func (o *GetCorporationsCorporationIDContractsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get corporations corporation Id contracts unauthorized response has a 3xx status code
func (o *GetCorporationsCorporationIDContractsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get corporations corporation Id contracts unauthorized response has a 4xx status code
func (o *GetCorporationsCorporationIDContractsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get corporations corporation Id contracts unauthorized response has a 5xx status code
func (o *GetCorporationsCorporationIDContractsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get corporations corporation Id contracts unauthorized response a status code equal to that given
func (o *GetCorporationsCorporationIDContractsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get corporations corporation Id contracts unauthorized response
func (o *GetCorporationsCorporationIDContractsUnauthorized) Code() int {
	return 401
}

func (o *GetCorporationsCorporationIDContractsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsUnauthorized) GetPayload() *models.Unauthorized {
	return o.Payload
}

func (o *GetCorporationsCorporationIDContractsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContractsForbidden creates a GetCorporationsCorporationIDContractsForbidden with default headers values
func NewGetCorporationsCorporationIDContractsForbidden() *GetCorporationsCorporationIDContractsForbidden {
	return &GetCorporationsCorporationIDContractsForbidden{}
}

/*
GetCorporationsCorporationIDContractsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCorporationsCorporationIDContractsForbidden struct {
	Payload *models.Forbidden
}

// IsSuccess returns true when this get corporations corporation Id contracts forbidden response has a 2xx status code
func (o *GetCorporationsCorporationIDContractsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get corporations corporation Id contracts forbidden response has a 3xx status code
func (o *GetCorporationsCorporationIDContractsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get corporations corporation Id contracts forbidden response has a 4xx status code
func (o *GetCorporationsCorporationIDContractsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get corporations corporation Id contracts forbidden response has a 5xx status code
func (o *GetCorporationsCorporationIDContractsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get corporations corporation Id contracts forbidden response a status code equal to that given
func (o *GetCorporationsCorporationIDContractsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get corporations corporation Id contracts forbidden response
func (o *GetCorporationsCorporationIDContractsForbidden) Code() int {
	return 403
}

func (o *GetCorporationsCorporationIDContractsForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsForbidden  %+v", 403, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsForbidden) String() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsForbidden  %+v", 403, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsForbidden) GetPayload() *models.Forbidden {
	return o.Payload
}

func (o *GetCorporationsCorporationIDContractsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContractsEnhanceYourCalm creates a GetCorporationsCorporationIDContractsEnhanceYourCalm with default headers values
func NewGetCorporationsCorporationIDContractsEnhanceYourCalm() *GetCorporationsCorporationIDContractsEnhanceYourCalm {
	return &GetCorporationsCorporationIDContractsEnhanceYourCalm{}
}

/*
GetCorporationsCorporationIDContractsEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type GetCorporationsCorporationIDContractsEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

// IsSuccess returns true when this get corporations corporation Id contracts enhance your calm response has a 2xx status code
func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get corporations corporation Id contracts enhance your calm response has a 3xx status code
func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get corporations corporation Id contracts enhance your calm response has a 4xx status code
func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) IsClientError() bool {
	return true
}

// IsServerError returns true when this get corporations corporation Id contracts enhance your calm response has a 5xx status code
func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) IsServerError() bool {
	return false
}

// IsCode returns true when this get corporations corporation Id contracts enhance your calm response a status code equal to that given
func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) IsCode(code int) bool {
	return code == 420
}

// Code gets the status code for the get corporations corporation Id contracts enhance your calm response
func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) Code() int {
	return 420
}

func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) String() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *GetCorporationsCorporationIDContractsEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContractsInternalServerError creates a GetCorporationsCorporationIDContractsInternalServerError with default headers values
func NewGetCorporationsCorporationIDContractsInternalServerError() *GetCorporationsCorporationIDContractsInternalServerError {
	return &GetCorporationsCorporationIDContractsInternalServerError{}
}

/*
GetCorporationsCorporationIDContractsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetCorporationsCorporationIDContractsInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get corporations corporation Id contracts internal server error response has a 2xx status code
func (o *GetCorporationsCorporationIDContractsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get corporations corporation Id contracts internal server error response has a 3xx status code
func (o *GetCorporationsCorporationIDContractsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get corporations corporation Id contracts internal server error response has a 4xx status code
func (o *GetCorporationsCorporationIDContractsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get corporations corporation Id contracts internal server error response has a 5xx status code
func (o *GetCorporationsCorporationIDContractsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get corporations corporation Id contracts internal server error response a status code equal to that given
func (o *GetCorporationsCorporationIDContractsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get corporations corporation Id contracts internal server error response
func (o *GetCorporationsCorporationIDContractsInternalServerError) Code() int {
	return 500
}

func (o *GetCorporationsCorporationIDContractsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetCorporationsCorporationIDContractsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContractsServiceUnavailable creates a GetCorporationsCorporationIDContractsServiceUnavailable with default headers values
func NewGetCorporationsCorporationIDContractsServiceUnavailable() *GetCorporationsCorporationIDContractsServiceUnavailable {
	return &GetCorporationsCorporationIDContractsServiceUnavailable{}
}

/*
GetCorporationsCorporationIDContractsServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type GetCorporationsCorporationIDContractsServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

// IsSuccess returns true when this get corporations corporation Id contracts service unavailable response has a 2xx status code
func (o *GetCorporationsCorporationIDContractsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get corporations corporation Id contracts service unavailable response has a 3xx status code
func (o *GetCorporationsCorporationIDContractsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get corporations corporation Id contracts service unavailable response has a 4xx status code
func (o *GetCorporationsCorporationIDContractsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get corporations corporation Id contracts service unavailable response has a 5xx status code
func (o *GetCorporationsCorporationIDContractsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get corporations corporation Id contracts service unavailable response a status code equal to that given
func (o *GetCorporationsCorporationIDContractsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the get corporations corporation Id contracts service unavailable response
func (o *GetCorporationsCorporationIDContractsServiceUnavailable) Code() int {
	return 503
}

func (o *GetCorporationsCorporationIDContractsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *GetCorporationsCorporationIDContractsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContractsGatewayTimeout creates a GetCorporationsCorporationIDContractsGatewayTimeout with default headers values
func NewGetCorporationsCorporationIDContractsGatewayTimeout() *GetCorporationsCorporationIDContractsGatewayTimeout {
	return &GetCorporationsCorporationIDContractsGatewayTimeout{}
}

/*
GetCorporationsCorporationIDContractsGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type GetCorporationsCorporationIDContractsGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

// IsSuccess returns true when this get corporations corporation Id contracts gateway timeout response has a 2xx status code
func (o *GetCorporationsCorporationIDContractsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get corporations corporation Id contracts gateway timeout response has a 3xx status code
func (o *GetCorporationsCorporationIDContractsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get corporations corporation Id contracts gateway timeout response has a 4xx status code
func (o *GetCorporationsCorporationIDContractsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get corporations corporation Id contracts gateway timeout response has a 5xx status code
func (o *GetCorporationsCorporationIDContractsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get corporations corporation Id contracts gateway timeout response a status code equal to that given
func (o *GetCorporationsCorporationIDContractsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the get corporations corporation Id contracts gateway timeout response
func (o *GetCorporationsCorporationIDContractsGatewayTimeout) Code() int {
	return 504
}

func (o *GetCorporationsCorporationIDContractsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /v1/corporations/{corporation_id}/contracts/][%d] getCorporationsCorporationIdContractsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetCorporationsCorporationIDContractsGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *GetCorporationsCorporationIDContractsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetCorporationsCorporationIDContractsOKBodyItems0 get_corporations_corporation_id_contracts_200_ok
//
// 200 ok object
swagger:model GetCorporationsCorporationIDContractsOKBodyItems0
*/
type GetCorporationsCorporationIDContractsOKBodyItems0 struct {

	// get_corporations_corporation_id_contracts_acceptor_id
	//
	// Who will accept the contract
	// Required: true
	AcceptorID *int32 `json:"acceptor_id"`

	// get_corporations_corporation_id_contracts_assignee_id
	//
	// ID to whom the contract is assigned, can be corporation or character ID
	// Required: true
	AssigneeID *int32 `json:"assignee_id"`

	// get_corporations_corporation_id_contracts_availability
	//
	// To whom the contract is available
	// Required: true
	// Enum: [public personal corporation alliance]
	Availability *string `json:"availability"`

	// get_corporations_corporation_id_contracts_buyout
	//
	// Buyout price (for Auctions only)
	Buyout float64 `json:"buyout,omitempty"`

	// get_corporations_corporation_id_contracts_collateral
	//
	// Collateral price (for Couriers only)
	Collateral float64 `json:"collateral,omitempty"`

	// get_corporations_corporation_id_contracts_contract_id
	//
	// contract_id integer
	// Required: true
	ContractID *int32 `json:"contract_id"`

	// get_corporations_corporation_id_contracts_date_accepted
	//
	// Date of confirmation of contract
	// Format: date-time
	DateAccepted strfmt.DateTime `json:"date_accepted,omitempty"`

	// get_corporations_corporation_id_contracts_date_completed
	//
	// Date of completed of contract
	// Format: date-time
	DateCompleted strfmt.DateTime `json:"date_completed,omitempty"`

	// get_corporations_corporation_id_contracts_date_expired
	//
	// Expiration date of the contract
	// Required: true
	// Format: date-time
	DateExpired *strfmt.DateTime `json:"date_expired"`

	// get_corporations_corporation_id_contracts_date_issued
	//
	// Сreation date of the contract
	// Required: true
	// Format: date-time
	DateIssued *strfmt.DateTime `json:"date_issued"`

	// get_corporations_corporation_id_contracts_days_to_complete
	//
	// Number of days to perform the contract
	DaysToComplete int32 `json:"days_to_complete,omitempty"`

	// get_corporations_corporation_id_contracts_end_location_id
	//
	// End location ID (for Couriers contract)
	EndLocationID int64 `json:"end_location_id,omitempty"`

	// get_corporations_corporation_id_contracts_for_corporation
	//
	// true if the contract was issued on behalf of the issuer's corporation
	// Required: true
	ForCorporation *bool `json:"for_corporation"`

	// get_corporations_corporation_id_contracts_issuer_corporation_id
	//
	// Character's corporation ID for the issuer
	// Required: true
	IssuerCorporationID *int32 `json:"issuer_corporation_id"`

	// get_corporations_corporation_id_contracts_issuer_id
	//
	// Character ID for the issuer
	// Required: true
	IssuerID *int32 `json:"issuer_id"`

	// get_corporations_corporation_id_contracts_price
	//
	// Price of contract (for ItemsExchange and Auctions)
	Price float64 `json:"price,omitempty"`

	// get_corporations_corporation_id_contracts_reward
	//
	// Remuneration for contract (for Couriers only)
	Reward float64 `json:"reward,omitempty"`

	// get_corporations_corporation_id_contracts_start_location_id
	//
	// Start location ID (for Couriers contract)
	StartLocationID int64 `json:"start_location_id,omitempty"`

	// get_corporations_corporation_id_contracts_status
	//
	// Status of the the contract
	// Required: true
	// Enum: [outstanding in_progress finished_issuer finished_contractor finished cancelled rejected failed deleted reversed]
	Status *string `json:"status"`

	// get_corporations_corporation_id_contracts_title
	//
	// Title of the contract
	Title string `json:"title,omitempty"`

	// get_corporations_corporation_id_contracts_type
	//
	// Type of the contract
	// Required: true
	// Enum: [unknown item_exchange auction courier loan]
	Type *string `json:"type"`

	// get_corporations_corporation_id_contracts_volume
	//
	// Volume of items in the contract
	Volume float64 `json:"volume,omitempty"`
}

// Validate validates this get corporations corporation ID contracts o k body items0
func (o *GetCorporationsCorporationIDContractsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAcceptorID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssigneeID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateContractID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateExpired(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateForCorporation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuerCorporationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateAcceptorID(formats strfmt.Registry) error {

	if err := validate.Required("acceptor_id", "body", o.AcceptorID); err != nil {
		return err
	}

	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateAssigneeID(formats strfmt.Registry) error {

	if err := validate.Required("assignee_id", "body", o.AssigneeID); err != nil {
		return err
	}

	return nil
}

var getCorporationsCorporationIdContractsOKBodyItems0TypeAvailabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","personal","corporation","alliance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationsCorporationIdContractsOKBodyItems0TypeAvailabilityPropEnum = append(getCorporationsCorporationIdContractsOKBodyItems0TypeAvailabilityPropEnum, v)
	}
}

const (

	// GetCorporationsCorporationIDContractsOKBodyItems0AvailabilityPublic captures enum value "public"
	GetCorporationsCorporationIDContractsOKBodyItems0AvailabilityPublic string = "public"

	// GetCorporationsCorporationIDContractsOKBodyItems0AvailabilityPersonal captures enum value "personal"
	GetCorporationsCorporationIDContractsOKBodyItems0AvailabilityPersonal string = "personal"

	// GetCorporationsCorporationIDContractsOKBodyItems0AvailabilityCorporation captures enum value "corporation"
	GetCorporationsCorporationIDContractsOKBodyItems0AvailabilityCorporation string = "corporation"

	// GetCorporationsCorporationIDContractsOKBodyItems0AvailabilityAlliance captures enum value "alliance"
	GetCorporationsCorporationIDContractsOKBodyItems0AvailabilityAlliance string = "alliance"
)

// prop value enum
func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateAvailabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getCorporationsCorporationIdContractsOKBodyItems0TypeAvailabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateAvailability(formats strfmt.Registry) error {

	if err := validate.Required("availability", "body", o.Availability); err != nil {
		return err
	}

	// value enum
	if err := o.validateAvailabilityEnum("availability", "body", *o.Availability); err != nil {
		return err
	}

	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateContractID(formats strfmt.Registry) error {

	if err := validate.Required("contract_id", "body", o.ContractID); err != nil {
		return err
	}

	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateDateAccepted(formats strfmt.Registry) error {
	if swag.IsZero(o.DateAccepted) { // not required
		return nil
	}

	if err := validate.FormatOf("date_accepted", "body", "date-time", o.DateAccepted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateDateCompleted(formats strfmt.Registry) error {
	if swag.IsZero(o.DateCompleted) { // not required
		return nil
	}

	if err := validate.FormatOf("date_completed", "body", "date-time", o.DateCompleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateDateExpired(formats strfmt.Registry) error {

	if err := validate.Required("date_expired", "body", o.DateExpired); err != nil {
		return err
	}

	if err := validate.FormatOf("date_expired", "body", "date-time", o.DateExpired.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateDateIssued(formats strfmt.Registry) error {

	if err := validate.Required("date_issued", "body", o.DateIssued); err != nil {
		return err
	}

	if err := validate.FormatOf("date_issued", "body", "date-time", o.DateIssued.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateForCorporation(formats strfmt.Registry) error {

	if err := validate.Required("for_corporation", "body", o.ForCorporation); err != nil {
		return err
	}

	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateIssuerCorporationID(formats strfmt.Registry) error {

	if err := validate.Required("issuer_corporation_id", "body", o.IssuerCorporationID); err != nil {
		return err
	}

	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateIssuerID(formats strfmt.Registry) error {

	if err := validate.Required("issuer_id", "body", o.IssuerID); err != nil {
		return err
	}

	return nil
}

var getCorporationsCorporationIdContractsOKBodyItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["outstanding","in_progress","finished_issuer","finished_contractor","finished","cancelled","rejected","failed","deleted","reversed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationsCorporationIdContractsOKBodyItems0TypeStatusPropEnum = append(getCorporationsCorporationIdContractsOKBodyItems0TypeStatusPropEnum, v)
	}
}

const (

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusOutstanding captures enum value "outstanding"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusOutstanding string = "outstanding"

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusInProgress captures enum value "in_progress"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusInProgress string = "in_progress"

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusFinishedIssuer captures enum value "finished_issuer"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusFinishedIssuer string = "finished_issuer"

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusFinishedContractor captures enum value "finished_contractor"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusFinishedContractor string = "finished_contractor"

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusFinished captures enum value "finished"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusFinished string = "finished"

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusCancelled captures enum value "cancelled"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusCancelled string = "cancelled"

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusRejected captures enum value "rejected"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusRejected string = "rejected"

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusFailed captures enum value "failed"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusFailed string = "failed"

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusDeleted captures enum value "deleted"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusDeleted string = "deleted"

	// GetCorporationsCorporationIDContractsOKBodyItems0StatusReversed captures enum value "reversed"
	GetCorporationsCorporationIDContractsOKBodyItems0StatusReversed string = "reversed"
)

// prop value enum
func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getCorporationsCorporationIdContractsOKBodyItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var getCorporationsCorporationIdContractsOKBodyItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","item_exchange","auction","courier","loan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationsCorporationIdContractsOKBodyItems0TypeTypePropEnum = append(getCorporationsCorporationIdContractsOKBodyItems0TypeTypePropEnum, v)
	}
}

const (

	// GetCorporationsCorporationIDContractsOKBodyItems0TypeUnknown captures enum value "unknown"
	GetCorporationsCorporationIDContractsOKBodyItems0TypeUnknown string = "unknown"

	// GetCorporationsCorporationIDContractsOKBodyItems0TypeItemExchange captures enum value "item_exchange"
	GetCorporationsCorporationIDContractsOKBodyItems0TypeItemExchange string = "item_exchange"

	// GetCorporationsCorporationIDContractsOKBodyItems0TypeAuction captures enum value "auction"
	GetCorporationsCorporationIDContractsOKBodyItems0TypeAuction string = "auction"

	// GetCorporationsCorporationIDContractsOKBodyItems0TypeCourier captures enum value "courier"
	GetCorporationsCorporationIDContractsOKBodyItems0TypeCourier string = "courier"

	// GetCorporationsCorporationIDContractsOKBodyItems0TypeLoan captures enum value "loan"
	GetCorporationsCorporationIDContractsOKBodyItems0TypeLoan string = "loan"
)

// prop value enum
func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getCorporationsCorporationIdContractsOKBodyItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetCorporationsCorporationIDContractsOKBodyItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get corporations corporation ID contracts o k body items0 based on context it is used
func (o *GetCorporationsCorporationIDContractsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCorporationsCorporationIDContractsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCorporationsCorporationIDContractsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDContractsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
