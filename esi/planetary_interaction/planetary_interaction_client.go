// Code generated by go-swagger; DO NOT EDIT.

package planetary_interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new planetary interaction API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for planetary interaction API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCharactersCharacterIDPlanets(params *GetCharactersCharacterIDPlanetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDPlanetsOK, error)

	GetCharactersCharacterIDPlanetsPlanetID(params *GetCharactersCharacterIDPlanetsPlanetIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDPlanetsPlanetIDOK, error)

	GetCorporationsCorporationIDCustomsOffices(params *GetCorporationsCorporationIDCustomsOfficesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDCustomsOfficesOK, error)

	GetUniverseSchematicsSchematicID(params *GetUniverseSchematicsSchematicIDParams, opts ...ClientOption) (*GetUniverseSchematicsSchematicIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetCharactersCharacterIDPlanets gets colonies

  Returns a list of all planetary colonies owned by a character.

---

This route is cached for up to 600 seconds
*/
func (a *Client) GetCharactersCharacterIDPlanets(params *GetCharactersCharacterIDPlanetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDPlanetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDPlanetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_planets",
		Method:             "GET",
		PathPattern:        "/v1/characters/{character_id}/planets/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDPlanetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDPlanetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_planets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCharactersCharacterIDPlanetsPlanetID gets colony layout

  Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information will not update until this criteria is met.

---

*/
func (a *Client) GetCharactersCharacterIDPlanetsPlanetID(params *GetCharactersCharacterIDPlanetsPlanetIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDPlanetsPlanetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDPlanetsPlanetIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_planets_planet_id",
		Method:             "GET",
		PathPattern:        "/v3/characters/{character_id}/planets/{planet_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDPlanetsPlanetIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDPlanetsPlanetIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_planets_planet_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCorporationsCorporationIDCustomsOffices lists corporation customs offices

  List customs offices owned by a corporation

---

This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDCustomsOffices(params *GetCorporationsCorporationIDCustomsOfficesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDCustomsOfficesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDCustomsOfficesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_customs_offices",
		Method:             "GET",
		PathPattern:        "/v1/corporations/{corporation_id}/customs_offices/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDCustomsOfficesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDCustomsOfficesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_customs_offices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUniverseSchematicsSchematicID gets schematic information

  Get information on a planetary factory schematic

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseSchematicsSchematicID(params *GetUniverseSchematicsSchematicIDParams, opts ...ClientOption) (*GetUniverseSchematicsSchematicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSchematicsSchematicIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_universe_schematics_schematic_id",
		Method:             "GET",
		PathPattern:        "/v1/universe/schematics/{schematic_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSchematicsSchematicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseSchematicsSchematicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_universe_schematics_schematic_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
