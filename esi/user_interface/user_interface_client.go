/*
 *    Copyright 2021 FerociousBite and Contributors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// Code generated by go-swagger; DO NOT EDIT.

package user_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user interface API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user interface API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostUIAutopilotWaypoint(params *PostUIAutopilotWaypointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIAutopilotWaypointNoContent, error)

	PostUIOpenwindowContract(params *PostUIOpenwindowContractParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIOpenwindowContractNoContent, error)

	PostUIOpenwindowInformation(params *PostUIOpenwindowInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIOpenwindowInformationNoContent, error)

	PostUIOpenwindowMarketdetails(params *PostUIOpenwindowMarketdetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIOpenwindowMarketdetailsNoContent, error)

	PostUIOpenwindowNewmail(params *PostUIOpenwindowNewmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIOpenwindowNewmailNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PostUIAutopilotWaypoint sets autopilot waypoint

  Set a solar system as autopilot waypoint

---

*/
func (a *Client) PostUIAutopilotWaypoint(params *PostUIAutopilotWaypointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIAutopilotWaypointNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIAutopilotWaypointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_ui_autopilot_waypoint",
		Method:             "POST",
		PathPattern:        "/v2/ui/autopilot/waypoint/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIAutopilotWaypointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUIAutopilotWaypointNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_ui_autopilot_waypoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUIOpenwindowContract opens contract window

  Open the contract window inside the client

---

*/
func (a *Client) PostUIOpenwindowContract(params *PostUIOpenwindowContractParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIOpenwindowContractNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIOpenwindowContractParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_ui_openwindow_contract",
		Method:             "POST",
		PathPattern:        "/v1/ui/openwindow/contract/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIOpenwindowContractReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUIOpenwindowContractNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_ui_openwindow_contract: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUIOpenwindowInformation opens information window

  Open the information window for a character, corporation or alliance inside the client

---

*/
func (a *Client) PostUIOpenwindowInformation(params *PostUIOpenwindowInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIOpenwindowInformationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIOpenwindowInformationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_ui_openwindow_information",
		Method:             "POST",
		PathPattern:        "/v1/ui/openwindow/information/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIOpenwindowInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUIOpenwindowInformationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_ui_openwindow_information: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUIOpenwindowMarketdetails opens market details

  Open the market details window for a specific typeID inside the client

---

*/
func (a *Client) PostUIOpenwindowMarketdetails(params *PostUIOpenwindowMarketdetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIOpenwindowMarketdetailsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIOpenwindowMarketdetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_ui_openwindow_marketdetails",
		Method:             "POST",
		PathPattern:        "/v1/ui/openwindow/marketdetails/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIOpenwindowMarketdetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUIOpenwindowMarketdetailsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_ui_openwindow_marketdetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUIOpenwindowNewmail opens new mail window

  Open the New Mail window, according to settings from the request if applicable

---

*/
func (a *Client) PostUIOpenwindowNewmail(params *PostUIOpenwindowNewmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUIOpenwindowNewmailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIOpenwindowNewmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_ui_openwindow_newmail",
		Method:             "POST",
		PathPattern:        "/v1/ui/openwindow/newmail/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIOpenwindowNewmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUIOpenwindowNewmailNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_ui_openwindow_newmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
