// Code generated by go-swagger; DO NOT EDIT.

package user_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostUIOpenwindowNewmailParams creates a new PostUIOpenwindowNewmailParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostUIOpenwindowNewmailParams() *PostUIOpenwindowNewmailParams {
	return &PostUIOpenwindowNewmailParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostUIOpenwindowNewmailParamsWithTimeout creates a new PostUIOpenwindowNewmailParams object
// with the ability to set a timeout on a request.
func NewPostUIOpenwindowNewmailParamsWithTimeout(timeout time.Duration) *PostUIOpenwindowNewmailParams {
	return &PostUIOpenwindowNewmailParams{
		timeout: timeout,
	}
}

// NewPostUIOpenwindowNewmailParamsWithContext creates a new PostUIOpenwindowNewmailParams object
// with the ability to set a context for a request.
func NewPostUIOpenwindowNewmailParamsWithContext(ctx context.Context) *PostUIOpenwindowNewmailParams {
	return &PostUIOpenwindowNewmailParams{
		Context: ctx,
	}
}

// NewPostUIOpenwindowNewmailParamsWithHTTPClient creates a new PostUIOpenwindowNewmailParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostUIOpenwindowNewmailParamsWithHTTPClient(client *http.Client) *PostUIOpenwindowNewmailParams {
	return &PostUIOpenwindowNewmailParams{
		HTTPClient: client,
	}
}

/* PostUIOpenwindowNewmailParams contains all the parameters to send to the API endpoint
   for the post ui openwindow newmail operation.

   Typically these are written to a http.Request.
*/
type PostUIOpenwindowNewmailParams struct {

	/* Datasource.

	   The server name you would like data from

	   Default: "tranquility"
	*/
	Datasource *string

	/* NewMail.

	   The details of mail to create
	*/
	NewMail PostUIOpenwindowNewmailBody

	/* Token.

	   Access token to use if unable to set a header
	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post ui openwindow newmail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostUIOpenwindowNewmailParams) WithDefaults() *PostUIOpenwindowNewmailParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post ui openwindow newmail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostUIOpenwindowNewmailParams) SetDefaults() {
	var (
		datasourceDefault = string("tranquility")
	)

	val := PostUIOpenwindowNewmailParams{
		Datasource: &datasourceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) WithTimeout(timeout time.Duration) *PostUIOpenwindowNewmailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) WithContext(ctx context.Context) *PostUIOpenwindowNewmailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) WithHTTPClient(client *http.Client) *PostUIOpenwindowNewmailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDatasource adds the datasource to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) WithDatasource(datasource *string) *PostUIOpenwindowNewmailParams {
	o.SetDatasource(datasource)
	return o
}

// SetDatasource adds the datasource to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) SetDatasource(datasource *string) {
	o.Datasource = datasource
}

// WithNewMail adds the newMail to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) WithNewMail(newMail PostUIOpenwindowNewmailBody) *PostUIOpenwindowNewmailParams {
	o.SetNewMail(newMail)
	return o
}

// SetNewMail adds the newMail to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) SetNewMail(newMail PostUIOpenwindowNewmailBody) {
	o.NewMail = newMail
}

// WithToken adds the token to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) WithToken(token *string) *PostUIOpenwindowNewmailParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the post ui openwindow newmail params
func (o *PostUIOpenwindowNewmailParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *PostUIOpenwindowNewmailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Datasource != nil {

		// query param datasource
		var qrDatasource string

		if o.Datasource != nil {
			qrDatasource = *o.Datasource
		}
		qDatasource := qrDatasource
		if qDatasource != "" {

			if err := r.SetQueryParam("datasource", qDatasource); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.NewMail); err != nil {
		return err
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
