// Code generated by go-swagger; DO NOT EDIT.

package user_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostUIOpenwindowInformationParams creates a new PostUIOpenwindowInformationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostUIOpenwindowInformationParams() *PostUIOpenwindowInformationParams {
	return &PostUIOpenwindowInformationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostUIOpenwindowInformationParamsWithTimeout creates a new PostUIOpenwindowInformationParams object
// with the ability to set a timeout on a request.
func NewPostUIOpenwindowInformationParamsWithTimeout(timeout time.Duration) *PostUIOpenwindowInformationParams {
	return &PostUIOpenwindowInformationParams{
		timeout: timeout,
	}
}

// NewPostUIOpenwindowInformationParamsWithContext creates a new PostUIOpenwindowInformationParams object
// with the ability to set a context for a request.
func NewPostUIOpenwindowInformationParamsWithContext(ctx context.Context) *PostUIOpenwindowInformationParams {
	return &PostUIOpenwindowInformationParams{
		Context: ctx,
	}
}

// NewPostUIOpenwindowInformationParamsWithHTTPClient creates a new PostUIOpenwindowInformationParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostUIOpenwindowInformationParamsWithHTTPClient(client *http.Client) *PostUIOpenwindowInformationParams {
	return &PostUIOpenwindowInformationParams{
		HTTPClient: client,
	}
}

/* PostUIOpenwindowInformationParams contains all the parameters to send to the API endpoint
   for the post ui openwindow information operation.

   Typically these are written to a http.Request.
*/
type PostUIOpenwindowInformationParams struct {

	/* Datasource.

	   The server name you would like data from

	   Default: "tranquility"
	*/
	Datasource *string

	/* TargetID.

	   The target to open

	   Format: int32
	*/
	TargetID int32

	/* Token.

	   Access token to use if unable to set a header
	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post ui openwindow information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostUIOpenwindowInformationParams) WithDefaults() *PostUIOpenwindowInformationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post ui openwindow information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostUIOpenwindowInformationParams) SetDefaults() {
	var (
		datasourceDefault = string("tranquility")
	)

	val := PostUIOpenwindowInformationParams{
		Datasource: &datasourceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) WithTimeout(timeout time.Duration) *PostUIOpenwindowInformationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) WithContext(ctx context.Context) *PostUIOpenwindowInformationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) WithHTTPClient(client *http.Client) *PostUIOpenwindowInformationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDatasource adds the datasource to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) WithDatasource(datasource *string) *PostUIOpenwindowInformationParams {
	o.SetDatasource(datasource)
	return o
}

// SetDatasource adds the datasource to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) SetDatasource(datasource *string) {
	o.Datasource = datasource
}

// WithTargetID adds the targetID to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) WithTargetID(targetID int32) *PostUIOpenwindowInformationParams {
	o.SetTargetID(targetID)
	return o
}

// SetTargetID adds the targetId to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) SetTargetID(targetID int32) {
	o.TargetID = targetID
}

// WithToken adds the token to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) WithToken(token *string) *PostUIOpenwindowInformationParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the post ui openwindow information params
func (o *PostUIOpenwindowInformationParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *PostUIOpenwindowInformationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Datasource != nil {

		// query param datasource
		var qrDatasource string

		if o.Datasource != nil {
			qrDatasource = *o.Datasource
		}
		qDatasource := qrDatasource
		if qDatasource != "" {

			if err := r.SetQueryParam("datasource", qDatasource); err != nil {
				return err
			}
		}
	}

	// query param target_id
	qrTargetID := o.TargetID
	qTargetID := swag.FormatInt32(qrTargetID)
	if qTargetID != "" {

		if err := r.SetQueryParam("target_id", qTargetID); err != nil {
			return err
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
