// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ferocious-space/eveapi/models"
)

// GetRouteOriginDestinationReader is a Reader for the GetRouteOriginDestination structure.
type GetRouteOriginDestinationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRouteOriginDestinationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRouteOriginDestinationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetRouteOriginDestinationNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetRouteOriginDestinationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRouteOriginDestinationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewGetRouteOriginDestinationEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRouteOriginDestinationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRouteOriginDestinationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRouteOriginDestinationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRouteOriginDestinationOK creates a GetRouteOriginDestinationOK with default headers values
func NewGetRouteOriginDestinationOK() *GetRouteOriginDestinationOK {
	return &GetRouteOriginDestinationOK{}
}

/*
GetRouteOriginDestinationOK describes a response with status code 200, with default header values.

Solar systems in route from origin to destination
*/
type GetRouteOriginDestinationOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	Payload []int32
}

// IsSuccess returns true when this get route origin destination o k response has a 2xx status code
func (o *GetRouteOriginDestinationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get route origin destination o k response has a 3xx status code
func (o *GetRouteOriginDestinationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route origin destination o k response has a 4xx status code
func (o *GetRouteOriginDestinationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get route origin destination o k response has a 5xx status code
func (o *GetRouteOriginDestinationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get route origin destination o k response a status code equal to that given
func (o *GetRouteOriginDestinationOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRouteOriginDestinationOK) Error() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationOK  %+v", 200, o.Payload)
}

func (o *GetRouteOriginDestinationOK) String() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationOK  %+v", 200, o.Payload)
}

func (o *GetRouteOriginDestinationOK) GetPayload() []int32 {
	return o.Payload
}

func (o *GetRouteOriginDestinationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationNotModified creates a GetRouteOriginDestinationNotModified with default headers values
func NewGetRouteOriginDestinationNotModified() *GetRouteOriginDestinationNotModified {
	return &GetRouteOriginDestinationNotModified{}
}

/*
GetRouteOriginDestinationNotModified describes a response with status code 304, with default header values.

Not modified
*/
type GetRouteOriginDestinationNotModified struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string
}

// IsSuccess returns true when this get route origin destination not modified response has a 2xx status code
func (o *GetRouteOriginDestinationNotModified) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route origin destination not modified response has a 3xx status code
func (o *GetRouteOriginDestinationNotModified) IsRedirect() bool {
	return true
}

// IsClientError returns true when this get route origin destination not modified response has a 4xx status code
func (o *GetRouteOriginDestinationNotModified) IsClientError() bool {
	return false
}

// IsServerError returns true when this get route origin destination not modified response has a 5xx status code
func (o *GetRouteOriginDestinationNotModified) IsServerError() bool {
	return false
}

// IsCode returns true when this get route origin destination not modified response a status code equal to that given
func (o *GetRouteOriginDestinationNotModified) IsCode(code int) bool {
	return code == 304
}

func (o *GetRouteOriginDestinationNotModified) Error() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationNotModified ", 304)
}

func (o *GetRouteOriginDestinationNotModified) String() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationNotModified ", 304)
}

func (o *GetRouteOriginDestinationNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	return nil
}

// NewGetRouteOriginDestinationBadRequest creates a GetRouteOriginDestinationBadRequest with default headers values
func NewGetRouteOriginDestinationBadRequest() *GetRouteOriginDestinationBadRequest {
	return &GetRouteOriginDestinationBadRequest{}
}

/*
GetRouteOriginDestinationBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetRouteOriginDestinationBadRequest struct {
	Payload *models.BadRequest
}

// IsSuccess returns true when this get route origin destination bad request response has a 2xx status code
func (o *GetRouteOriginDestinationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route origin destination bad request response has a 3xx status code
func (o *GetRouteOriginDestinationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route origin destination bad request response has a 4xx status code
func (o *GetRouteOriginDestinationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get route origin destination bad request response has a 5xx status code
func (o *GetRouteOriginDestinationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get route origin destination bad request response a status code equal to that given
func (o *GetRouteOriginDestinationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRouteOriginDestinationBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationBadRequest  %+v", 400, o.Payload)
}

func (o *GetRouteOriginDestinationBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationBadRequest  %+v", 400, o.Payload)
}

func (o *GetRouteOriginDestinationBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *GetRouteOriginDestinationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationNotFound creates a GetRouteOriginDestinationNotFound with default headers values
func NewGetRouteOriginDestinationNotFound() *GetRouteOriginDestinationNotFound {
	return &GetRouteOriginDestinationNotFound{}
}

/*
GetRouteOriginDestinationNotFound describes a response with status code 404, with default header values.

No route found
*/
type GetRouteOriginDestinationNotFound struct {
	Payload *GetRouteOriginDestinationNotFoundBody
}

// IsSuccess returns true when this get route origin destination not found response has a 2xx status code
func (o *GetRouteOriginDestinationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route origin destination not found response has a 3xx status code
func (o *GetRouteOriginDestinationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route origin destination not found response has a 4xx status code
func (o *GetRouteOriginDestinationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get route origin destination not found response has a 5xx status code
func (o *GetRouteOriginDestinationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get route origin destination not found response a status code equal to that given
func (o *GetRouteOriginDestinationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRouteOriginDestinationNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationNotFound  %+v", 404, o.Payload)
}

func (o *GetRouteOriginDestinationNotFound) String() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationNotFound  %+v", 404, o.Payload)
}

func (o *GetRouteOriginDestinationNotFound) GetPayload() *GetRouteOriginDestinationNotFoundBody {
	return o.Payload
}

func (o *GetRouteOriginDestinationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRouteOriginDestinationNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationEnhanceYourCalm creates a GetRouteOriginDestinationEnhanceYourCalm with default headers values
func NewGetRouteOriginDestinationEnhanceYourCalm() *GetRouteOriginDestinationEnhanceYourCalm {
	return &GetRouteOriginDestinationEnhanceYourCalm{}
}

/*
GetRouteOriginDestinationEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type GetRouteOriginDestinationEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

// IsSuccess returns true when this get route origin destination enhance your calm response has a 2xx status code
func (o *GetRouteOriginDestinationEnhanceYourCalm) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route origin destination enhance your calm response has a 3xx status code
func (o *GetRouteOriginDestinationEnhanceYourCalm) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route origin destination enhance your calm response has a 4xx status code
func (o *GetRouteOriginDestinationEnhanceYourCalm) IsClientError() bool {
	return true
}

// IsServerError returns true when this get route origin destination enhance your calm response has a 5xx status code
func (o *GetRouteOriginDestinationEnhanceYourCalm) IsServerError() bool {
	return false
}

// IsCode returns true when this get route origin destination enhance your calm response a status code equal to that given
func (o *GetRouteOriginDestinationEnhanceYourCalm) IsCode(code int) bool {
	return code == 420
}

func (o *GetRouteOriginDestinationEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetRouteOriginDestinationEnhanceYourCalm) String() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetRouteOriginDestinationEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *GetRouteOriginDestinationEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationInternalServerError creates a GetRouteOriginDestinationInternalServerError with default headers values
func NewGetRouteOriginDestinationInternalServerError() *GetRouteOriginDestinationInternalServerError {
	return &GetRouteOriginDestinationInternalServerError{}
}

/*
GetRouteOriginDestinationInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetRouteOriginDestinationInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get route origin destination internal server error response has a 2xx status code
func (o *GetRouteOriginDestinationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route origin destination internal server error response has a 3xx status code
func (o *GetRouteOriginDestinationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route origin destination internal server error response has a 4xx status code
func (o *GetRouteOriginDestinationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get route origin destination internal server error response has a 5xx status code
func (o *GetRouteOriginDestinationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get route origin destination internal server error response a status code equal to that given
func (o *GetRouteOriginDestinationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRouteOriginDestinationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRouteOriginDestinationInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRouteOriginDestinationInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetRouteOriginDestinationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationServiceUnavailable creates a GetRouteOriginDestinationServiceUnavailable with default headers values
func NewGetRouteOriginDestinationServiceUnavailable() *GetRouteOriginDestinationServiceUnavailable {
	return &GetRouteOriginDestinationServiceUnavailable{}
}

/*
GetRouteOriginDestinationServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type GetRouteOriginDestinationServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

// IsSuccess returns true when this get route origin destination service unavailable response has a 2xx status code
func (o *GetRouteOriginDestinationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route origin destination service unavailable response has a 3xx status code
func (o *GetRouteOriginDestinationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route origin destination service unavailable response has a 4xx status code
func (o *GetRouteOriginDestinationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get route origin destination service unavailable response has a 5xx status code
func (o *GetRouteOriginDestinationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get route origin destination service unavailable response a status code equal to that given
func (o *GetRouteOriginDestinationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRouteOriginDestinationServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRouteOriginDestinationServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRouteOriginDestinationServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *GetRouteOriginDestinationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationGatewayTimeout creates a GetRouteOriginDestinationGatewayTimeout with default headers values
func NewGetRouteOriginDestinationGatewayTimeout() *GetRouteOriginDestinationGatewayTimeout {
	return &GetRouteOriginDestinationGatewayTimeout{}
}

/*
GetRouteOriginDestinationGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type GetRouteOriginDestinationGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

// IsSuccess returns true when this get route origin destination gateway timeout response has a 2xx status code
func (o *GetRouteOriginDestinationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route origin destination gateway timeout response has a 3xx status code
func (o *GetRouteOriginDestinationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route origin destination gateway timeout response has a 4xx status code
func (o *GetRouteOriginDestinationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get route origin destination gateway timeout response has a 5xx status code
func (o *GetRouteOriginDestinationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get route origin destination gateway timeout response a status code equal to that given
func (o *GetRouteOriginDestinationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRouteOriginDestinationGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRouteOriginDestinationGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /v1/route/{origin}/{destination}/][%d] getRouteOriginDestinationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRouteOriginDestinationGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *GetRouteOriginDestinationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetRouteOriginDestinationNotFoundBody get_route_origin_destination_not_found
//
// Not found
swagger:model GetRouteOriginDestinationNotFoundBody
*/
type GetRouteOriginDestinationNotFoundBody struct {

	// get_route_origin_destination_404_not_found
	//
	// Not found message
	Error string `json:"error,omitempty"`
}

// Validate validates this get route origin destination not found body
func (o *GetRouteOriginDestinationNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get route origin destination not found body based on context it is used
func (o *GetRouteOriginDestinationNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRouteOriginDestinationNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRouteOriginDestinationNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetRouteOriginDestinationNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
