// Code generated by go-swagger; DO NOT EDIT.

package character

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// GetCharactersCharacterIDReader is a Reader for the GetCharactersCharacterID structure.
type GetCharactersCharacterIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCharactersCharacterIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCharactersCharacterIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetCharactersCharacterIDNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetCharactersCharacterIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCharactersCharacterIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewGetCharactersCharacterIDEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCharactersCharacterIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCharactersCharacterIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetCharactersCharacterIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCharactersCharacterIDOK creates a GetCharactersCharacterIDOK with default headers values
func NewGetCharactersCharacterIDOK() *GetCharactersCharacterIDOK {
	return &GetCharactersCharacterIDOK{}
}

/*
GetCharactersCharacterIDOK describes a response with status code 200, with default header values.

Public data for the given character
*/
type GetCharactersCharacterIDOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	Payload *GetCharactersCharacterIDOKBody
}

// IsSuccess returns true when this get characters character Id o k response has a 2xx status code
func (o *GetCharactersCharacterIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get characters character Id o k response has a 3xx status code
func (o *GetCharactersCharacterIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id o k response has a 4xx status code
func (o *GetCharactersCharacterIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id o k response has a 5xx status code
func (o *GetCharactersCharacterIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id o k response a status code equal to that given
func (o *GetCharactersCharacterIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get characters character Id o k response
func (o *GetCharactersCharacterIDOK) Code() int {
	return 200
}

func (o *GetCharactersCharacterIDOK) Error() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdOK  %+v", 200, o.Payload)
}

func (o *GetCharactersCharacterIDOK) String() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdOK  %+v", 200, o.Payload)
}

func (o *GetCharactersCharacterIDOK) GetPayload() *GetCharactersCharacterIDOKBody {
	return o.Payload
}

func (o *GetCharactersCharacterIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	o.Payload = new(GetCharactersCharacterIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDNotModified creates a GetCharactersCharacterIDNotModified with default headers values
func NewGetCharactersCharacterIDNotModified() *GetCharactersCharacterIDNotModified {
	return &GetCharactersCharacterIDNotModified{}
}

/*
GetCharactersCharacterIDNotModified describes a response with status code 304, with default header values.

Not modified
*/
type GetCharactersCharacterIDNotModified struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string
}

// IsSuccess returns true when this get characters character Id not modified response has a 2xx status code
func (o *GetCharactersCharacterIDNotModified) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id not modified response has a 3xx status code
func (o *GetCharactersCharacterIDNotModified) IsRedirect() bool {
	return true
}

// IsClientError returns true when this get characters character Id not modified response has a 4xx status code
func (o *GetCharactersCharacterIDNotModified) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id not modified response has a 5xx status code
func (o *GetCharactersCharacterIDNotModified) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id not modified response a status code equal to that given
func (o *GetCharactersCharacterIDNotModified) IsCode(code int) bool {
	return code == 304
}

// Code gets the status code for the get characters character Id not modified response
func (o *GetCharactersCharacterIDNotModified) Code() int {
	return 304
}

func (o *GetCharactersCharacterIDNotModified) Error() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdNotModified ", 304)
}

func (o *GetCharactersCharacterIDNotModified) String() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdNotModified ", 304)
}

func (o *GetCharactersCharacterIDNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	return nil
}

// NewGetCharactersCharacterIDBadRequest creates a GetCharactersCharacterIDBadRequest with default headers values
func NewGetCharactersCharacterIDBadRequest() *GetCharactersCharacterIDBadRequest {
	return &GetCharactersCharacterIDBadRequest{}
}

/*
GetCharactersCharacterIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetCharactersCharacterIDBadRequest struct {
	Payload *models.BadRequest
}

// IsSuccess returns true when this get characters character Id bad request response has a 2xx status code
func (o *GetCharactersCharacterIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id bad request response has a 3xx status code
func (o *GetCharactersCharacterIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id bad request response has a 4xx status code
func (o *GetCharactersCharacterIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get characters character Id bad request response has a 5xx status code
func (o *GetCharactersCharacterIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id bad request response a status code equal to that given
func (o *GetCharactersCharacterIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get characters character Id bad request response
func (o *GetCharactersCharacterIDBadRequest) Code() int {
	return 400
}

func (o *GetCharactersCharacterIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetCharactersCharacterIDBadRequest) String() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetCharactersCharacterIDBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *GetCharactersCharacterIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDNotFound creates a GetCharactersCharacterIDNotFound with default headers values
func NewGetCharactersCharacterIDNotFound() *GetCharactersCharacterIDNotFound {
	return &GetCharactersCharacterIDNotFound{}
}

/*
GetCharactersCharacterIDNotFound describes a response with status code 404, with default header values.

Character not found
*/
type GetCharactersCharacterIDNotFound struct {
	Payload *GetCharactersCharacterIDNotFoundBody
}

// IsSuccess returns true when this get characters character Id not found response has a 2xx status code
func (o *GetCharactersCharacterIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id not found response has a 3xx status code
func (o *GetCharactersCharacterIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id not found response has a 4xx status code
func (o *GetCharactersCharacterIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get characters character Id not found response has a 5xx status code
func (o *GetCharactersCharacterIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id not found response a status code equal to that given
func (o *GetCharactersCharacterIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get characters character Id not found response
func (o *GetCharactersCharacterIDNotFound) Code() int {
	return 404
}

func (o *GetCharactersCharacterIDNotFound) Error() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdNotFound  %+v", 404, o.Payload)
}

func (o *GetCharactersCharacterIDNotFound) String() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdNotFound  %+v", 404, o.Payload)
}

func (o *GetCharactersCharacterIDNotFound) GetPayload() *GetCharactersCharacterIDNotFoundBody {
	return o.Payload
}

func (o *GetCharactersCharacterIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCharactersCharacterIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDEnhanceYourCalm creates a GetCharactersCharacterIDEnhanceYourCalm with default headers values
func NewGetCharactersCharacterIDEnhanceYourCalm() *GetCharactersCharacterIDEnhanceYourCalm {
	return &GetCharactersCharacterIDEnhanceYourCalm{}
}

/*
GetCharactersCharacterIDEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type GetCharactersCharacterIDEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

// IsSuccess returns true when this get characters character Id enhance your calm response has a 2xx status code
func (o *GetCharactersCharacterIDEnhanceYourCalm) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id enhance your calm response has a 3xx status code
func (o *GetCharactersCharacterIDEnhanceYourCalm) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id enhance your calm response has a 4xx status code
func (o *GetCharactersCharacterIDEnhanceYourCalm) IsClientError() bool {
	return true
}

// IsServerError returns true when this get characters character Id enhance your calm response has a 5xx status code
func (o *GetCharactersCharacterIDEnhanceYourCalm) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id enhance your calm response a status code equal to that given
func (o *GetCharactersCharacterIDEnhanceYourCalm) IsCode(code int) bool {
	return code == 420
}

// Code gets the status code for the get characters character Id enhance your calm response
func (o *GetCharactersCharacterIDEnhanceYourCalm) Code() int {
	return 420
}

func (o *GetCharactersCharacterIDEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetCharactersCharacterIDEnhanceYourCalm) String() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetCharactersCharacterIDEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *GetCharactersCharacterIDEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDInternalServerError creates a GetCharactersCharacterIDInternalServerError with default headers values
func NewGetCharactersCharacterIDInternalServerError() *GetCharactersCharacterIDInternalServerError {
	return &GetCharactersCharacterIDInternalServerError{}
}

/*
GetCharactersCharacterIDInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetCharactersCharacterIDInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get characters character Id internal server error response has a 2xx status code
func (o *GetCharactersCharacterIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id internal server error response has a 3xx status code
func (o *GetCharactersCharacterIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id internal server error response has a 4xx status code
func (o *GetCharactersCharacterIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id internal server error response has a 5xx status code
func (o *GetCharactersCharacterIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get characters character Id internal server error response a status code equal to that given
func (o *GetCharactersCharacterIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get characters character Id internal server error response
func (o *GetCharactersCharacterIDInternalServerError) Code() int {
	return 500
}

func (o *GetCharactersCharacterIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCharactersCharacterIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCharactersCharacterIDInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetCharactersCharacterIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDServiceUnavailable creates a GetCharactersCharacterIDServiceUnavailable with default headers values
func NewGetCharactersCharacterIDServiceUnavailable() *GetCharactersCharacterIDServiceUnavailable {
	return &GetCharactersCharacterIDServiceUnavailable{}
}

/*
GetCharactersCharacterIDServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type GetCharactersCharacterIDServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

// IsSuccess returns true when this get characters character Id service unavailable response has a 2xx status code
func (o *GetCharactersCharacterIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id service unavailable response has a 3xx status code
func (o *GetCharactersCharacterIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id service unavailable response has a 4xx status code
func (o *GetCharactersCharacterIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id service unavailable response has a 5xx status code
func (o *GetCharactersCharacterIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get characters character Id service unavailable response a status code equal to that given
func (o *GetCharactersCharacterIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the get characters character Id service unavailable response
func (o *GetCharactersCharacterIDServiceUnavailable) Code() int {
	return 503
}

func (o *GetCharactersCharacterIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCharactersCharacterIDServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCharactersCharacterIDServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *GetCharactersCharacterIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDGatewayTimeout creates a GetCharactersCharacterIDGatewayTimeout with default headers values
func NewGetCharactersCharacterIDGatewayTimeout() *GetCharactersCharacterIDGatewayTimeout {
	return &GetCharactersCharacterIDGatewayTimeout{}
}

/*
GetCharactersCharacterIDGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type GetCharactersCharacterIDGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

// IsSuccess returns true when this get characters character Id gateway timeout response has a 2xx status code
func (o *GetCharactersCharacterIDGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id gateway timeout response has a 3xx status code
func (o *GetCharactersCharacterIDGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id gateway timeout response has a 4xx status code
func (o *GetCharactersCharacterIDGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id gateway timeout response has a 5xx status code
func (o *GetCharactersCharacterIDGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get characters character Id gateway timeout response a status code equal to that given
func (o *GetCharactersCharacterIDGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the get characters character Id gateway timeout response
func (o *GetCharactersCharacterIDGatewayTimeout) Code() int {
	return 504
}

func (o *GetCharactersCharacterIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetCharactersCharacterIDGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /v5/characters/{character_id}/][%d] getCharactersCharacterIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetCharactersCharacterIDGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *GetCharactersCharacterIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetCharactersCharacterIDNotFoundBody get_characters_character_id_not_found
//
// Not found
swagger:model GetCharactersCharacterIDNotFoundBody
*/
type GetCharactersCharacterIDNotFoundBody struct {

	// get_characters_character_id_404_not_found
	//
	// Not found message
	Error string `json:"error,omitempty"`
}

// Validate validates this get characters character ID not found body
func (o *GetCharactersCharacterIDNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get characters character ID not found body based on context it is used
func (o *GetCharactersCharacterIDNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCharactersCharacterIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCharactersCharacterIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCharactersCharacterIDOKBody get_characters_character_id_ok
//
// 200 ok object
swagger:model GetCharactersCharacterIDOKBody
*/
type GetCharactersCharacterIDOKBody struct {

	// get_characters_character_id_alliance_id
	//
	// The character's alliance ID
	AllianceID int32 `json:"alliance_id,omitempty"`

	// get_characters_character_id_birthday
	//
	// Creation date of the character
	// Required: true
	// Format: date-time
	Birthday *strfmt.DateTime `json:"birthday"`

	// get_characters_character_id_bloodline_id
	//
	// bloodline_id integer
	// Required: true
	BloodlineID *int32 `json:"bloodline_id"`

	// get_characters_character_id_corporation_id
	//
	// The character's corporation ID
	// Required: true
	CorporationID *int32 `json:"corporation_id"`

	// get_characters_character_id_description
	//
	// description string
	Description string `json:"description,omitempty"`

	// get_characters_character_id_faction_id
	//
	// ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare
	FactionID int32 `json:"faction_id,omitempty"`

	// get_characters_character_id_gender
	//
	// gender string
	// Required: true
	// Enum: [female male]
	Gender *string `json:"gender"`

	// get_characters_character_id_name
	//
	// name string
	// Required: true
	Name *string `json:"name"`

	// get_characters_character_id_race_id
	//
	// race_id integer
	// Required: true
	RaceID *int32 `json:"race_id"`

	// get_characters_character_id_security_status
	//
	// security_status number
	// Maximum: 10
	// Minimum: -10
	SecurityStatus *float32 `json:"security_status,omitempty"`

	// get_characters_character_id_title
	//
	// The individual title of the character
	Title string `json:"title,omitempty"`
}

// Validate validates this get characters character ID o k body
func (o *GetCharactersCharacterIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBirthday(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBloodlineID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCorporationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCharactersCharacterIDOKBody) validateBirthday(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdOK"+"."+"birthday", "body", o.Birthday); err != nil {
		return err
	}

	if err := validate.FormatOf("getCharactersCharacterIdOK"+"."+"birthday", "body", "date-time", o.Birthday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDOKBody) validateBloodlineID(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdOK"+"."+"bloodline_id", "body", o.BloodlineID); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDOKBody) validateCorporationID(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdOK"+"."+"corporation_id", "body", o.CorporationID); err != nil {
		return err
	}

	return nil
}

var getCharactersCharacterIdOKBodyTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["female","male"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCharactersCharacterIdOKBodyTypeGenderPropEnum = append(getCharactersCharacterIdOKBodyTypeGenderPropEnum, v)
	}
}

const (

	// GetCharactersCharacterIDOKBodyGenderFemale captures enum value "female"
	GetCharactersCharacterIDOKBodyGenderFemale string = "female"

	// GetCharactersCharacterIDOKBodyGenderMale captures enum value "male"
	GetCharactersCharacterIDOKBodyGenderMale string = "male"
)

// prop value enum
func (o *GetCharactersCharacterIDOKBody) validateGenderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getCharactersCharacterIdOKBodyTypeGenderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetCharactersCharacterIDOKBody) validateGender(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdOK"+"."+"gender", "body", o.Gender); err != nil {
		return err
	}

	// value enum
	if err := o.validateGenderEnum("getCharactersCharacterIdOK"+"."+"gender", "body", *o.Gender); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDOKBody) validateRaceID(formats strfmt.Registry) error {

	if err := validate.Required("getCharactersCharacterIdOK"+"."+"race_id", "body", o.RaceID); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDOKBody) validateSecurityStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityStatus) { // not required
		return nil
	}

	if err := validate.Minimum("getCharactersCharacterIdOK"+"."+"security_status", "body", float64(*o.SecurityStatus), -10, false); err != nil {
		return err
	}

	if err := validate.Maximum("getCharactersCharacterIdOK"+"."+"security_status", "body", float64(*o.SecurityStatus), 10, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get characters character ID o k body based on context it is used
func (o *GetCharactersCharacterIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCharactersCharacterIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCharactersCharacterIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
