// Code generated by go-swagger; DO NOT EDIT.

package corporation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new corporation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for corporation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCorporationsCorporationID(params *GetCorporationsCorporationIDParams, opts ...ClientOption) (*GetCorporationsCorporationIDOK, error)

	GetCorporationsCorporationIDAlliancehistory(params *GetCorporationsCorporationIDAlliancehistoryParams, opts ...ClientOption) (*GetCorporationsCorporationIDAlliancehistoryOK, error)

	GetCorporationsCorporationIDBlueprints(params *GetCorporationsCorporationIDBlueprintsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDBlueprintsOK, error)

	GetCorporationsCorporationIDContainersLogs(params *GetCorporationsCorporationIDContainersLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDContainersLogsOK, error)

	GetCorporationsCorporationIDDivisions(params *GetCorporationsCorporationIDDivisionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDDivisionsOK, error)

	GetCorporationsCorporationIDFacilities(params *GetCorporationsCorporationIDFacilitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDFacilitiesOK, error)

	GetCorporationsCorporationIDIcons(params *GetCorporationsCorporationIDIconsParams, opts ...ClientOption) (*GetCorporationsCorporationIDIconsOK, error)

	GetCorporationsCorporationIDMedals(params *GetCorporationsCorporationIDMedalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMedalsOK, error)

	GetCorporationsCorporationIDMedalsIssued(params *GetCorporationsCorporationIDMedalsIssuedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMedalsIssuedOK, error)

	GetCorporationsCorporationIDMembers(params *GetCorporationsCorporationIDMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMembersOK, error)

	GetCorporationsCorporationIDMembersLimit(params *GetCorporationsCorporationIDMembersLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMembersLimitOK, error)

	GetCorporationsCorporationIDMembersTitles(params *GetCorporationsCorporationIDMembersTitlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMembersTitlesOK, error)

	GetCorporationsCorporationIDMembertracking(params *GetCorporationsCorporationIDMembertrackingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMembertrackingOK, error)

	GetCorporationsCorporationIDRoles(params *GetCorporationsCorporationIDRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDRolesOK, error)

	GetCorporationsCorporationIDRolesHistory(params *GetCorporationsCorporationIDRolesHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDRolesHistoryOK, error)

	GetCorporationsCorporationIDShareholders(params *GetCorporationsCorporationIDShareholdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDShareholdersOK, error)

	GetCorporationsCorporationIDStandings(params *GetCorporationsCorporationIDStandingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDStandingsOK, error)

	GetCorporationsCorporationIDStarbases(params *GetCorporationsCorporationIDStarbasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDStarbasesOK, error)

	GetCorporationsCorporationIDStarbasesStarbaseID(params *GetCorporationsCorporationIDStarbasesStarbaseIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDStarbasesStarbaseIDOK, error)

	GetCorporationsCorporationIDStructures(params *GetCorporationsCorporationIDStructuresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDStructuresOK, error)

	GetCorporationsCorporationIDTitles(params *GetCorporationsCorporationIDTitlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDTitlesOK, error)

	GetCorporationsNpccorps(params *GetCorporationsNpccorpsParams, opts ...ClientOption) (*GetCorporationsNpccorpsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetCorporationsCorporationID gets corporation information

	Public information about a corporation

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationID(params *GetCorporationsCorporationIDParams, opts ...ClientOption) (*GetCorporationsCorporationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id",
		Method:             "GET",
		PathPattern:        "/v5/corporations/{corporation_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDAlliancehistory gets alliance history

	Get a list of all the alliances a corporation has been a member of

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDAlliancehistory(params *GetCorporationsCorporationIDAlliancehistoryParams, opts ...ClientOption) (*GetCorporationsCorporationIDAlliancehistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDAlliancehistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_alliancehistory",
		Method:             "GET",
		PathPattern:        "/v3/corporations/{corporation_id}/alliancehistory/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDAlliancehistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDAlliancehistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_alliancehistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDBlueprints gets corporation blueprints

	Returns a list of blueprints the corporation owns

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDBlueprints(params *GetCorporationsCorporationIDBlueprintsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDBlueprintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDBlueprintsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_blueprints",
		Method:             "GET",
		PathPattern:        "/v3/corporations/{corporation_id}/blueprints/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDBlueprintsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDBlueprintsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_blueprints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDContainersLogs gets all corporation a l s c logs

	Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation

---

# This route is cached for up to 600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDContainersLogs(params *GetCorporationsCorporationIDContainersLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDContainersLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDContainersLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_containers_logs",
		Method:             "GET",
		PathPattern:        "/v3/corporations/{corporation_id}/containers/logs/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDContainersLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDContainersLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_containers_logs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDDivisions gets corporation divisions

	Return corporation hangar and wallet division names, only show if a division is not using the default name

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDDivisions(params *GetCorporationsCorporationIDDivisionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDDivisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDDivisionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_divisions",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/divisions/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDDivisionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDDivisionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_divisions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDFacilities gets corporation facilities

	Return a corporation's facilities

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Factory_Manager
*/
func (a *Client) GetCorporationsCorporationIDFacilities(params *GetCorporationsCorporationIDFacilitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDFacilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDFacilitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_facilities",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/facilities/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDFacilitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDFacilitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_facilities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDIcons gets corporation icon

	Get the icon urls for a corporation

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDIcons(params *GetCorporationsCorporationIDIconsParams, opts ...ClientOption) (*GetCorporationsCorporationIDIconsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDIconsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_icons",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/icons/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDIconsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDIconsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_icons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDMedals gets corporation medals

	Returns a corporation's medals

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDMedals(params *GetCorporationsCorporationIDMedalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMedalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMedalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_medals",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/medals/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMedalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDMedalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_medals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDMedalsIssued gets corporation issued medals

	Returns medals issued by a corporation

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDMedalsIssued(params *GetCorporationsCorporationIDMedalsIssuedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMedalsIssuedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMedalsIssuedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_medals_issued",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/medals/issued/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMedalsIssuedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDMedalsIssuedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_medals_issued: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDMembers gets corporation members

	Return the current member list of a corporation, the token's character need to be a member of the corporation.

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDMembers(params *GetCorporationsCorporationIDMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_members",
		Method:             "GET",
		PathPattern:        "/v4/corporations/{corporation_id}/members/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_members: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDMembersLimit gets corporation member limit

	Return a corporation's member limit, not including CEO himself

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDMembersLimit(params *GetCorporationsCorporationIDMembersLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMembersLimitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMembersLimitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_members_limit",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/members/limit/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMembersLimitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDMembersLimitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_members_limit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDMembersTitles gets corporation s members titles

	Returns a corporation's members' titles

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDMembersTitles(params *GetCorporationsCorporationIDMembersTitlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMembersTitlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMembersTitlesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_members_titles",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/members/titles/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMembersTitlesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDMembersTitlesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_members_titles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDMembertracking tracks corporation members

	Returns additional information about a corporation's members which helps tracking their activities

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDMembertracking(params *GetCorporationsCorporationIDMembertrackingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDMembertrackingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMembertrackingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_membertracking",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/membertracking/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMembertrackingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDMembertrackingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_membertracking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDRoles gets corporation member roles

	Return the roles of all members if the character has the personnel manager role or any grantable role.

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDRoles(params *GetCorporationsCorporationIDRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_roles",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/roles/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_roles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDRolesHistory gets corporation member roles history

	Return how roles have changed for a coporation's members, up to a month

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDRolesHistory(params *GetCorporationsCorporationIDRolesHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDRolesHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDRolesHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_roles_history",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/roles/history/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDRolesHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDRolesHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_roles_history: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDShareholders gets corporation shareholders

	Return the current shareholders of a corporation.

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDShareholders(params *GetCorporationsCorporationIDShareholdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDShareholdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDShareholdersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_shareholders",
		Method:             "GET",
		PathPattern:        "/v1/corporations/{corporation_id}/shareholders/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDShareholdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDShareholdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_shareholders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDStandings gets corporation standings

	Return corporation standings from agents, NPC corporations, and factions

---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDStandings(params *GetCorporationsCorporationIDStandingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDStandingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDStandingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_standings",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/standings/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDStandingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDStandingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_standings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDStarbases gets corporation starbases p o ses

	Returns list of corporation starbases (POSes)

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDStarbases(params *GetCorporationsCorporationIDStarbasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDStarbasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDStarbasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_starbases",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/starbases/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDStarbasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDStarbasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_starbases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDStarbasesStarbaseID gets starbase p o s detail

	Returns various settings and fuels of a starbase (POS)

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDStarbasesStarbaseID(params *GetCorporationsCorporationIDStarbasesStarbaseIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDStarbasesStarbaseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDStarbasesStarbaseIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_starbases_starbase_id",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/starbases/{starbase_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDStarbasesStarbaseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDStarbasesStarbaseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_starbases_starbase_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDStructures gets corporation structures

	Get a list of corporation structures. This route's version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Station_Manager
*/
func (a *Client) GetCorporationsCorporationIDStructures(params *GetCorporationsCorporationIDStructuresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDStructuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDStructuresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_structures",
		Method:             "GET",
		PathPattern:        "/v4/corporations/{corporation_id}/structures/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDStructuresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDStructuresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_structures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDTitles gets corporation titles

	Returns a corporation's titles

---

# This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director
*/
func (a *Client) GetCorporationsCorporationIDTitles(params *GetCorporationsCorporationIDTitlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDTitlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDTitlesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_titles",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/titles/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDTitlesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDTitlesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_titles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsNpccorps gets npc corporations

	Get a list of npc corporations

---

This route expires daily at 11:05
*/
func (a *Client) GetCorporationsNpccorps(params *GetCorporationsNpccorpsParams, opts ...ClientOption) (*GetCorporationsNpccorpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsNpccorpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_npccorps",
		Method:             "GET",
		PathPattern:        "/v2/corporations/npccorps/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsNpccorpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsNpccorpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_npccorps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
