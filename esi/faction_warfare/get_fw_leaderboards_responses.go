// Code generated by go-swagger; DO NOT EDIT.

package faction_warfare

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// GetFwLeaderboardsReader is a Reader for the GetFwLeaderboards structure.
type GetFwLeaderboardsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFwLeaderboardsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFwLeaderboardsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetFwLeaderboardsNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetFwLeaderboardsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewGetFwLeaderboardsEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFwLeaderboardsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetFwLeaderboardsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetFwLeaderboardsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFwLeaderboardsOK creates a GetFwLeaderboardsOK with default headers values
func NewGetFwLeaderboardsOK() *GetFwLeaderboardsOK {
	return &GetFwLeaderboardsOK{}
}

/* GetFwLeaderboardsOK describes a response with status code 200, with default header values.

Corporation leaderboard of kills and victory points within faction warfare
*/
type GetFwLeaderboardsOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	Payload *GetFwLeaderboardsOKBody
}

func (o *GetFwLeaderboardsOK) Error() string {
	return fmt.Sprintf("[GET /v1/fw/leaderboards/][%d] getFwLeaderboardsOK  %+v", 200, o.Payload)
}
func (o *GetFwLeaderboardsOK) GetPayload() *GetFwLeaderboardsOKBody {
	return o.Payload
}

func (o *GetFwLeaderboardsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	o.Payload = new(GetFwLeaderboardsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsNotModified creates a GetFwLeaderboardsNotModified with default headers values
func NewGetFwLeaderboardsNotModified() *GetFwLeaderboardsNotModified {
	return &GetFwLeaderboardsNotModified{}
}

/* GetFwLeaderboardsNotModified describes a response with status code 304, with default header values.

Not modified
*/
type GetFwLeaderboardsNotModified struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetFwLeaderboardsNotModified) Error() string {
	return fmt.Sprintf("[GET /v1/fw/leaderboards/][%d] getFwLeaderboardsNotModified ", 304)
}

func (o *GetFwLeaderboardsNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	return nil
}

// NewGetFwLeaderboardsBadRequest creates a GetFwLeaderboardsBadRequest with default headers values
func NewGetFwLeaderboardsBadRequest() *GetFwLeaderboardsBadRequest {
	return &GetFwLeaderboardsBadRequest{}
}

/* GetFwLeaderboardsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetFwLeaderboardsBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetFwLeaderboardsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/fw/leaderboards/][%d] getFwLeaderboardsBadRequest  %+v", 400, o.Payload)
}
func (o *GetFwLeaderboardsBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *GetFwLeaderboardsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsEnhanceYourCalm creates a GetFwLeaderboardsEnhanceYourCalm with default headers values
func NewGetFwLeaderboardsEnhanceYourCalm() *GetFwLeaderboardsEnhanceYourCalm {
	return &GetFwLeaderboardsEnhanceYourCalm{}
}

/* GetFwLeaderboardsEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type GetFwLeaderboardsEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetFwLeaderboardsEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /v1/fw/leaderboards/][%d] getFwLeaderboardsEnhanceYourCalm  %+v", 420, o.Payload)
}
func (o *GetFwLeaderboardsEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *GetFwLeaderboardsEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsInternalServerError creates a GetFwLeaderboardsInternalServerError with default headers values
func NewGetFwLeaderboardsInternalServerError() *GetFwLeaderboardsInternalServerError {
	return &GetFwLeaderboardsInternalServerError{}
}

/* GetFwLeaderboardsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetFwLeaderboardsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetFwLeaderboardsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/fw/leaderboards/][%d] getFwLeaderboardsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetFwLeaderboardsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetFwLeaderboardsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsServiceUnavailable creates a GetFwLeaderboardsServiceUnavailable with default headers values
func NewGetFwLeaderboardsServiceUnavailable() *GetFwLeaderboardsServiceUnavailable {
	return &GetFwLeaderboardsServiceUnavailable{}
}

/* GetFwLeaderboardsServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type GetFwLeaderboardsServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetFwLeaderboardsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v1/fw/leaderboards/][%d] getFwLeaderboardsServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetFwLeaderboardsServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *GetFwLeaderboardsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsGatewayTimeout creates a GetFwLeaderboardsGatewayTimeout with default headers values
func NewGetFwLeaderboardsGatewayTimeout() *GetFwLeaderboardsGatewayTimeout {
	return &GetFwLeaderboardsGatewayTimeout{}
}

/* GetFwLeaderboardsGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type GetFwLeaderboardsGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetFwLeaderboardsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/fw/leaderboards/][%d] getFwLeaderboardsGatewayTimeout  %+v", 504, o.Payload)
}
func (o *GetFwLeaderboardsGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *GetFwLeaderboardsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetFwLeaderboardsOKBody get_fw_leaderboards_ok
//
// 200 ok object
swagger:model GetFwLeaderboardsOKBody
*/
type GetFwLeaderboardsOKBody struct {

	// kills
	// Required: true
	Kills *GetFwLeaderboardsOKBodyKills `json:"kills"`

	// victory points
	// Required: true
	VictoryPoints *GetFwLeaderboardsOKBodyVictoryPoints `json:"victory_points"`
}

// Validate validates this get fw leaderboards o k body
func (o *GetFwLeaderboardsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKills(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVictoryPoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFwLeaderboardsOKBody) validateKills(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"kills", "body", o.Kills); err != nil {
		return err
	}

	if o.Kills != nil {
		if err := o.Kills.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills")
			}
			return err
		}
	}

	return nil
}

func (o *GetFwLeaderboardsOKBody) validateVictoryPoints(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"victory_points", "body", o.VictoryPoints); err != nil {
		return err
	}

	if o.VictoryPoints != nil {
		if err := o.VictoryPoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get fw leaderboards o k body based on the context it is used
func (o *GetFwLeaderboardsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateKills(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVictoryPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFwLeaderboardsOKBody) contextValidateKills(ctx context.Context, formats strfmt.Registry) error {

	if o.Kills != nil {
		if err := o.Kills.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills")
			}
			return err
		}
	}

	return nil
}

func (o *GetFwLeaderboardsOKBody) contextValidateVictoryPoints(ctx context.Context, formats strfmt.Registry) error {

	if o.VictoryPoints != nil {
		if err := o.VictoryPoints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBody) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyKills get_fw_leaderboards_kills
//
// Top 4 rankings of factions by number of kills from yesterday, last week and in total
swagger:model GetFwLeaderboardsOKBodyKills
*/
type GetFwLeaderboardsOKBodyKills struct {

	// get_fw_leaderboards_active_total
	//
	// Top 4 ranking of factions active in faction warfare by total kills. A faction is considered "active" if they have participated in faction warfare in the past 14 days
	// Required: true
	// Max Items: 4
	ActiveTotal []*GetFwLeaderboardsOKBodyKillsActiveTotalItems0 `json:"active_total"`

	// get_fw_leaderboards_last_week
	//
	// Top 4 ranking of factions by kills in the past week
	// Required: true
	// Max Items: 4
	LastWeek []*GetFwLeaderboardsOKBodyKillsLastWeekItems0 `json:"last_week"`

	// get_fw_leaderboards_yesterday
	//
	// Top 4 ranking of factions by kills in the past day
	// Required: true
	// Max Items: 4
	Yesterday []*GetFwLeaderboardsOKBodyKillsYesterdayItems0 `json:"yesterday"`
}

// Validate validates this get fw leaderboards o k body kills
func (o *GetFwLeaderboardsOKBodyKills) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActiveTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateYesterday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFwLeaderboardsOKBodyKills) validateActiveTotal(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"kills"+"."+"active_total", "body", o.ActiveTotal); err != nil {
		return err
	}

	iActiveTotalSize := int64(len(o.ActiveTotal))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"kills"+"."+"active_total", "body", iActiveTotalSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.ActiveTotal); i++ {
		if swag.IsZero(o.ActiveTotal[i]) { // not required
			continue
		}

		if o.ActiveTotal[i] != nil {
			if err := o.ActiveTotal[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills" + "." + "active_total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyKills) validateLastWeek(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"kills"+"."+"last_week", "body", o.LastWeek); err != nil {
		return err
	}

	iLastWeekSize := int64(len(o.LastWeek))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"kills"+"."+"last_week", "body", iLastWeekSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.LastWeek); i++ {
		if swag.IsZero(o.LastWeek[i]) { // not required
			continue
		}

		if o.LastWeek[i] != nil {
			if err := o.LastWeek[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills" + "." + "last_week" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyKills) validateYesterday(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"kills"+"."+"yesterday", "body", o.Yesterday); err != nil {
		return err
	}

	iYesterdaySize := int64(len(o.Yesterday))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"kills"+"."+"yesterday", "body", iYesterdaySize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.Yesterday); i++ {
		if swag.IsZero(o.Yesterday[i]) { // not required
			continue
		}

		if o.Yesterday[i] != nil {
			if err := o.Yesterday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills" + "." + "yesterday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get fw leaderboards o k body kills based on the context it is used
func (o *GetFwLeaderboardsOKBodyKills) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActiveTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastWeek(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateYesterday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFwLeaderboardsOKBodyKills) contextValidateActiveTotal(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ActiveTotal); i++ {

		if o.ActiveTotal[i] != nil {
			if err := o.ActiveTotal[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills" + "." + "active_total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyKills) contextValidateLastWeek(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.LastWeek); i++ {

		if o.LastWeek[i] != nil {
			if err := o.LastWeek[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills" + "." + "last_week" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyKills) contextValidateYesterday(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Yesterday); i++ {

		if o.Yesterday[i] != nil {
			if err := o.Yesterday[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills" + "." + "yesterday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKills) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKills) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyKills
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyKillsActiveTotalItems0 get_fw_leaderboards_active_total_active_total
//
// active_total object
swagger:model GetFwLeaderboardsOKBodyKillsActiveTotalItems0
*/
type GetFwLeaderboardsOKBodyKillsActiveTotalItems0 struct {

	// get_fw_leaderboards_amount
	//
	// Amount of kills
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

// Validate validates this get fw leaderboards o k body kills active total items0
func (o *GetFwLeaderboardsOKBodyKillsActiveTotalItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get fw leaderboards o k body kills active total items0 based on context it is used
func (o *GetFwLeaderboardsOKBodyKillsActiveTotalItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsActiveTotalItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsActiveTotalItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyKillsActiveTotalItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyKillsLastWeekItems0 get_fw_leaderboards_last_week_last_week
//
// last_week object
swagger:model GetFwLeaderboardsOKBodyKillsLastWeekItems0
*/
type GetFwLeaderboardsOKBodyKillsLastWeekItems0 struct {

	// get_fw_leaderboards_last_week_amount
	//
	// Amount of kills
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_last_week_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

// Validate validates this get fw leaderboards o k body kills last week items0
func (o *GetFwLeaderboardsOKBodyKillsLastWeekItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get fw leaderboards o k body kills last week items0 based on context it is used
func (o *GetFwLeaderboardsOKBodyKillsLastWeekItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsLastWeekItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsLastWeekItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyKillsLastWeekItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyKillsYesterdayItems0 get_fw_leaderboards_yesterday_yesterday
//
// yesterday object
swagger:model GetFwLeaderboardsOKBodyKillsYesterdayItems0
*/
type GetFwLeaderboardsOKBodyKillsYesterdayItems0 struct {

	// get_fw_leaderboards_yesterday_amount
	//
	// Amount of kills
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_yesterday_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

// Validate validates this get fw leaderboards o k body kills yesterday items0
func (o *GetFwLeaderboardsOKBodyKillsYesterdayItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get fw leaderboards o k body kills yesterday items0 based on context it is used
func (o *GetFwLeaderboardsOKBodyKillsYesterdayItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsYesterdayItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsYesterdayItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyKillsYesterdayItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyVictoryPoints get_fw_leaderboards_victory_points
//
// Top 4 rankings of factions by victory points from yesterday, last week and in total
swagger:model GetFwLeaderboardsOKBodyVictoryPoints
*/
type GetFwLeaderboardsOKBodyVictoryPoints struct {

	// get_fw_leaderboards_victory_points_active_total
	//
	// Top 4 ranking of factions active in faction warfare by total victory points. A faction is considered "active" if they have participated in faction warfare in the past 14 days
	// Required: true
	// Max Items: 4
	ActiveTotal []*GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0 `json:"active_total"`

	// get_fw_leaderboards_victory_points_last_week
	//
	// Top 4 ranking of factions by victory points in the past week
	// Required: true
	// Max Items: 4
	LastWeek []*GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0 `json:"last_week"`

	// get_fw_leaderboards_victory_points_yesterday
	//
	// Top 4 ranking of factions by victory points in the past day
	// Required: true
	// Max Items: 4
	Yesterday []*GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0 `json:"yesterday"`
}

// Validate validates this get fw leaderboards o k body victory points
func (o *GetFwLeaderboardsOKBodyVictoryPoints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActiveTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateYesterday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFwLeaderboardsOKBodyVictoryPoints) validateActiveTotal(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"victory_points"+"."+"active_total", "body", o.ActiveTotal); err != nil {
		return err
	}

	iActiveTotalSize := int64(len(o.ActiveTotal))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"victory_points"+"."+"active_total", "body", iActiveTotalSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.ActiveTotal); i++ {
		if swag.IsZero(o.ActiveTotal[i]) { // not required
			continue
		}

		if o.ActiveTotal[i] != nil {
			if err := o.ActiveTotal[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points" + "." + "active_total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyVictoryPoints) validateLastWeek(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"victory_points"+"."+"last_week", "body", o.LastWeek); err != nil {
		return err
	}

	iLastWeekSize := int64(len(o.LastWeek))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"victory_points"+"."+"last_week", "body", iLastWeekSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.LastWeek); i++ {
		if swag.IsZero(o.LastWeek[i]) { // not required
			continue
		}

		if o.LastWeek[i] != nil {
			if err := o.LastWeek[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points" + "." + "last_week" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyVictoryPoints) validateYesterday(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"victory_points"+"."+"yesterday", "body", o.Yesterday); err != nil {
		return err
	}

	iYesterdaySize := int64(len(o.Yesterday))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"victory_points"+"."+"yesterday", "body", iYesterdaySize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.Yesterday); i++ {
		if swag.IsZero(o.Yesterday[i]) { // not required
			continue
		}

		if o.Yesterday[i] != nil {
			if err := o.Yesterday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points" + "." + "yesterday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get fw leaderboards o k body victory points based on the context it is used
func (o *GetFwLeaderboardsOKBodyVictoryPoints) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActiveTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastWeek(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateYesterday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFwLeaderboardsOKBodyVictoryPoints) contextValidateActiveTotal(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ActiveTotal); i++ {

		if o.ActiveTotal[i] != nil {
			if err := o.ActiveTotal[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points" + "." + "active_total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyVictoryPoints) contextValidateLastWeek(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.LastWeek); i++ {

		if o.LastWeek[i] != nil {
			if err := o.LastWeek[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points" + "." + "last_week" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyVictoryPoints) contextValidateYesterday(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Yesterday); i++ {

		if o.Yesterday[i] != nil {
			if err := o.Yesterday[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points" + "." + "yesterday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPoints) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPoints) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyVictoryPoints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0 get_fw_leaderboards_active_total_active_total_1
//
// active_total object
swagger:model GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0
*/
type GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0 struct {

	// get_fw_leaderboards_active_total_amount
	//
	// Amount of victory points
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_active_total_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

// Validate validates this get fw leaderboards o k body victory points active total items0
func (o *GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get fw leaderboards o k body victory points active total items0 based on context it is used
func (o *GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0 get_fw_leaderboards_last_week_last_week_1
//
// last_week object
swagger:model GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0
*/
type GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0 struct {

	// get_fw_leaderboards_last_week_amount_1
	//
	// Amount of victory points
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_last_week_faction_id_1
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

// Validate validates this get fw leaderboards o k body victory points last week items0
func (o *GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get fw leaderboards o k body victory points last week items0 based on context it is used
func (o *GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0 get_fw_leaderboards_yesterday_yesterday_1
//
// yesterday object
swagger:model GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0
*/
type GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0 struct {

	// get_fw_leaderboards_yesterday_amount_1
	//
	// Amount of victory points
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_yesterday_faction_id_1
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

// Validate validates this get fw leaderboards o k body victory points yesterday items0
func (o *GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get fw leaderboards o k body victory points yesterday items0 based on context it is used
func (o *GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
