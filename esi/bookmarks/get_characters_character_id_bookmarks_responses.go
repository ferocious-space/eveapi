// Code generated by go-swagger; DO NOT EDIT.

package bookmarks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ferocious-space/eveapi/models"
)

// GetCharactersCharacterIDBookmarksReader is a Reader for the GetCharactersCharacterIDBookmarks structure.
type GetCharactersCharacterIDBookmarksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCharactersCharacterIDBookmarksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCharactersCharacterIDBookmarksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetCharactersCharacterIDBookmarksNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetCharactersCharacterIDBookmarksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCharactersCharacterIDBookmarksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCharactersCharacterIDBookmarksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 420:
		result := NewGetCharactersCharacterIDBookmarksEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCharactersCharacterIDBookmarksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCharactersCharacterIDBookmarksServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetCharactersCharacterIDBookmarksGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCharactersCharacterIDBookmarksOK creates a GetCharactersCharacterIDBookmarksOK with default headers values
func NewGetCharactersCharacterIDBookmarksOK() *GetCharactersCharacterIDBookmarksOK {
	var (
		// initialize headers with default values
		xPagesDefault = int32(1)
	)

	return &GetCharactersCharacterIDBookmarksOK{

		XPages: xPagesDefault,
	}
}

/*
GetCharactersCharacterIDBookmarksOK describes a response with status code 200, with default header values.

A list of bookmarks
*/
type GetCharactersCharacterIDBookmarksOK struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string

	/* Maximum page number

	   Format: int32
	   Default: 1
	*/
	XPages int32

	Payload []*GetCharactersCharacterIDBookmarksOKBodyItems0
}

// IsSuccess returns true when this get characters character Id bookmarks o k response has a 2xx status code
func (o *GetCharactersCharacterIDBookmarksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get characters character Id bookmarks o k response has a 3xx status code
func (o *GetCharactersCharacterIDBookmarksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id bookmarks o k response has a 4xx status code
func (o *GetCharactersCharacterIDBookmarksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id bookmarks o k response has a 5xx status code
func (o *GetCharactersCharacterIDBookmarksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id bookmarks o k response a status code equal to that given
func (o *GetCharactersCharacterIDBookmarksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get characters character Id bookmarks o k response
func (o *GetCharactersCharacterIDBookmarksOK) Code() int {
	return 200
}

func (o *GetCharactersCharacterIDBookmarksOK) Error() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksOK  %+v", 200, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksOK) String() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksOK  %+v", 200, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksOK) GetPayload() []*GetCharactersCharacterIDBookmarksOKBodyItems0 {
	return o.Payload
}

func (o *GetCharactersCharacterIDBookmarksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	// hydrates response header X-Pages
	hdrXPages := response.GetHeader("X-Pages")

	if hdrXPages != "" {
		valxPages, err := swag.ConvertInt32(hdrXPages)
		if err != nil {
			return errors.InvalidType("X-Pages", "header", "int32", hdrXPages)
		}
		o.XPages = valxPages
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDBookmarksNotModified creates a GetCharactersCharacterIDBookmarksNotModified with default headers values
func NewGetCharactersCharacterIDBookmarksNotModified() *GetCharactersCharacterIDBookmarksNotModified {
	return &GetCharactersCharacterIDBookmarksNotModified{}
}

/*
GetCharactersCharacterIDBookmarksNotModified describes a response with status code 304, with default header values.

Not modified
*/
type GetCharactersCharacterIDBookmarksNotModified struct {

	/* The caching mechanism used
	 */
	CacheControl string

	/* RFC7232 compliant entity tag
	 */
	ETag string

	/* RFC7231 formatted datetime string
	 */
	Expires string

	/* RFC7231 formatted datetime string
	 */
	LastModified string
}

// IsSuccess returns true when this get characters character Id bookmarks not modified response has a 2xx status code
func (o *GetCharactersCharacterIDBookmarksNotModified) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id bookmarks not modified response has a 3xx status code
func (o *GetCharactersCharacterIDBookmarksNotModified) IsRedirect() bool {
	return true
}

// IsClientError returns true when this get characters character Id bookmarks not modified response has a 4xx status code
func (o *GetCharactersCharacterIDBookmarksNotModified) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id bookmarks not modified response has a 5xx status code
func (o *GetCharactersCharacterIDBookmarksNotModified) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id bookmarks not modified response a status code equal to that given
func (o *GetCharactersCharacterIDBookmarksNotModified) IsCode(code int) bool {
	return code == 304
}

// Code gets the status code for the get characters character Id bookmarks not modified response
func (o *GetCharactersCharacterIDBookmarksNotModified) Code() int {
	return 304
}

func (o *GetCharactersCharacterIDBookmarksNotModified) Error() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksNotModified ", 304)
}

func (o *GetCharactersCharacterIDBookmarksNotModified) String() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksNotModified ", 304)
}

func (o *GetCharactersCharacterIDBookmarksNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Expires
	hdrExpires := response.GetHeader("Expires")

	if hdrExpires != "" {
		o.Expires = hdrExpires
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	return nil
}

// NewGetCharactersCharacterIDBookmarksBadRequest creates a GetCharactersCharacterIDBookmarksBadRequest with default headers values
func NewGetCharactersCharacterIDBookmarksBadRequest() *GetCharactersCharacterIDBookmarksBadRequest {
	return &GetCharactersCharacterIDBookmarksBadRequest{}
}

/*
GetCharactersCharacterIDBookmarksBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetCharactersCharacterIDBookmarksBadRequest struct {
	Payload *models.BadRequest
}

// IsSuccess returns true when this get characters character Id bookmarks bad request response has a 2xx status code
func (o *GetCharactersCharacterIDBookmarksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id bookmarks bad request response has a 3xx status code
func (o *GetCharactersCharacterIDBookmarksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id bookmarks bad request response has a 4xx status code
func (o *GetCharactersCharacterIDBookmarksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get characters character Id bookmarks bad request response has a 5xx status code
func (o *GetCharactersCharacterIDBookmarksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id bookmarks bad request response a status code equal to that given
func (o *GetCharactersCharacterIDBookmarksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get characters character Id bookmarks bad request response
func (o *GetCharactersCharacterIDBookmarksBadRequest) Code() int {
	return 400
}

func (o *GetCharactersCharacterIDBookmarksBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksBadRequest  %+v", 400, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksBadRequest) String() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksBadRequest  %+v", 400, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksBadRequest) GetPayload() *models.BadRequest {
	return o.Payload
}

func (o *GetCharactersCharacterIDBookmarksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDBookmarksUnauthorized creates a GetCharactersCharacterIDBookmarksUnauthorized with default headers values
func NewGetCharactersCharacterIDBookmarksUnauthorized() *GetCharactersCharacterIDBookmarksUnauthorized {
	return &GetCharactersCharacterIDBookmarksUnauthorized{}
}

/*
GetCharactersCharacterIDBookmarksUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCharactersCharacterIDBookmarksUnauthorized struct {
	Payload *models.Unauthorized
}

// IsSuccess returns true when this get characters character Id bookmarks unauthorized response has a 2xx status code
func (o *GetCharactersCharacterIDBookmarksUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id bookmarks unauthorized response has a 3xx status code
func (o *GetCharactersCharacterIDBookmarksUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id bookmarks unauthorized response has a 4xx status code
func (o *GetCharactersCharacterIDBookmarksUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get characters character Id bookmarks unauthorized response has a 5xx status code
func (o *GetCharactersCharacterIDBookmarksUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id bookmarks unauthorized response a status code equal to that given
func (o *GetCharactersCharacterIDBookmarksUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get characters character Id bookmarks unauthorized response
func (o *GetCharactersCharacterIDBookmarksUnauthorized) Code() int {
	return 401
}

func (o *GetCharactersCharacterIDBookmarksUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksUnauthorized) String() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksUnauthorized) GetPayload() *models.Unauthorized {
	return o.Payload
}

func (o *GetCharactersCharacterIDBookmarksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDBookmarksForbidden creates a GetCharactersCharacterIDBookmarksForbidden with default headers values
func NewGetCharactersCharacterIDBookmarksForbidden() *GetCharactersCharacterIDBookmarksForbidden {
	return &GetCharactersCharacterIDBookmarksForbidden{}
}

/*
GetCharactersCharacterIDBookmarksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCharactersCharacterIDBookmarksForbidden struct {
	Payload *models.Forbidden
}

// IsSuccess returns true when this get characters character Id bookmarks forbidden response has a 2xx status code
func (o *GetCharactersCharacterIDBookmarksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id bookmarks forbidden response has a 3xx status code
func (o *GetCharactersCharacterIDBookmarksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id bookmarks forbidden response has a 4xx status code
func (o *GetCharactersCharacterIDBookmarksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get characters character Id bookmarks forbidden response has a 5xx status code
func (o *GetCharactersCharacterIDBookmarksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id bookmarks forbidden response a status code equal to that given
func (o *GetCharactersCharacterIDBookmarksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get characters character Id bookmarks forbidden response
func (o *GetCharactersCharacterIDBookmarksForbidden) Code() int {
	return 403
}

func (o *GetCharactersCharacterIDBookmarksForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksForbidden  %+v", 403, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksForbidden) String() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksForbidden  %+v", 403, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksForbidden) GetPayload() *models.Forbidden {
	return o.Payload
}

func (o *GetCharactersCharacterIDBookmarksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDBookmarksEnhanceYourCalm creates a GetCharactersCharacterIDBookmarksEnhanceYourCalm with default headers values
func NewGetCharactersCharacterIDBookmarksEnhanceYourCalm() *GetCharactersCharacterIDBookmarksEnhanceYourCalm {
	return &GetCharactersCharacterIDBookmarksEnhanceYourCalm{}
}

/*
GetCharactersCharacterIDBookmarksEnhanceYourCalm describes a response with status code 420, with default header values.

Error limited
*/
type GetCharactersCharacterIDBookmarksEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

// IsSuccess returns true when this get characters character Id bookmarks enhance your calm response has a 2xx status code
func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id bookmarks enhance your calm response has a 3xx status code
func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id bookmarks enhance your calm response has a 4xx status code
func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) IsClientError() bool {
	return true
}

// IsServerError returns true when this get characters character Id bookmarks enhance your calm response has a 5xx status code
func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) IsServerError() bool {
	return false
}

// IsCode returns true when this get characters character Id bookmarks enhance your calm response a status code equal to that given
func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) IsCode(code int) bool {
	return code == 420
}

// Code gets the status code for the get characters character Id bookmarks enhance your calm response
func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) Code() int {
	return 420
}

func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) String() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) GetPayload() *models.ErrorLimited {
	return o.Payload
}

func (o *GetCharactersCharacterIDBookmarksEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDBookmarksInternalServerError creates a GetCharactersCharacterIDBookmarksInternalServerError with default headers values
func NewGetCharactersCharacterIDBookmarksInternalServerError() *GetCharactersCharacterIDBookmarksInternalServerError {
	return &GetCharactersCharacterIDBookmarksInternalServerError{}
}

/*
GetCharactersCharacterIDBookmarksInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetCharactersCharacterIDBookmarksInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get characters character Id bookmarks internal server error response has a 2xx status code
func (o *GetCharactersCharacterIDBookmarksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id bookmarks internal server error response has a 3xx status code
func (o *GetCharactersCharacterIDBookmarksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id bookmarks internal server error response has a 4xx status code
func (o *GetCharactersCharacterIDBookmarksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id bookmarks internal server error response has a 5xx status code
func (o *GetCharactersCharacterIDBookmarksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get characters character Id bookmarks internal server error response a status code equal to that given
func (o *GetCharactersCharacterIDBookmarksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get characters character Id bookmarks internal server error response
func (o *GetCharactersCharacterIDBookmarksInternalServerError) Code() int {
	return 500
}

func (o *GetCharactersCharacterIDBookmarksInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksInternalServerError) String() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetCharactersCharacterIDBookmarksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDBookmarksServiceUnavailable creates a GetCharactersCharacterIDBookmarksServiceUnavailable with default headers values
func NewGetCharactersCharacterIDBookmarksServiceUnavailable() *GetCharactersCharacterIDBookmarksServiceUnavailable {
	return &GetCharactersCharacterIDBookmarksServiceUnavailable{}
}

/*
GetCharactersCharacterIDBookmarksServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type GetCharactersCharacterIDBookmarksServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

// IsSuccess returns true when this get characters character Id bookmarks service unavailable response has a 2xx status code
func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id bookmarks service unavailable response has a 3xx status code
func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id bookmarks service unavailable response has a 4xx status code
func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id bookmarks service unavailable response has a 5xx status code
func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get characters character Id bookmarks service unavailable response a status code equal to that given
func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the get characters character Id bookmarks service unavailable response
func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) Code() int {
	return 503
}

func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) GetPayload() *models.ServiceUnavailable {
	return o.Payload
}

func (o *GetCharactersCharacterIDBookmarksServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCharactersCharacterIDBookmarksGatewayTimeout creates a GetCharactersCharacterIDBookmarksGatewayTimeout with default headers values
func NewGetCharactersCharacterIDBookmarksGatewayTimeout() *GetCharactersCharacterIDBookmarksGatewayTimeout {
	return &GetCharactersCharacterIDBookmarksGatewayTimeout{}
}

/*
GetCharactersCharacterIDBookmarksGatewayTimeout describes a response with status code 504, with default header values.

Gateway timeout
*/
type GetCharactersCharacterIDBookmarksGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

// IsSuccess returns true when this get characters character Id bookmarks gateway timeout response has a 2xx status code
func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get characters character Id bookmarks gateway timeout response has a 3xx status code
func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get characters character Id bookmarks gateway timeout response has a 4xx status code
func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get characters character Id bookmarks gateway timeout response has a 5xx status code
func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get characters character Id bookmarks gateway timeout response a status code equal to that given
func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the get characters character Id bookmarks gateway timeout response
func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) Code() int {
	return 504
}

func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /v2/characters/{character_id}/bookmarks/][%d] getCharactersCharacterIdBookmarksGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) GetPayload() *models.GatewayTimeout {
	return o.Payload
}

func (o *GetCharactersCharacterIDBookmarksGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetCharactersCharacterIDBookmarksOKBodyItems0 get_characters_character_id_bookmarks_200_ok
//
// 200 ok object
swagger:model GetCharactersCharacterIDBookmarksOKBodyItems0
*/
type GetCharactersCharacterIDBookmarksOKBodyItems0 struct {

	// get_characters_character_id_bookmarks_bookmark_id
	//
	// bookmark_id integer
	// Required: true
	BookmarkID *int32 `json:"bookmark_id"`

	// coordinates
	Coordinates *GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates `json:"coordinates,omitempty"`

	// get_characters_character_id_bookmarks_created
	//
	// created string
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// get_characters_character_id_bookmarks_creator_id
	//
	// creator_id integer
	// Required: true
	CreatorID *int32 `json:"creator_id"`

	// get_characters_character_id_bookmarks_folder_id
	//
	// folder_id integer
	FolderID int32 `json:"folder_id,omitempty"`

	// item
	Item *GetCharactersCharacterIDBookmarksOKBodyItems0Item `json:"item,omitempty"`

	// get_characters_character_id_bookmarks_label
	//
	// label string
	// Required: true
	Label *string `json:"label"`

	// get_characters_character_id_bookmarks_location_id
	//
	// location_id integer
	// Required: true
	LocationID *int32 `json:"location_id"`

	// get_characters_character_id_bookmarks_notes
	//
	// notes string
	// Required: true
	Notes *string `json:"notes"`
}

// Validate validates this get characters character ID bookmarks o k body items0
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBookmarkID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) validateBookmarkID(formats strfmt.Registry) error {

	if err := validate.Required("bookmark_id", "body", o.BookmarkID); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) validateCoordinates(formats strfmt.Registry) error {
	if swag.IsZero(o.Coordinates) { // not required
		return nil
	}

	if o.Coordinates != nil {
		if err := o.Coordinates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) validateCreatorID(formats strfmt.Registry) error {

	if err := validate.Required("creator_id", "body", o.CreatorID); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) validateItem(formats strfmt.Registry) error {
	if swag.IsZero(o.Item) { // not required
		return nil
	}

	if o.Item != nil {
		if err := o.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", o.Label); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("location_id", "body", o.LocationID); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) validateNotes(formats strfmt.Registry) error {

	if err := validate.Required("notes", "body", o.Notes); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get characters character ID bookmarks o k body items0 based on the context it is used
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCoordinates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) contextValidateCoordinates(ctx context.Context, formats strfmt.Registry) error {

	if o.Coordinates != nil {
		if err := o.Coordinates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) contextValidateItem(ctx context.Context, formats strfmt.Registry) error {

	if o.Item != nil {
		if err := o.Item.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDBookmarksOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates get_characters_character_id_bookmarks_coordinates
//
// Optional object that is returned if a bookmark was made on a planet or a random location in space.
swagger:model GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates
*/
type GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates struct {

	// get_characters_character_id_bookmarks_x
	//
	// x number
	// Required: true
	X *float64 `json:"x"`

	// get_characters_character_id_bookmarks_y
	//
	// y number
	// Required: true
	Y *float64 `json:"y"`

	// get_characters_character_id_bookmarks_z
	//
	// z number
	// Required: true
	Z *float64 `json:"z"`
}

// Validate validates this get characters character ID bookmarks o k body items0 coordinates
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateX(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateY(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateZ(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates) validateX(formats strfmt.Registry) error {

	if err := validate.Required("coordinates"+"."+"x", "body", o.X); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates) validateY(formats strfmt.Registry) error {

	if err := validate.Required("coordinates"+"."+"y", "body", o.Y); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates) validateZ(formats strfmt.Registry) error {

	if err := validate.Required("coordinates"+"."+"z", "body", o.Z); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get characters character ID bookmarks o k body items0 coordinates based on context it is used
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDBookmarksOKBodyItems0Coordinates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCharactersCharacterIDBookmarksOKBodyItems0Item get_characters_character_id_bookmarks_item
//
// Optional object that is returned if a bookmark was made on a particular item.
swagger:model GetCharactersCharacterIDBookmarksOKBodyItems0Item
*/
type GetCharactersCharacterIDBookmarksOKBodyItems0Item struct {

	// get_characters_character_id_bookmarks_item_id
	//
	// item_id integer
	// Required: true
	ItemID *int64 `json:"item_id"`

	// get_characters_character_id_bookmarks_type_id
	//
	// type_id integer
	// Required: true
	TypeID *int32 `json:"type_id"`
}

// Validate validates this get characters character ID bookmarks o k body items0 item
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Item) validateItemID(formats strfmt.Registry) error {

	if err := validate.Required("item"+"."+"item_id", "body", o.ItemID); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Item) validateTypeID(formats strfmt.Registry) error {

	if err := validate.Required("item"+"."+"type_id", "body", o.TypeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get characters character ID bookmarks o k body items0 item based on context it is used
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Item) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Item) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCharactersCharacterIDBookmarksOKBodyItems0Item) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDBookmarksOKBodyItems0Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
