// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPutCharactersCharacterIDContactsParams creates a new PutCharactersCharacterIDContactsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutCharactersCharacterIDContactsParams() *PutCharactersCharacterIDContactsParams {
	return &PutCharactersCharacterIDContactsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutCharactersCharacterIDContactsParamsWithTimeout creates a new PutCharactersCharacterIDContactsParams object
// with the ability to set a timeout on a request.
func NewPutCharactersCharacterIDContactsParamsWithTimeout(timeout time.Duration) *PutCharactersCharacterIDContactsParams {
	return &PutCharactersCharacterIDContactsParams{
		timeout: timeout,
	}
}

// NewPutCharactersCharacterIDContactsParamsWithContext creates a new PutCharactersCharacterIDContactsParams object
// with the ability to set a context for a request.
func NewPutCharactersCharacterIDContactsParamsWithContext(ctx context.Context) *PutCharactersCharacterIDContactsParams {
	return &PutCharactersCharacterIDContactsParams{
		Context: ctx,
	}
}

// NewPutCharactersCharacterIDContactsParamsWithHTTPClient creates a new PutCharactersCharacterIDContactsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutCharactersCharacterIDContactsParamsWithHTTPClient(client *http.Client) *PutCharactersCharacterIDContactsParams {
	return &PutCharactersCharacterIDContactsParams{
		HTTPClient: client,
	}
}

/* PutCharactersCharacterIDContactsParams contains all the parameters to send to the API endpoint
   for the put characters character id contacts operation.

   Typically these are written to a http.Request.
*/
type PutCharactersCharacterIDContactsParams struct {

	/* CharacterID.

	   An EVE character ID

	   Format: int32
	*/
	CharacterID int32

	/* ContactIds.

	   A list of contacts
	*/
	ContactIds []int32

	/* Datasource.

	   The server name you would like data from

	   Default: "tranquility"
	*/
	Datasource *string

	/* LabelIds.

	   Add custom labels to the contact
	*/
	LabelIds []int64

	/* Standing.

	   Standing for the contact

	   Format: float
	*/
	Standing float32

	/* Token.

	   Access token to use if unable to set a header
	*/
	Token *string

	/* Watched.

	   Whether the contact should be watched, note this is only effective on characters
	*/
	Watched *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put characters character id contacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutCharactersCharacterIDContactsParams) WithDefaults() *PutCharactersCharacterIDContactsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put characters character id contacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutCharactersCharacterIDContactsParams) SetDefaults() {
	var (
		datasourceDefault = string("tranquility")

		watchedDefault = bool(false)
	)

	val := PutCharactersCharacterIDContactsParams{
		Datasource: &datasourceDefault,
		Watched:    &watchedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithTimeout(timeout time.Duration) *PutCharactersCharacterIDContactsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithContext(ctx context.Context) *PutCharactersCharacterIDContactsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithHTTPClient(client *http.Client) *PutCharactersCharacterIDContactsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCharacterID adds the characterID to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithCharacterID(characterID int32) *PutCharactersCharacterIDContactsParams {
	o.SetCharacterID(characterID)
	return o
}

// SetCharacterID adds the characterId to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetCharacterID(characterID int32) {
	o.CharacterID = characterID
}

// WithContactIds adds the contactIds to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithContactIds(contactIds []int32) *PutCharactersCharacterIDContactsParams {
	o.SetContactIds(contactIds)
	return o
}

// SetContactIds adds the contactIds to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetContactIds(contactIds []int32) {
	o.ContactIds = contactIds
}

// WithDatasource adds the datasource to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithDatasource(datasource *string) *PutCharactersCharacterIDContactsParams {
	o.SetDatasource(datasource)
	return o
}

// SetDatasource adds the datasource to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetDatasource(datasource *string) {
	o.Datasource = datasource
}

// WithLabelIds adds the labelIds to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithLabelIds(labelIds []int64) *PutCharactersCharacterIDContactsParams {
	o.SetLabelIds(labelIds)
	return o
}

// SetLabelIds adds the labelIds to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetLabelIds(labelIds []int64) {
	o.LabelIds = labelIds
}

// WithStanding adds the standing to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithStanding(standing float32) *PutCharactersCharacterIDContactsParams {
	o.SetStanding(standing)
	return o
}

// SetStanding adds the standing to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetStanding(standing float32) {
	o.Standing = standing
}

// WithToken adds the token to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithToken(token *string) *PutCharactersCharacterIDContactsParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetToken(token *string) {
	o.Token = token
}

// WithWatched adds the watched to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) WithWatched(watched *bool) *PutCharactersCharacterIDContactsParams {
	o.SetWatched(watched)
	return o
}

// SetWatched adds the watched to the put characters character id contacts params
func (o *PutCharactersCharacterIDContactsParams) SetWatched(watched *bool) {
	o.Watched = watched
}

// WriteToRequest writes these params to a swagger request
func (o *PutCharactersCharacterIDContactsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param character_id
	if err := r.SetPathParam("character_id", swag.FormatInt32(o.CharacterID)); err != nil {
		return err
	}
	if o.ContactIds != nil {
		if err := r.SetBodyParam(o.ContactIds); err != nil {
			return err
		}
	}

	if o.Datasource != nil {

		// query param datasource
		var qrDatasource string

		if o.Datasource != nil {
			qrDatasource = *o.Datasource
		}
		qDatasource := qrDatasource
		if qDatasource != "" {

			if err := r.SetQueryParam("datasource", qDatasource); err != nil {
				return err
			}
		}
	}

	if o.LabelIds != nil {

		// binding items for label_ids
		joinedLabelIds := o.bindParamLabelIds(reg)

		// query array param label_ids
		if err := r.SetQueryParam("label_ids", joinedLabelIds...); err != nil {
			return err
		}
	}

	// query param standing
	qrStanding := o.Standing
	qStanding := swag.FormatFloat32(qrStanding)
	if qStanding != "" {

		if err := r.SetQueryParam("standing", qStanding); err != nil {
			return err
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if o.Watched != nil {

		// query param watched
		var qrWatched bool

		if o.Watched != nil {
			qrWatched = *o.Watched
		}
		qWatched := swag.FormatBool(qrWatched)
		if qWatched != "" {

			if err := r.SetQueryParam("watched", qWatched); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPutCharactersCharacterIDContacts binds the parameter label_ids
func (o *PutCharactersCharacterIDContactsParams) bindParamLabelIds(formats strfmt.Registry) []string {
	labelIdsIR := o.LabelIds

	var labelIdsIC []string
	for _, labelIdsIIR := range labelIdsIR { // explode []int64

		labelIdsIIV := swag.FormatInt64(labelIdsIIR) // int64 as string
		labelIdsIC = append(labelIdsIC, labelIdsIIV)
	}

	// items.CollectionFormat: ""
	labelIdsIS := swag.JoinByFormat(labelIdsIC, "")

	return labelIdsIS
}
