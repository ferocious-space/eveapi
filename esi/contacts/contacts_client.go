// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new contacts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contacts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCharactersCharacterIDContacts(params *DeleteCharactersCharacterIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCharactersCharacterIDContactsNoContent, error)

	GetAlliancesAllianceIDContacts(params *GetAlliancesAllianceIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlliancesAllianceIDContactsOK, error)

	GetAlliancesAllianceIDContactsLabels(params *GetAlliancesAllianceIDContactsLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlliancesAllianceIDContactsLabelsOK, error)

	GetCharactersCharacterIDContacts(params *GetCharactersCharacterIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDContactsOK, error)

	GetCharactersCharacterIDContactsLabels(params *GetCharactersCharacterIDContactsLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDContactsLabelsOK, error)

	GetCorporationsCorporationIDContacts(params *GetCorporationsCorporationIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDContactsOK, error)

	GetCorporationsCorporationIDContactsLabels(params *GetCorporationsCorporationIDContactsLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDContactsLabelsOK, error)

	PostCharactersCharacterIDContacts(params *PostCharactersCharacterIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCharactersCharacterIDContactsCreated, error)

	PutCharactersCharacterIDContacts(params *PutCharactersCharacterIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutCharactersCharacterIDContactsNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	DeleteCharactersCharacterIDContacts deletes contacts

	Bulk delete contacts

---
*/
func (a *Client) DeleteCharactersCharacterIDContacts(params *DeleteCharactersCharacterIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCharactersCharacterIDContactsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCharactersCharacterIDContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_characters_character_id_contacts",
		Method:             "DELETE",
		PathPattern:        "/v2/characters/{character_id}/contacts/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCharactersCharacterIDContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCharactersCharacterIDContactsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_characters_character_id_contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAlliancesAllianceIDContacts gets alliance contacts

	Return contacts of an alliance

---

This route is cached for up to 300 seconds
*/
func (a *Client) GetAlliancesAllianceIDContacts(params *GetAlliancesAllianceIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlliancesAllianceIDContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlliancesAllianceIDContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_alliances_alliance_id_contacts",
		Method:             "GET",
		PathPattern:        "/v2/alliances/{alliance_id}/contacts/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlliancesAllianceIDContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlliancesAllianceIDContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_alliances_alliance_id_contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAlliancesAllianceIDContactsLabels gets alliance contact labels

	Return custom labels for an alliance's contacts

---

This route is cached for up to 300 seconds
*/
func (a *Client) GetAlliancesAllianceIDContactsLabels(params *GetAlliancesAllianceIDContactsLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlliancesAllianceIDContactsLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlliancesAllianceIDContactsLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_alliances_alliance_id_contacts_labels",
		Method:             "GET",
		PathPattern:        "/v1/alliances/{alliance_id}/contacts/labels/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlliancesAllianceIDContactsLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlliancesAllianceIDContactsLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_alliances_alliance_id_contacts_labels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCharactersCharacterIDContacts gets contacts

	Return contacts of a character

---

This route is cached for up to 300 seconds
*/
func (a *Client) GetCharactersCharacterIDContacts(params *GetCharactersCharacterIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_contacts",
		Method:             "GET",
		PathPattern:        "/v2/characters/{character_id}/contacts/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCharactersCharacterIDContactsLabels gets contact labels

	Return custom labels for a character's contacts

---

This route is cached for up to 300 seconds
*/
func (a *Client) GetCharactersCharacterIDContactsLabels(params *GetCharactersCharacterIDContactsLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCharactersCharacterIDContactsLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDContactsLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_characters_character_id_contacts_labels",
		Method:             "GET",
		PathPattern:        "/v1/characters/{character_id}/contacts/labels/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDContactsLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCharactersCharacterIDContactsLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_characters_character_id_contacts_labels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDContacts gets corporation contacts

	Return contacts of a corporation

---

This route is cached for up to 300 seconds
*/
func (a *Client) GetCorporationsCorporationIDContacts(params *GetCorporationsCorporationIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_contacts",
		Method:             "GET",
		PathPattern:        "/v2/corporations/{corporation_id}/contacts/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCorporationsCorporationIDContactsLabels gets corporation contact labels

	Return custom labels for a corporation's contacts

---

This route is cached for up to 300 seconds
*/
func (a *Client) GetCorporationsCorporationIDContactsLabels(params *GetCorporationsCorporationIDContactsLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCorporationsCorporationIDContactsLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDContactsLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_contacts_labels",
		Method:             "GET",
		PathPattern:        "/v1/corporations/{corporation_id}/contacts/labels/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDContactsLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCorporationsCorporationIDContactsLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_corporations_corporation_id_contacts_labels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostCharactersCharacterIDContacts adds contacts

	Bulk add contacts with same settings

---
*/
func (a *Client) PostCharactersCharacterIDContacts(params *PostCharactersCharacterIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCharactersCharacterIDContactsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCharactersCharacterIDContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_characters_character_id_contacts",
		Method:             "POST",
		PathPattern:        "/v2/characters/{character_id}/contacts/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCharactersCharacterIDContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCharactersCharacterIDContactsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_characters_character_id_contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PutCharactersCharacterIDContacts edits contacts

	Bulk edit contacts with same settings

---
*/
func (a *Client) PutCharactersCharacterIDContacts(params *PutCharactersCharacterIDContactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutCharactersCharacterIDContactsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCharactersCharacterIDContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put_characters_character_id_contacts",
		Method:             "PUT",
		PathPattern:        "/v2/characters/{character_id}/contacts/",
		ProducesMediaTypes: []string{"application/json", "text/html; charset=utf-8", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCharactersCharacterIDContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCharactersCharacterIDContactsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put_characters_character_id_contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
